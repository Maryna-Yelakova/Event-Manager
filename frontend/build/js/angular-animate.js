/**
 * @license AngularJS v1.5.8
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

var ELEMENT_NODE = 1;
var COMMENT_NODE = 8;

var ADD_CLASS_SUFFIX = '-add';
var REMOVE_CLASS_SUFFIX = '-remove';
var EVENT_CLASS_PREFIX = 'ng-';
var ACTIVE_CLASS_SUFFIX = '-active';
var PREPARE_CLASS_SUFFIX = '-prepare';

var NG_ANIMATE_CLASSNAME = 'ng-animate';
var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

// Detect proper transitionend/animationend event names.
var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

// If unprefixed events are not supported but webkit-prefixed are, use the latter.
// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
// Register both events in case `window.onanimationend` is not supported because of that,
// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
// therefore there is no reason to test anymore for other vendor prefixes:
// http://caniuse.com/#search=transition
if ((window.ontransitionend === void 0) && (window.onwebkittransitionend !== void 0)) {
  CSS_PREFIX = '-webkit-';
  TRANSITION_PROP = 'WebkitTransition';
  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
} else {
  TRANSITION_PROP = 'transition';
  TRANSITIONEND_EVENT = 'transitionend';
}

if ((window.onanimationend === void 0) && (window.onwebkitanimationend !== void 0)) {
  CSS_PREFIX = '-webkit-';
  ANIMATION_PROP = 'WebkitAnimation';
  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
} else {
  ANIMATION_PROP = 'animation';
  ANIMATIONEND_EVENT = 'animationend';
}

var DURATION_KEY = 'Duration';
var PROPERTY_KEY = 'Property';
var DELAY_KEY = 'Delay';
var TIMING_KEY = 'TimingFunction';
var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
var ANIMATION_PLAYSTATE_KEY = 'PlayState';
var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

var ngMinErr = angular.$$minErr('ng');
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function packageStyles(options) {
  var styles = {};
  if (options && (options.to || options.from)) {
    styles.to = options.to;
    styles.from = options.from;
  }
  return styles;
}

function pendClasses(classes, fix, isPrefix) {
  var className = '';
  classes = isArray(classes)
      ? classes
      : classes && isString(classes) && classes.length
          ? classes.split(/\s+/)
          : [];
  forEach(classes, function(klass, i) {
    if (klass && klass.length > 0) {
      className += (i > 0) ? ' ' : '';
      className += isPrefix ? fix + klass
                            : klass + fix;
    }
  });
  return className;
}

function removeFromArray(arr, val) {
  var index = arr.indexOf(val);
  if (val >= 0) {
    arr.splice(index, 1);
  }
}

function stripCommentsFromElement(element) {
  if (element instanceof jqLite) {
    switch (element.length) {
      case 0:
        return element;

      case 1:
        // there is no point of stripping anything if the element
        // is the only element within the jqLite wrapper.
        // (it's important that we retain the element instance.)
        if (element[0].nodeType === ELEMENT_NODE) {
          return element;
        }
        break;

      default:
        return jqLite(extractElementNode(element));
    }
  }

  if (element.nodeType === ELEMENT_NODE) {
    return jqLite(element);
  }
}

function extractElementNode(element) {
  if (!element[0]) return element;
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType == ELEMENT_NODE) {
      return elm;
    }
  }
}

function $$addClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.addClass(elm, className);
  });
}

function $$removeClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.removeClass(elm, className);
  });
}

function applyAnimationClassesFactory($$jqLite) {
  return function(element, options) {
    if (options.addClass) {
      $$addClass($$jqLite, element, options.addClass);
      options.addClass = null;
    }
    if (options.removeClass) {
      $$removeClass($$jqLite, element, options.removeClass);
      options.removeClass = null;
    }
  };
}

function prepareAnimationOptions(options) {
  options = options || {};
  if (!options.$$prepared) {
    var domOperation = options.domOperation || noop;
    options.domOperation = function() {
      options.$$domOperationFired = true;
      domOperation();
      domOperation = noop;
    };
    options.$$prepared = true;
  }
  return options;
}

function applyAnimationStyles(element, options) {
  applyAnimationFromStyles(element, options);
  applyAnimationToStyles(element, options);
}

function applyAnimationFromStyles(element, options) {
  if (options.from) {
    element.css(options.from);
    options.from = null;
  }
}

function applyAnimationToStyles(element, options) {
  if (options.to) {
    element.css(options.to);
    options.to = null;
  }
}

function mergeAnimationDetails(element, oldAnimation, newAnimation) {
  var target = oldAnimation.options || {};
  var newOptions = newAnimation.options || {};

  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

  if (newOptions.preparationClasses) {
    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
    delete newOptions.preparationClasses;
  }

  // noop is basically when there is no callback; otherwise something has been set
  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

  extend(target, newOptions);

  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
  if (realDomOperation) {
    target.domOperation = realDomOperation;
  }

  if (classes.addClass) {
    target.addClass = classes.addClass;
  } else {
    target.addClass = null;
  }

  if (classes.removeClass) {
    target.removeClass = classes.removeClass;
  } else {
    target.removeClass = null;
  }

  oldAnimation.addClass = target.addClass;
  oldAnimation.removeClass = target.removeClass;

  return target;
}

function resolveElementClasses(existing, toAdd, toRemove) {
  var ADD_CLASS = 1;
  var REMOVE_CLASS = -1;

  var flags = {};
  existing = splitClassesToLookup(existing);

  toAdd = splitClassesToLookup(toAdd);
  forEach(toAdd, function(value, key) {
    flags[key] = ADD_CLASS;
  });

  toRemove = splitClassesToLookup(toRemove);
  forEach(toRemove, function(value, key) {
    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
  });

  var classes = {
    addClass: '',
    removeClass: ''
  };

  forEach(flags, function(val, klass) {
    var prop, allow;
    if (val === ADD_CLASS) {
      prop = 'addClass';
      allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
    } else if (val === REMOVE_CLASS) {
      prop = 'removeClass';
      allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
    }
    if (allow) {
      if (classes[prop].length) {
        classes[prop] += ' ';
      }
      classes[prop] += klass;
    }
  });

  function splitClassesToLookup(classes) {
    if (isString(classes)) {
      classes = classes.split(' ');
    }

    var obj = {};
    forEach(classes, function(klass) {
      // sometimes the split leaves empty string values
      // incase extra spaces were applied to the options
      if (klass.length) {
        obj[klass] = true;
      }
    });
    return obj;
  }

  return classes;
}

function getDomNode(element) {
  return (element instanceof jqLite) ? element[0] : element;
}

function applyGeneratedPreparationClasses(element, event, options) {
  var classes = '';
  if (event) {
    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
  }
  if (options.addClass) {
    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
  }
  if (options.removeClass) {
    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
  }
  if (classes.length) {
    options.preparationClasses = classes;
    element.addClass(classes);
  }
}

function clearGeneratedClasses(element, options) {
  if (options.preparationClasses) {
    element.removeClass(options.preparationClasses);
    options.preparationClasses = null;
  }
  if (options.activeClasses) {
    element.removeClass(options.activeClasses);
    options.activeClasses = null;
  }
}

function blockTransitions(node, duration) {
  // we use a negative delay value since it performs blocking
  // yet it doesn't kill any existing transitions running on the
  // same element which makes this safe for class-based animations
  var value = duration ? '-' + duration + 's' : '';
  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
  return [TRANSITION_DELAY_PROP, value];
}

function blockKeyframeAnimations(node, applyBlock) {
  var value = applyBlock ? 'paused' : '';
  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
  applyInlineStyle(node, [key, value]);
  return [key, value];
}

function applyInlineStyle(node, styleTuple) {
  var prop = styleTuple[0];
  var value = styleTuple[1];
  node.style[prop] = value;
}

function concatWithSpace(a,b) {
  if (!a) return b;
  if (!b) return a;
  return a + ' ' + b;
}

var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
  var queue, cancelFn;

  function scheduler(tasks) {
    // we make a copy since RAFScheduler mutates the state
    // of the passed in array variable and this would be difficult
    // to track down on the outside code
    queue = queue.concat(tasks);
    nextTick();
  }

  queue = scheduler.queue = [];

  /* waitUntilQuiet does two things:
   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through
   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
   *
   * The motivation here is that animation code can request more time from the scheduler
   * before the next wave runs. This allows for certain DOM properties such as classes to
   * be resolved in time for the next animation to run.
   */
  scheduler.waitUntilQuiet = function(fn) {
    if (cancelFn) cancelFn();

    cancelFn = $$rAF(function() {
      cancelFn = null;
      fn();
      nextTick();
    });
  };

  return scheduler;

  function nextTick() {
    if (!queue.length) return;

    var items = queue.shift();
    for (var i = 0; i < items.length; i++) {
      items[i]();
    }

    if (!cancelFn) {
      $$rAF(function() {
        if (!cancelFn) nextTick();
      });
    }
  }
}];

/**
 * @ngdoc directive
 * @name ngAnimateChildren
 * @restrict AE
 * @element ANY
 *
 * @description
 *
 * ngAnimateChildren allows you to specify that children of this element should animate even if any
 * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`
 * (structural) animation, child elements that also have an active structural animation are not animated.
 *
 * Note that even if `ngAnimteChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).
 *
 *
 * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,
 *     then child animations are allowed. If the value is `false`, child animations are not allowed.
 *
 * @example
 * <example module="ngAnimateChildren" name="ngAnimateChildren" deps="angular-animate.js" animations="true">
     <file name="index.html">
       <div ng-controller="mainController as main">
         <label>Show container? <input type="checkbox" ng-model="main.enterElement" /></label>
         <label>Animate children? <input type="checkbox" ng-model="main.animateChildren" /></label>
         <hr>
         <div ng-animate-children="{{main.animateChildren}}">
           <div ng-if="main.enterElement" class="container">
             List of items:
             <div ng-repeat="item in [0, 1, 2, 3]" class="item">Item {{item}}</div>
           </div>
         </div>
       </div>
     </file>
     <file name="animations.css">

      .container.ng-enter,
      .container.ng-leave {
        transition: all ease 1.5s;
      }

      .container.ng-enter,
      .container.ng-leave-active {
        opacity: 0;
      }

      .container.ng-leave,
      .container.ng-enter-active {
        opacity: 1;
      }

      .item {
        background: firebrick;
        color: #FFF;
        margin-bottom: 10px;
      }

      .item.ng-enter,
      .item.ng-leave {
        transition: transform 1.5s ease;
      }

      .item.ng-enter {
        transform: translateX(50px);
      }

      .item.ng-enter-active {
        transform: translateX(0);
      }
    </file>
    <file name="script.js">
      angular.module('ngAnimateChildren', ['ngAnimate'])
        .controller('mainController', function() {
          this.animateChildren = false;
          this.enterElement = false;
        });
    </file>
  </example>
 */
var $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {
  return {
    link: function(scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (isString(val) && val.length === 0) { //empty attribute
        element.data(NG_ANIMATE_CHILDREN_DATA, true);
      } else {
        // Interpolate and set the value, so that it is available to
        // animations that run right after compilation
        setData($interpolate(val)(scope));
        attrs.$observe('ngAnimateChildren', setData);
      }

      function setData(value) {
        value = value === 'on' || value === 'true';
        element.data(NG_ANIMATE_CHILDREN_DATA, value);
      }
    }
  };
}];

var ANIMATE_TIMER_KEY = '$$animateCss';

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
 * directives to create more complex animations that can be purely driven using CSS code.
 *
 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
 *
 * ## Usage
 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
 * any automatic control over cancelling animations and/or preventing animations from being run on
 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
 * the CSS animation.
 *
 * The example below shows how we can create a folding animation on an element using `ng-if`:
 *
 * ```html
 * <!-- notice the `fold-animation` CSS class -->
 * <div ng-if="onOff" class="fold-animation">
 *   This element will go BOOM
 * </div>
 * <button ng-click="onOff=true">Fold In</button>
 * ```
 *
 * Now we create the **JavaScript animation** that will trigger the CSS transition:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * ## More Advanced Uses
 *
 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
 *
 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
 * to provide a working animation that will run in CSS.
 *
 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         addClass: 'red large-text pulse-twice',
 *         easing: 'ease-out',
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
 *
 * ```css
 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
 * .red { background:red; }
 * .large-text { font-size:20px; }
 *
 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
 * .pulse-twice {
 *   animation: 0.5s pulse linear 2;
 *   -webkit-animation: 0.5s pulse linear 2;
 * }
 *
 * @keyframes pulse {
 *   from { transform: scale(0.5); }
 *   to { transform: scale(1.5); }
 * }
 *
 * @-webkit-keyframes pulse {
 *   from { -webkit-transform: scale(0.5); }
 *   to { -webkit-transform: scale(1.5); }
 * }
 * ```
 *
 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
 *
 * ## How the Options are handled
 *
 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
 * styles using the `from` and `to` properties.
 *
 * ```js
 * var animator = $animateCss(element, {
 *   from: { background:'red' },
 *   to: { background:'blue' }
 * });
 * animator.start();
 * ```
 *
 * ```css
 * .rotating-animation {
 *   animation:0.5s rotate linear;
 *   -webkit-animation:0.5s rotate linear;
 * }
 *
 * @keyframes rotate {
 *   from { transform: rotate(0deg); }
 *   to { transform: rotate(360deg); }
 * }
 *
 * @-webkit-keyframes rotate {
 *   from { -webkit-transform: rotate(0deg); }
 *   to { -webkit-transform: rotate(360deg); }
 * }
 * ```
 *
 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
 * and spread across the transition and keyframe animation.
 *
 * ## What is returned
 *
 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
 *
 * ```js
 * var animator = $animateCss(element, { ... });
 * ```
 *
 * Now what do the contents of our `animator` variable look like:
 *
 * ```js
 * {
 *   // starts the animation
 *   start: Function,
 *
 *   // ends (aborts) the animation
 *   end: Function
 * }
 * ```
 *
 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been
 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
 * and that changing them will not reconfigure the parameters of the animation.
 *
 * ### runner.done() vs runner.then()
 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
 * unless you really need a digest to kick off afterwards.
 *
 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
 *
 * @param {DOMElement} element the element that will be animated
 * @param {object} options the animation-related options that will be applied during the animation
 *
 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
 * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
 * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
 * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
 * is provided then the animation will be skipped entirely.
 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
 * CSS delay value.
 * * `stagger` - A numeric time value representing the delay between successively animated elements
 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
 *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
 * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)
 * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
 *    the animation is closed. This is useful for when the styles are used purely for the sake of
 *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).
 *    By default this value is set to `false`.
 *
 * @return {object} an object with start and end methods and details about the animation.
 *
 * * `start` - The method to start the animation. This will return a `Promise` when called.
 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
 */
var ONE_SECOND = 1000;
var BASE_TEN = 10;

var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
var CLOSING_TIME_BUFFER = 1.5;

var DETECT_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP,
  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
};

var DETECT_STAGGER_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP
};

function getCssKeyframeDurationStyle(duration) {
  return [ANIMATION_DURATION_PROP, duration + 's'];
}

function getCssDelayStyle(delay, isKeyframeAnimation) {
  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
  return [prop, delay + 's'];
}

function computeCssStyles($window, element, properties) {
  var styles = Object.create(null);
  var detectedStyles = $window.getComputedStyle(element) || {};
  forEach(properties, function(formalStyleName, actualStyleName) {
    var val = detectedStyles[formalStyleName];
    if (val) {
      var c = val.charAt(0);

      // only numerical-based values have a negative sign or digit as the first value
      if (c === '-' || c === '+' || c >= 0) {
        val = parseMaxTime(val);
      }

      // by setting this to null in the event that the delay is not set or is set directly as 0
      // then we can still allow for negative values to be used later on and not mistake this
      // value for being greater than any other negative value.
      if (val === 0) {
        val = null;
      }
      styles[actualStyleName] = val;
    }
  });

  return styles;
}

function parseMaxTime(str) {
  var maxValue = 0;
  var values = str.split(/\s*,\s*/);
  forEach(values, function(value) {
    // it's always safe to consider only second values and omit `ms` values since
    // getComputedStyle will always handle the conversion for us
    if (value.charAt(value.length - 1) == 's') {
      value = value.substring(0, value.length - 1);
    }
    value = parseFloat(value) || 0;
    maxValue = maxValue ? Math.max(value, maxValue) : value;
  });
  return maxValue;
}

function truthyTimingValue(val) {
  return val === 0 || val != null;
}

function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
  var style = TRANSITION_PROP;
  var value = duration + 's';
  if (applyOnlyDuration) {
    style += DURATION_KEY;
  } else {
    value += ' linear all';
  }
  return [style, value];
}

function createLocalCacheLookup() {
  var cache = Object.create(null);
  return {
    flush: function() {
      cache = Object.create(null);
    },

    count: function(key) {
      var entry = cache[key];
      return entry ? entry.total : 0;
    },

    get: function(key) {
      var entry = cache[key];
      return entry && entry.value;
    },

    put: function(key, value) {
      if (!cache[key]) {
        cache[key] = { total: 1, value: value };
      } else {
        cache[key].total++;
      }
    }
  };
}

// we do not reassign an already present style value since
// if we detect the style property value again we may be
// detecting styles that were added via the `from` styles.
// We make use of `isDefined` here since an empty string
// or null value (which is what getPropertyValue will return
// for a non-existing style) will still be marked as a valid
// value for the style (a falsy value implies that the style
// is to be removed at the end of the animation). If we had a simple
// "OR" statement then it would not be enough to catch that.
function registerRestorableStyles(backup, node, properties) {
  forEach(properties, function(prop) {
    backup[prop] = isDefined(backup[prop])
        ? backup[prop]
        : node.style.getPropertyValue(prop);
  });
}

var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
  var gcsLookup = createLocalCacheLookup();
  var gcsStaggerLookup = createLocalCacheLookup();

  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',
       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    var parentCounter = 0;
    function gcsHashFn(node, extraClasses) {
      var KEY = "$$ngAnimateParentKey";
      var parentNode = node.parentNode;
      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
    }

    function computeCachedCssStyles(node, className, cacheKey, properties) {
      var timings = gcsLookup.get(cacheKey);

      if (!timings) {
        timings = computeCssStyles($window, node, properties);
        if (timings.animationIterationCount === 'infinite') {
          timings.animationIterationCount = 1;
        }
      }

      // we keep putting this in multiple times even though the value and the cacheKey are the same
      // because we're keeping an internal tally of how many duplicate animations are detected.
      gcsLookup.put(cacheKey, timings);
      return timings;
    }

    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
      var stagger;

      // if we have one or more existing matches of matching elements
      // containing the same parent + CSS styles (which is how cacheKey works)
      // then staggering is possible
      if (gcsLookup.count(cacheKey) > 0) {
        stagger = gcsStaggerLookup.get(cacheKey);

        if (!stagger) {
          var staggerClassName = pendClasses(className, '-stagger');

          $$jqLite.addClass(node, staggerClassName);

          stagger = computeCssStyles($window, node, properties);

          // force the conversion of a null value to zero incase not set
          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

          $$jqLite.removeClass(node, staggerClassName);

          gcsStaggerLookup.put(cacheKey, stagger);
        }
      }

      return stagger || {};
    }

    var cancelLastRAFRequest;
    var rafWaitQueue = [];
    function waitUntilQuiet(callback) {
      rafWaitQueue.push(callback);
      $$rAFScheduler.waitUntilQuiet(function() {
        gcsLookup.flush();
        gcsStaggerLookup.flush();

        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
        var pageWidth = $$forceReflow();

        // we use a for loop to ensure that if the queue is changed
        // during this looping then it will consider new requests
        for (var i = 0; i < rafWaitQueue.length; i++) {
          rafWaitQueue[i](pageWidth);
        }
        rafWaitQueue.length = 0;
      });
    }

    function computeTimings(node, className, cacheKey) {
      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
      var aD = timings.animationDelay;
      var tD = timings.transitionDelay;
      timings.maxDelay = aD && tD
          ? Math.max(aD, tD)
          : (aD || tD);
      timings.maxDuration = Math.max(
          timings.animationDuration * timings.animationIterationCount,
          timings.transitionDuration);

      return timings;
    }

    return function init(element, initialOptions) {
      // all of the animation functions should create
      // a copy of the options data, however, if a
      // parent service has already created a copy then
      // we should stick to using that
      var options = initialOptions || {};
      if (!options.$$prepared) {
        options = prepareAnimationOptions(copy(options));
      }

      var restoreStyles = {};
      var node = getDomNode(element);
      if (!node
          || !node.parentNode
          || !$$animateQueue.enabled()) {
        return closeAndReturnNoopAnimator();
      }

      var temporaryStyles = [];
      var classes = element.attr('class');
      var styles = packageStyles(options);
      var animationClosed;
      var animationPaused;
      var animationCompleted;
      var runner;
      var runnerHost;
      var maxDelay;
      var maxDelayTime;
      var maxDuration;
      var maxDurationTime;
      var startTime;
      var events = [];

      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
        return closeAndReturnNoopAnimator();
      }

      var method = options.event && isArray(options.event)
            ? options.event.join(' ')
            : options.event;

      var isStructural = method && options.structural;
      var structuralClassName = '';
      var addRemoveClassName = '';

      if (isStructural) {
        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
      } else if (method) {
        structuralClassName = method;
      }

      if (options.addClass) {
        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
      }

      if (options.removeClass) {
        if (addRemoveClassName.length) {
          addRemoveClassName += ' ';
        }
        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
      }

      // there may be a situation where a structural animation is combined together
      // with CSS classes that need to resolve before the animation is computed.
      // However this means that there is no explicit CSS code to block the animation
      // from happening (by setting 0s none in the class name). If this is the case
      // we need to apply the classes before the first rAF so we know to continue if
      // there actually is a detected transition or keyframe animation
      if (options.applyClassesEarly && addRemoveClassName.length) {
        applyAnimationClasses(element, options);
      }

      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
      var fullClassName = classes + ' ' + preparationClasses;
      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

      // there is no way we can trigger an animation if no styles and
      // no classes are being applied which would then trigger a transition,
      // unless there a is raw keyframe value that is applied to the element.
      if (!containsKeyframeAnimation
           && !hasToStyles
           && !preparationClasses) {
        return closeAndReturnNoopAnimator();
      }

      var cacheKey, stagger;
      if (options.stagger > 0) {
        var staggerVal = parseFloat(options.stagger);
        stagger = {
          transitionDelay: staggerVal,
          animationDelay: staggerVal,
          transitionDuration: 0,
          animationDuration: 0
        };
      } else {
        cacheKey = gcsHashFn(node, fullClassName);
        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
      }

      if (!options.$$skipPreparationClasses) {
        $$jqLite.addClass(element, preparationClasses);
      }

      var applyOnlyDuration;

      if (options.transitionStyle) {
        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
        applyInlineStyle(node, transitionStyle);
        temporaryStyles.push(transitionStyle);
      }

      if (options.duration >= 0) {
        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

        // we set the duration so that it will be picked up by getComputedStyle later
        applyInlineStyle(node, durationStyle);
        temporaryStyles.push(durationStyle);
      }

      if (options.keyframeStyle) {
        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
        applyInlineStyle(node, keyframeStyle);
        temporaryStyles.push(keyframeStyle);
      }

      var itemIndex = stagger
          ? options.staggerIndex >= 0
              ? options.staggerIndex
              : gcsLookup.count(cacheKey)
          : 0;

      var isFirst = itemIndex === 0;

      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
      // without causing any combination of transitions to kick in. By adding a negative delay value
      // it forces the setup class' transition to end immediately. We later then remove the negative
      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
      // that if there is no transition defined then nothing will happen and this will also allow
      // other transitions to be stacked on top of each other without any chopping them out.
      if (isFirst && !options.skipBlocking) {
        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
      }

      var timings = computeTimings(node, fullClassName, cacheKey);
      var relativeDelay = timings.maxDelay;
      maxDelay = Math.max(relativeDelay, 0);
      maxDuration = timings.maxDuration;

      var flags = {};
      flags.hasTransitions          = timings.transitionDuration > 0;
      flags.hasAnimations           = timings.animationDuration > 0;
      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';
      flags.applyTransitionDuration = hasToStyles && (
                                        (flags.hasTransitions && !flags.hasTransitionAll)
                                         || (flags.hasAnimations && !flags.hasTransitions));
      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

        if (flags.applyTransitionDuration) {
          flags.hasTransitions = true;
          timings.transitionDuration = maxDuration;
          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
        }

        if (flags.applyAnimationDuration) {
          flags.hasAnimations = true;
          timings.animationDuration = maxDuration;
          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
        }
      }

      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
        return closeAndReturnNoopAnimator();
      }

      if (options.delay != null) {
        var delayStyle;
        if (typeof options.delay !== "boolean") {
          delayStyle = parseFloat(options.delay);
          // number in options.delay means we have to recalculate the delay for the closing timeout
          maxDelay = Math.max(delayStyle, 0);
        }

        if (flags.applyTransitionDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle));
        }

        if (flags.applyAnimationDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle, true));
        }
      }

      // we need to recalculate the delay value since we used a pre-emptive negative
      // delay value and the delay value is required for the final event checking. This
      // property will ensure that this will happen after the RAF phase has passed.
      if (options.duration == null && timings.transitionDuration > 0) {
        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
      }

      maxDelayTime = maxDelay * ONE_SECOND;
      maxDurationTime = maxDuration * ONE_SECOND;
      if (!options.skipBlocking) {
        flags.blockTransition = timings.transitionDuration > 0;
        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
                                       stagger.animationDelay > 0 &&
                                       stagger.animationDuration === 0;
      }

      if (options.from) {
        if (options.cleanupStyles) {
          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
        }
        applyAnimationFromStyles(element, options);
      }

      if (flags.blockTransition || flags.blockKeyframeAnimation) {
        applyBlocking(maxDuration);
      } else if (!options.skipBlocking) {
        blockTransitions(node, false);
      }

      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
      return {
        $$willAnimate: true,
        end: endFn,
        start: function() {
          if (animationClosed) return;

          runnerHost = {
            end: endFn,
            cancel: cancelFn,
            resume: null, //this will be set during the start() phase
            pause: null
          };

          runner = new $$AnimateRunner(runnerHost);

          waitUntilQuiet(start);

          // we don't have access to pause/resume the animation
          // since it hasn't run yet. AnimateRunner will therefore
          // set noop functions for resume and pause and they will
          // later be overridden once the animation is triggered
          return runner;
        }
      };

      function endFn() {
        close();
      }

      function cancelFn() {
        close(true);
      }

      function close(rejected) { // jshint ignore:line
        // if the promise has been called already then we shouldn't close
        // the animation again
        if (animationClosed || (animationCompleted && animationPaused)) return;
        animationClosed = true;
        animationPaused = false;

        if (!options.$$skipPreparationClasses) {
          $$jqLite.removeClass(element, preparationClasses);
        }
        $$jqLite.removeClass(element, activeClasses);

        blockKeyframeAnimations(node, false);
        blockTransitions(node, false);

        forEach(temporaryStyles, function(entry) {
          // There is only one way to remove inline style properties entirely from elements.
          // By using `removeProperty` this works, but we need to convert camel-cased CSS
          // styles down to hyphenated values.
          node.style[entry[0]] = '';
        });

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);

        if (Object.keys(restoreStyles).length) {
          forEach(restoreStyles, function(value, prop) {
            value ? node.style.setProperty(prop, value)
                  : node.style.removeProperty(prop);
          });
        }

        // the reason why we have this option is to allow a synchronous closing callback
        // that is fired as SOON as the animation ends (when the CSS is removed) or if
        // the animation never takes off at all. A good example is a leave animation since
        // the element must be removed just after the animation is over or else the element
        // will appear on screen for one animation frame causing an overbearing flicker.
        if (options.onDone) {
          options.onDone();
        }

        if (events && events.length) {
          // Remove the transitionend / animationend listener(s)
          element.off(events.join(' '), onAnimationProgress);
        }

        //Cancel the fallback closing timeout and remove the timer data
        var animationTimerData = element.data(ANIMATE_TIMER_KEY);
        if (animationTimerData) {
          $timeout.cancel(animationTimerData[0].timer);
          element.removeData(ANIMATE_TIMER_KEY);
        }

        // if the preparation function fails then the promise is not setup
        if (runner) {
          runner.complete(!rejected);
        }
      }

      function applyBlocking(duration) {
        if (flags.blockTransition) {
          blockTransitions(node, duration);
        }

        if (flags.blockKeyframeAnimation) {
          blockKeyframeAnimations(node, !!duration);
        }
      }

      function closeAndReturnNoopAnimator() {
        runner = new $$AnimateRunner({
          end: endFn,
          cancel: cancelFn
        });

        // should flush the cache animation
        waitUntilQuiet(noop);
        close();

        return {
          $$willAnimate: false,
          start: function() {
            return runner;
          },
          end: endFn
        };
      }

      function onAnimationProgress(event) {
        event.stopPropagation();
        var ev = event.originalEvent || event;

        // we now always use `Date.now()` due to the recent changes with
        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
        var timeStamp = ev.$manualTimeStamp || Date.now();

        /* Firefox (or possibly just Gecko) likes to not round values up
         * when a ms measurement is used for the animation */
        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

        /* $manualTimeStamp is a mocked timeStamp value which is set
         * within browserTrigger(). This is only here so that tests can
         * mock animations properly. Real events fallback to event.timeStamp,
         * or, if they don't, then a timeStamp is automatically created for them.
         * We're checking to see if the timeStamp surpasses the expected delay,
         * but we're using elapsedTime instead of the timeStamp on the 2nd
         * pre-condition since animationPauseds sometimes close off early */
        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
          // we set this flag to ensure that if the transition is paused then, when resumed,
          // the animation will automatically close itself since transitions cannot be paused.
          animationCompleted = true;
          close();
        }
      }

      function start() {
        if (animationClosed) return;
        if (!node.parentNode) {
          close();
          return;
        }

        // even though we only pause keyframe animations here the pause flag
        // will still happen when transitions are used. Only the transition will
        // not be paused since that is not possible. If the animation ends when
        // paused then it will not complete until unpaused or cancelled.
        var playPause = function(playAnimation) {
          if (!animationCompleted) {
            animationPaused = !playAnimation;
            if (timings.animationDuration) {
              var value = blockKeyframeAnimations(node, animationPaused);
              animationPaused
                  ? temporaryStyles.push(value)
                  : removeFromArray(temporaryStyles, value);
            }
          } else if (animationPaused && playAnimation) {
            animationPaused = false;
            close();
          }
        };

        // checking the stagger duration prevents an accidentally cascade of the CSS delay style
        // being inherited from the parent. If the transition duration is zero then we can safely
        // rely that the delay value is an intentional stagger delay style.
        var maxStagger = itemIndex > 0
                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
                            (timings.animationDuration && stagger.animationDuration === 0))
                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
        if (maxStagger) {
          $timeout(triggerAnimationStart,
                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
                   false);
        } else {
          triggerAnimationStart();
        }

        // this will decorate the existing promise runner with pause/resume methods
        runnerHost.resume = function() {
          playPause(true);
        };

        runnerHost.pause = function() {
          playPause(false);
        };

        function triggerAnimationStart() {
          // just incase a stagger animation kicks in when the animation
          // itself was cancelled entirely
          if (animationClosed) return;

          applyBlocking(false);

          forEach(temporaryStyles, function(entry) {
            var key = entry[0];
            var value = entry[1];
            node.style[key] = value;
          });

          applyAnimationClasses(element, options);
          $$jqLite.addClass(element, activeClasses);

          if (flags.recalculateTimingStyles) {
            fullClassName = node.className + ' ' + preparationClasses;
            cacheKey = gcsHashFn(node, fullClassName);

            timings = computeTimings(node, fullClassName, cacheKey);
            relativeDelay = timings.maxDelay;
            maxDelay = Math.max(relativeDelay, 0);
            maxDuration = timings.maxDuration;

            if (maxDuration === 0) {
              close();
              return;
            }

            flags.hasTransitions = timings.transitionDuration > 0;
            flags.hasAnimations = timings.animationDuration > 0;
          }

          if (flags.applyAnimationDelay) {
            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
                  ? parseFloat(options.delay)
                  : relativeDelay;

            maxDelay = Math.max(relativeDelay, 0);
            timings.animationDelay = relativeDelay;
            delayStyle = getCssDelayStyle(relativeDelay, true);
            temporaryStyles.push(delayStyle);
            node.style[delayStyle[0]] = delayStyle[1];
          }

          maxDelayTime = maxDelay * ONE_SECOND;
          maxDurationTime = maxDuration * ONE_SECOND;

          if (options.easing) {
            var easeProp, easeVal = options.easing;
            if (flags.hasTransitions) {
              easeProp = TRANSITION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
            if (flags.hasAnimations) {
              easeProp = ANIMATION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
          }

          if (timings.transitionDuration) {
            events.push(TRANSITIONEND_EVENT);
          }

          if (timings.animationDuration) {
            events.push(ANIMATIONEND_EVENT);
          }

          startTime = Date.now();
          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
          var endTime = startTime + timerTime;

          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
          var setupFallbackTimer = true;
          if (animationsData.length) {
            var currentTimerData = animationsData[0];
            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
            if (setupFallbackTimer) {
              $timeout.cancel(currentTimerData.timer);
            } else {
              animationsData.push(close);
            }
          }

          if (setupFallbackTimer) {
            var timer = $timeout(onAnimationExpired, timerTime, false);
            animationsData[0] = {
              timer: timer,
              expectedEndTime: endTime
            };
            animationsData.push(close);
            element.data(ANIMATE_TIMER_KEY, animationsData);
          }

          if (events.length) {
            element.on(events.join(' '), onAnimationProgress);
          }

          if (options.to) {
            if (options.cleanupStyles) {
              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
            }
            applyAnimationToStyles(element, options);
          }
        }

        function onAnimationExpired() {
          var animationsData = element.data(ANIMATE_TIMER_KEY);

          // this will be false in the event that the element was
          // removed from the DOM (via a leave animation or something
          // similar)
          if (animationsData) {
            for (var i = 1; i < animationsData.length; i++) {
              animationsData[i]();
            }
            element.removeData(ANIMATE_TIMER_KEY);
          }
        }
      }
    };
  }];
}];

var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateCssDriver');

  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

  function isDocumentFragment(node) {
    return node.parentNode && node.parentNode.nodeType === 11;
  }

  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {

    // only browsers that support these properties can render animations
    if (!$sniffer.animations && !$sniffer.transitions) return noop;

    var bodyNode = $document[0].body;
    var rootNode = getDomNode($rootElement);

    var rootBodyElement = jqLite(
      // this is to avoid using something that exists outside of the body
      // we also special case the doc fragment case because our unit test code
      // appends the $rootElement to the body after the app has been bootstrapped
      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
    );

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    return function initDriverFn(animationDetails) {
      return animationDetails.from && animationDetails.to
          ? prepareFromToAnchorAnimation(animationDetails.from,
                                         animationDetails.to,
                                         animationDetails.classes,
                                         animationDetails.anchors)
          : prepareRegularAnimation(animationDetails);
    };

    function filterCssClasses(classes) {
      //remove all the `ng-` stuff
      return classes.replace(/\bng-\S+\b/g, '');
    }

    function getUniqueValues(a, b) {
      if (isString(a)) a = a.split(' ');
      if (isString(b)) b = b.split(' ');
      return a.filter(function(val) {
        return b.indexOf(val) === -1;
      }).join(' ');
    }

    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
      var startingClasses = filterCssClasses(getClassVal(clone));

      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

      rootBodyElement.append(clone);

      var animatorIn, animatorOut = prepareOutAnimation();

      // the user may not end up using the `out` animation and
      // only making use of the `in` animation or vice-versa.
      // In either case we should allow this and not assume the
      // animation is over unless both animations are not used.
      if (!animatorOut) {
        animatorIn = prepareInAnimation();
        if (!animatorIn) {
          return end();
        }
      }

      var startingAnimator = animatorOut || animatorIn;

      return {
        start: function() {
          var runner;

          var currentAnimation = startingAnimator.start();
          currentAnimation.done(function() {
            currentAnimation = null;
            if (!animatorIn) {
              animatorIn = prepareInAnimation();
              if (animatorIn) {
                currentAnimation = animatorIn.start();
                currentAnimation.done(function() {
                  currentAnimation = null;
                  end();
                  runner.complete();
                });
                return currentAnimation;
              }
            }
            // in the event that there is no `in` animation
            end();
            runner.complete();
          });

          runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn
          });

          return runner;

          function endFn() {
            if (currentAnimation) {
              currentAnimation.end();
            }
          }
        }
      };

      function calculateAnchorStyles(anchor) {
        var styles = {};

        var coords = getDomNode(anchor).getBoundingClientRect();

        // we iterate directly since safari messes up and doesn't return
        // all the keys for the coords object when iterated
        forEach(['width','height','top','left'], function(key) {
          var value = coords[key];
          switch (key) {
            case 'top':
              value += bodyNode.scrollTop;
              break;
            case 'left':
              value += bodyNode.scrollLeft;
              break;
          }
          styles[key] = Math.floor(value) + 'px';
        });
        return styles;
      }

      function prepareOutAnimation() {
        var animator = $animateCss(clone, {
          addClass: NG_OUT_ANCHOR_CLASS_NAME,
          delay: true,
          from: calculateAnchorStyles(outAnchor)
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function getClassVal(element) {
        return element.attr('class') || '';
      }

      function prepareInAnimation() {
        var endingClasses = filterCssClasses(getClassVal(inAnchor));
        var toAdd = getUniqueValues(endingClasses, startingClasses);
        var toRemove = getUniqueValues(startingClasses, endingClasses);

        var animator = $animateCss(clone, {
          to: calculateAnchorStyles(inAnchor),
          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
          delay: true
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function end() {
        clone.remove();
        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
      }
    }

    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
      var fromAnimation = prepareRegularAnimation(from, noop);
      var toAnimation = prepareRegularAnimation(to, noop);

      var anchorAnimations = [];
      forEach(anchors, function(anchor) {
        var outElement = anchor['out'];
        var inElement = anchor['in'];
        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
        if (animator) {
          anchorAnimations.push(animator);
        }
      });

      // no point in doing anything when there are no elements to animate
      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

      return {
        start: function() {
          var animationRunners = [];

          if (fromAnimation) {
            animationRunners.push(fromAnimation.start());
          }

          if (toAnimation) {
            animationRunners.push(toAnimation.start());
          }

          forEach(anchorAnimations, function(animation) {
            animationRunners.push(animation.start());
          });

          var runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
          });

          $$AnimateRunner.all(animationRunners, function(status) {
            runner.complete(status);
          });

          return runner;

          function endFn() {
            forEach(animationRunners, function(runner) {
              runner.end();
            });
          }
        }
      };
    }

    function prepareRegularAnimation(animationDetails) {
      var element = animationDetails.element;
      var options = animationDetails.options || {};

      if (animationDetails.structural) {
        options.event = animationDetails.event;
        options.structural = true;
        options.applyClassesEarly = true;

        // we special case the leave animation since we want to ensure that
        // the element is removed as soon as the animation is over. Otherwise
        // a flicker might appear or the element may not be removed at all
        if (animationDetails.event === 'leave') {
          options.onDone = options.domOperation;
        }
      }

      // We assign the preparationClasses as the actual animation event since
      // the internals of $animateCss will just suffix the event token values
      // with `-active` to trigger the animation.
      if (options.preparationClasses) {
        options.event = concatWithSpace(options.event, options.preparationClasses);
      }

      var animator = $animateCss(element, options);

      // the driver lookup code inside of $$animation attempts to spawn a
      // driver one by one until a driver returns a.$$willAnimate animator object.
      // $animateCss will always return an object, however, it will pass in
      // a flag as a hint as to whether an animation was detected or not
      return animator.$$willAnimate ? animator : null;
    }
  }];
}];

// TODO(matsko): use caching here to speed things up for detection
// TODO(matsko): add documentation
//  by the time...

var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
       function($injector,   $$AnimateRunner,   $$jqLite) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
         // $animateJs(element, 'enter');
    return function(element, event, classes, options) {
      var animationClosed = false;

      // the `classes` argument is optional and if it is not used
      // then the classes will be resolved from the element's className
      // property as well as options.addClass/options.removeClass.
      if (arguments.length === 3 && isObject(classes)) {
        options = classes;
        classes = null;
      }

      options = prepareAnimationOptions(options);
      if (!classes) {
        classes = element.attr('class') || '';
        if (options.addClass) {
          classes += ' ' + options.addClass;
        }
        if (options.removeClass) {
          classes += ' ' + options.removeClass;
        }
      }

      var classesToAdd = options.addClass;
      var classesToRemove = options.removeClass;

      // the lookupAnimations function returns a series of animation objects that are
      // matched up with one or more of the CSS classes. These animation objects are
      // defined via the module.animation factory function. If nothing is detected then
      // we don't return anything which then makes $animation query the next driver.
      var animations = lookupAnimations(classes);
      var before, after;
      if (animations.length) {
        var afterFn, beforeFn;
        if (event == 'leave') {
          beforeFn = 'leave';
          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
        } else {
          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
          afterFn = event;
        }

        if (event !== 'enter' && event !== 'move') {
          before = packageAnimations(element, event, options, animations, beforeFn);
        }
        after  = packageAnimations(element, event, options, animations, afterFn);
      }

      // no matching animations
      if (!before && !after) return;

      function applyOptions() {
        options.domOperation();
        applyAnimationClasses(element, options);
      }

      function close() {
        animationClosed = true;
        applyOptions();
        applyAnimationStyles(element, options);
      }

      var runner;

      return {
        $$willAnimate: true,
        end: function() {
          if (runner) {
            runner.end();
          } else {
            close();
            runner = new $$AnimateRunner();
            runner.complete(true);
          }
          return runner;
        },
        start: function() {
          if (runner) {
            return runner;
          }

          runner = new $$AnimateRunner();
          var closeActiveAnimations;
          var chain = [];

          if (before) {
            chain.push(function(fn) {
              closeActiveAnimations = before(fn);
            });
          }

          if (chain.length) {
            chain.push(function(fn) {
              applyOptions();
              fn(true);
            });
          } else {
            applyOptions();
          }

          if (after) {
            chain.push(function(fn) {
              closeActiveAnimations = after(fn);
            });
          }

          runner.setHost({
            end: function() {
              endAnimations();
            },
            cancel: function() {
              endAnimations(true);
            }
          });

          $$AnimateRunner.chain(chain, onComplete);
          return runner;

          function onComplete(success) {
            close(success);
            runner.complete(success);
          }

          function endAnimations(cancelled) {
            if (!animationClosed) {
              (closeActiveAnimations || noop)(cancelled);
              onComplete(cancelled);
            }
          }
        }
      };

      function executeAnimationFn(fn, element, event, options, onDone) {
        var args;
        switch (event) {
          case 'animate':
            args = [element, options.from, options.to, onDone];
            break;

          case 'setClass':
            args = [element, classesToAdd, classesToRemove, onDone];
            break;

          case 'addClass':
            args = [element, classesToAdd, onDone];
            break;

          case 'removeClass':
            args = [element, classesToRemove, onDone];
            break;

          default:
            args = [element, onDone];
            break;
        }

        args.push(options);

        var value = fn.apply(fn, args);
        if (value) {
          if (isFunction(value.start)) {
            value = value.start();
          }

          if (value instanceof $$AnimateRunner) {
            value.done(onDone);
          } else if (isFunction(value)) {
            // optional onEnd / onCancel callback
            return value;
          }
        }

        return noop;
      }

      function groupEventedAnimations(element, event, options, animations, fnName) {
        var operations = [];
        forEach(animations, function(ani) {
          var animation = ani[fnName];
          if (!animation) return;

          // note that all of these animations will run in parallel
          operations.push(function() {
            var runner;
            var endProgressCb;

            var resolved = false;
            var onAnimationComplete = function(rejected) {
              if (!resolved) {
                resolved = true;
                (endProgressCb || noop)(rejected);
                runner.complete(!rejected);
              }
            };

            runner = new $$AnimateRunner({
              end: function() {
                onAnimationComplete();
              },
              cancel: function() {
                onAnimationComplete(true);
              }
            });

            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
              var cancelled = result === false;
              onAnimationComplete(cancelled);
            });

            return runner;
          });
        });

        return operations;
      }

      function packageAnimations(element, event, options, animations, fnName) {
        var operations = groupEventedAnimations(element, event, options, animations, fnName);
        if (operations.length === 0) {
          var a,b;
          if (fnName === 'beforeSetClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
          } else if (fnName === 'setClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
          }

          if (a) {
            operations = operations.concat(a);
          }
          if (b) {
            operations = operations.concat(b);
          }
        }

        if (operations.length === 0) return;

        // TODO(matsko): add documentation
        return function startAnimation(callback) {
          var runners = [];
          if (operations.length) {
            forEach(operations, function(animateFn) {
              runners.push(animateFn());
            });
          }

          runners.length ? $$AnimateRunner.all(runners, callback) : callback();

          return function endFn(reject) {
            forEach(runners, function(runner) {
              reject ? runner.cancel() : runner.end();
            });
          };
        };
      }
    };

    function lookupAnimations(classes) {
      classes = isArray(classes) ? classes : classes.split(' ');
      var matches = [], flagMap = {};
      for (var i=0; i < classes.length; i++) {
        var klass = classes[i],
            animationFactory = $animateProvider.$$registeredAnimations[klass];
        if (animationFactory && !flagMap[klass]) {
          matches.push($injector.get(animationFactory));
          flagMap[klass] = true;
        }
      }
      return matches;
    }
  }];
}];

var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateJsDriver');
  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
    return function initDriverFn(animationDetails) {
      if (animationDetails.from && animationDetails.to) {
        var fromAnimation = prepareAnimation(animationDetails.from);
        var toAnimation = prepareAnimation(animationDetails.to);
        if (!fromAnimation && !toAnimation) return;

        return {
          start: function() {
            var animationRunners = [];

            if (fromAnimation) {
              animationRunners.push(fromAnimation.start());
            }

            if (toAnimation) {
              animationRunners.push(toAnimation.start());
            }

            $$AnimateRunner.all(animationRunners, done);

            var runner = new $$AnimateRunner({
              end: endFnFactory(),
              cancel: endFnFactory()
            });

            return runner;

            function endFnFactory() {
              return function() {
                forEach(animationRunners, function(runner) {
                  // at this point we cannot cancel animations for groups just yet. 1.5+
                  runner.end();
                });
              };
            }

            function done(status) {
              runner.complete(status);
            }
          }
        };
      } else {
        return prepareAnimation(animationDetails);
      }
    };

    function prepareAnimation(animationDetails) {
      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
      var element = animationDetails.element;
      var event = animationDetails.event;
      var options = animationDetails.options;
      var classes = animationDetails.classes;
      return $$animateJs(element, event, classes, options);
    }
  }];
}];

var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
  var PRE_DIGEST_STATE = 1;
  var RUNNING_STATE = 2;
  var ONE_SPACE = ' ';

  var rules = this.rules = {
    skip: [],
    cancel: [],
    join: []
  };

  function makeTruthyCssClassMap(classString) {
    if (!classString) {
      return null;
    }

    var keys = classString.split(ONE_SPACE);
    var map = Object.create(null);

    forEach(keys, function(key) {
      map[key] = true;
    });
    return map;
  }

  function hasMatchingClasses(newClassString, currentClassString) {
    if (newClassString && currentClassString) {
      var currentClassMap = makeTruthyCssClassMap(currentClassString);
      return newClassString.split(ONE_SPACE).some(function(className) {
        return currentClassMap[className];
      });
    }
  }

  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
    return rules[ruleType].some(function(fn) {
      return fn(element, currentAnimation, previousAnimation);
    });
  }

  function hasAnimationClasses(animation, and) {
    var a = (animation.addClass || '').length > 0;
    var b = (animation.removeClass || '').length > 0;
    return and ? a && b : a || b;
  }

  rules.join.push(function(element, newAnimation, currentAnimation) {
    // if the new animation is class-based then we can just tack that on
    return !newAnimation.structural && hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // there is no need to animate anything if no classes are being added and
    // there is no structural animation that will be triggered
    return !newAnimation.structural && !hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // why should we trigger a new structural animation if the element will
    // be removed from the DOM anyway?
    return currentAnimation.event == 'leave' && newAnimation.structural;
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // if there is an ongoing current animation then don't even bother running the class-based animation
    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // there can never be two structural animations running at the same time
    return currentAnimation.structural && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // if the previous animation is already running, but the new animation will
    // be triggered, but the new animation is structural
    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // cancel the animation if classes added / removed in both animation cancel each other out,
    // but only if the current animation isn't structural

    if (currentAnimation.structural) return false;

    var nA = newAnimation.addClass;
    var nR = newAnimation.removeClass;
    var cA = currentAnimation.addClass;
    var cR = currentAnimation.removeClass;

    // early detection to save the global CPU shortage :)
    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {
      return false;
    }

    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
  });

  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {

    var activeAnimationsLookup = new $$HashMap();
    var disabledElementsLookup = new $$HashMap();
    var animationsEnabled = null;

    function postDigestTaskFactory() {
      var postDigestCalled = false;
      return function(fn) {
        // we only issue a call to postDigest before
        // it has first passed. This prevents any callbacks
        // from not firing once the animation has completed
        // since it will be out of the digest cycle.
        if (postDigestCalled) {
          fn();
        } else {
          $rootScope.$$postDigest(function() {
            postDigestCalled = true;
            fn();
          });
        }
      };
    }

    // Wait until all directive and route-related templates are downloaded and
    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
    // all of the remote templates being currently downloaded. If there are no
    // templates currently downloading then the watcher will still fire anyway.
    var deregisterWatch = $rootScope.$watch(
      function() { return $templateRequest.totalPendingRequests === 0; },
      function(isEmpty) {
        if (!isEmpty) return;
        deregisterWatch();

        // Now that all templates have been downloaded, $animate will wait until
        // the post digest queue is empty before enabling animations. By having two
        // calls to $postDigest calls we can ensure that the flag is enabled at the
        // very end of the post digest queue. Since all of the animations in $animate
        // use $postDigest, it's important that the code below executes at the end.
        // This basically means that the page is fully downloaded and compiled before
        // any animations are triggered.
        $rootScope.$$postDigest(function() {
          $rootScope.$$postDigest(function() {
            // we check for null directly in the event that the application already called
            // .enabled() with whatever arguments that it provided it with
            if (animationsEnabled === null) {
              animationsEnabled = true;
            }
          });
        });
      }
    );

    var callbackRegistry = Object.create(null);

    // remember that the classNameFilter is set during the provider/config
    // stage therefore we can optimize here and setup a helper function
    var classNameFilter = $animateProvider.classNameFilter();
    var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function normalizeAnimationDetails(element, animation) {
      return mergeAnimationDetails(element, animation, {});
    }

    // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
    var contains = window.Node.prototype.contains || function(arg) {
      // jshint bitwise: false
      return this === arg || !!(this.compareDocumentPosition(arg) & 16);
      // jshint bitwise: true
    };

    function findCallbacks(parent, element, event) {
      var targetNode = getDomNode(element);
      var targetParentNode = getDomNode(parent);

      var matches = [];
      var entries = callbackRegistry[event];
      if (entries) {
        forEach(entries, function(entry) {
          if (contains.call(entry.node, targetNode)) {
            matches.push(entry.callback);
          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
            matches.push(entry.callback);
          }
        });
      }

      return matches;
    }

    function filterFromRegistry(list, matchContainer, matchCallback) {
      var containerNode = extractElementNode(matchContainer);
      return list.filter(function(entry) {
        var isMatch = entry.node === containerNode &&
                        (!matchCallback || entry.callback === matchCallback);
        return !isMatch;
      });
    }

    function cleanupEventListeners(phase, element) {
      if (phase === 'close' && !element[0].parentNode) {
        // If the element is not attached to a parentNode, it has been removed by
        // the domOperation, and we can safely remove the event callbacks
        $animate.off(element);
      }
    }

    var $animate = {
      on: function(event, container, callback) {
        var node = extractElementNode(container);
        callbackRegistry[event] = callbackRegistry[event] || [];
        callbackRegistry[event].push({
          node: node,
          callback: callback
        });

        // Remove the callback when the element is removed from the DOM
        jqLite(container).on('$destroy', function() {
          var animationDetails = activeAnimationsLookup.get(node);

          if (!animationDetails) {
            // If there's an animation ongoing, the callback calling code will remove
            // the event listeners. If we'd remove here, the callbacks would be removed
            // before the animation ends
            $animate.off(event, container, callback);
          }
        });
      },

      off: function(event, container, callback) {
        if (arguments.length === 1 && !isString(arguments[0])) {
          container = arguments[0];
          for (var eventType in callbackRegistry) {
            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
          }

          return;
        }

        var entries = callbackRegistry[event];
        if (!entries) return;

        callbackRegistry[event] = arguments.length === 1
            ? null
            : filterFromRegistry(entries, container, callback);
      },

      pin: function(element, parentElement) {
        assertArg(isElement(element), 'element', 'not an element');
        assertArg(isElement(parentElement), 'parentElement', 'not an element');
        element.data(NG_ANIMATE_PIN_DATA, parentElement);
      },

      push: function(element, event, options, domOperation) {
        options = options || {};
        options.domOperation = domOperation;
        return queueAnimation(element, event, options);
      },

      // this method has four signatures:
      //  () - global getter
      //  (bool) - global setter
      //  (element) - element getter
      //  (element, bool) - element setter<F37>
      enabled: function(element, bool) {
        var argCount = arguments.length;

        if (argCount === 0) {
          // () - Global getter
          bool = !!animationsEnabled;
        } else {
          var hasElement = isElement(element);

          if (!hasElement) {
            // (bool) - Global setter
            bool = animationsEnabled = !!element;
          } else {
            var node = getDomNode(element);

            if (argCount === 1) {
              // (element) - Element getter
              bool = !disabledElementsLookup.get(node);
            } else {
              // (element, bool) - Element setter
              disabledElementsLookup.put(node, !bool);
            }
          }
        }

        return bool;
      }
    };

    return $animate;

    function queueAnimation(element, event, initialOptions) {
      // we always make a copy of the options since
      // there should never be any side effects on
      // the input data when running `$animateCss`.
      var options = copy(initialOptions);

      var node, parent;
      element = stripCommentsFromElement(element);
      if (element) {
        node = getDomNode(element);
        parent = element.parent();
      }

      options = prepareAnimationOptions(options);

      // we create a fake runner with a working promise.
      // These methods will become available after the digest has passed
      var runner = new $$AnimateRunner();

      // this is used to trigger callbacks in postDigest mode
      var runInNextPostDigestOrNow = postDigestTaskFactory();

      if (isArray(options.addClass)) {
        options.addClass = options.addClass.join(' ');
      }

      if (options.addClass && !isString(options.addClass)) {
        options.addClass = null;
      }

      if (isArray(options.removeClass)) {
        options.removeClass = options.removeClass.join(' ');
      }

      if (options.removeClass && !isString(options.removeClass)) {
        options.removeClass = null;
      }

      if (options.from && !isObject(options.from)) {
        options.from = null;
      }

      if (options.to && !isObject(options.to)) {
        options.to = null;
      }

      // there are situations where a directive issues an animation for
      // a jqLite wrapper that contains only comment nodes... If this
      // happens then there is no way we can perform an animation
      if (!node) {
        close();
        return runner;
      }

      var className = [node.className, options.addClass, options.removeClass].join(' ');
      if (!isAnimatableClassName(className)) {
        close();
        return runner;
      }

      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      var documentHidden = $document[0].hidden;

      // this is a hard disable of all animations for the application or on
      // the element itself, therefore  there is no need to continue further
      // past this point if not enabled
      // Animations are also disabled if the document is currently hidden (page is not visible
      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
      var skipAnimations = !animationsEnabled || documentHidden || disabledElementsLookup.get(node);
      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
      var hasExistingAnimation = !!existingAnimation.state;

      // there is no point in traversing the same collection of parent ancestors if a followup
      // animation will be run on the same element that already did all that checking work
      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
        skipAnimations = !areAnimationsAllowed(element, parent, event);
      }

      if (skipAnimations) {
        // Callbacks should fire even if the document is hidden (regression fix for issue #14120)
        if (documentHidden) notifyProgress(runner, event, 'start');
        close();
        if (documentHidden) notifyProgress(runner, event, 'close');
        return runner;
      }

      if (isStructural) {
        closeChildAnimations(element);
      }

      var newAnimation = {
        structural: isStructural,
        element: element,
        event: event,
        addClass: options.addClass,
        removeClass: options.removeClass,
        close: close,
        options: options,
        runner: runner
      };

      if (hasExistingAnimation) {
        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
        if (skipAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            close();
            return runner;
          } else {
            mergeAnimationDetails(element, existingAnimation, newAnimation);
            return existingAnimation.runner;
          }
        }
        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
        if (cancelAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            // this will end the animation right away and it is safe
            // to do so since the animation is already running and the
            // runner callback code will run in async
            existingAnimation.runner.end();
          } else if (existingAnimation.structural) {
            // this means that the animation is queued into a digest, but
            // hasn't started yet. Therefore it is safe to run the close
            // method which will call the runner methods in async.
            existingAnimation.close();
          } else {
            // this will merge the new animation options into existing animation options
            mergeAnimationDetails(element, existingAnimation, newAnimation);

            return existingAnimation.runner;
          }
        } else {
          // a joined animation means that this animation will take over the existing one
          // so an example would involve a leave animation taking over an enter. Then when
          // the postDigest kicks in the enter will be ignored.
          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
          if (joinAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              normalizeAnimationDetails(element, newAnimation);
            } else {
              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

              event = newAnimation.event = existingAnimation.event;
              options = mergeAnimationDetails(element, existingAnimation, newAnimation);

              //we return the same runner since only the option values of this animation will
              //be fed into the `existingAnimation`.
              return existingAnimation.runner;
            }
          }
        }
      } else {
        // normalization in this case means that it removes redundant CSS classes that
        // already exist (addClass) or do not exist (removeClass) on the element
        normalizeAnimationDetails(element, newAnimation);
      }

      // when the options are merged and cleaned up we may end up not having to do
      // an animation at all, therefore we should check this before issuing a post
      // digest callback. Structural animations will always run no matter what.
      var isValidAnimation = newAnimation.structural;
      if (!isValidAnimation) {
        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
                            || hasAnimationClasses(newAnimation);
      }

      if (!isValidAnimation) {
        close();
        clearElementAnimationState(element);
        return runner;
      }

      // the counter keeps track of cancelled animations
      var counter = (existingAnimation.counter || 0) + 1;
      newAnimation.counter = counter;

      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

      $rootScope.$$postDigest(function() {
        var animationDetails = activeAnimationsLookup.get(node);
        var animationCancelled = !animationDetails;
        animationDetails = animationDetails || {};

        // if addClass/removeClass is called before something like enter then the
        // registered parent element may not be present. The code below will ensure
        // that a final value for parent element is obtained
        var parentElement = element.parent() || [];

        // animate/structural/class-based animations all have requirements. Otherwise there
        // is no point in performing an animation. The parent node must also be set.
        var isValidAnimation = parentElement.length > 0
                                && (animationDetails.event === 'animate'
                                    || animationDetails.structural
                                    || hasAnimationClasses(animationDetails));

        // this means that the previous animation was cancelled
        // even if the follow-up animation is the same event
        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
          // if another animation did not take over then we need
          // to make sure that the domOperation and options are
          // handled accordingly
          if (animationCancelled) {
            applyAnimationClasses(element, options);
            applyAnimationStyles(element, options);
          }

          // if the event changed from something like enter to leave then we do
          // it, otherwise if it's the same then the end result will be the same too
          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
            options.domOperation();
            runner.end();
          }

          // in the event that the element animation was not cancelled or a follow-up animation
          // isn't allowed to animate from here then we need to clear the state of the element
          // so that any future animations won't read the expired animation data.
          if (!isValidAnimation) {
            clearElementAnimationState(element);
          }

          return;
        }

        // this combined multiple class to addClass / removeClass into a setClass event
        // so long as a structural event did not take over the animation
        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)
            ? 'setClass'
            : animationDetails.event;

        markElementAnimationState(element, RUNNING_STATE);
        var realRunner = $$animation(element, event, animationDetails.options);

        // this will update the runner's flow-control events based on
        // the `realRunner` object.
        runner.setHost(realRunner);
        notifyProgress(runner, event, 'start', {});

        realRunner.done(function(status) {
          close(!status);
          var animationDetails = activeAnimationsLookup.get(node);
          if (animationDetails && animationDetails.counter === counter) {
            clearElementAnimationState(getDomNode(element));
          }
          notifyProgress(runner, event, 'close', {});
        });
      });

      return runner;

      function notifyProgress(runner, event, phase, data) {
        runInNextPostDigestOrNow(function() {
          var callbacks = findCallbacks(parent, element, event);
          if (callbacks.length) {
            // do not optimize this call here to RAF because
            // we don't know how heavy the callback code here will
            // be and if this code is buffered then this can
            // lead to a performance regression.
            $$rAF(function() {
              forEach(callbacks, function(callback) {
                callback(element, phase, data);
              });
              cleanupEventListeners(phase, element);
            });
          } else {
            cleanupEventListeners(phase, element);
          }
        });
        runner.progress(event, phase, data);
      }

      function close(reject) { // jshint ignore:line
        clearGeneratedClasses(element, options);
        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();
        runner.complete(!reject);
      }
    }

    function closeChildAnimations(element) {
      var node = getDomNode(element);
      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
      forEach(children, function(child) {
        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
        var animationDetails = activeAnimationsLookup.get(child);
        if (animationDetails) {
          switch (state) {
            case RUNNING_STATE:
              animationDetails.runner.end();
              /* falls through */
            case PRE_DIGEST_STATE:
              activeAnimationsLookup.remove(child);
              break;
          }
        }
      });
    }

    function clearElementAnimationState(element) {
      var node = getDomNode(element);
      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
      activeAnimationsLookup.remove(node);
    }

    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
    }

    /**
     * This fn returns false if any of the following is true:
     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
     * b) a parent element has an ongoing structural animation, and animateChildren is false
     * c) the element is not a child of the body
     * d) the element is not a child of the $rootElement
     */
    function areAnimationsAllowed(element, parentElement, event) {
      var bodyElement = jqLite($document[0].body);
      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
      var rootElementDetected = isMatchingElement(element, $rootElement);
      var parentAnimationDetected = false;
      var animateChildren;
      var elementDisabled = disabledElementsLookup.get(getDomNode(element));

      var parentHost = jqLite.data(element[0], NG_ANIMATE_PIN_DATA);
      if (parentHost) {
        parentElement = parentHost;
      }

      parentElement = getDomNode(parentElement);

      while (parentElement) {
        if (!rootElementDetected) {
          // angular doesn't want to attempt to animate elements outside of the application
          // therefore we need to ensure that the rootElement is an ancestor of the current element
          rootElementDetected = isMatchingElement(parentElement, $rootElement);
        }

        if (parentElement.nodeType !== ELEMENT_NODE) {
          // no point in inspecting the #document element
          break;
        }

        var details = activeAnimationsLookup.get(parentElement) || {};
        // either an enter, leave or move animation will commence
        // therefore we can't allow any animations to take place
        // but if a parent animation is class-based then that's ok
        if (!parentAnimationDetected) {
          var parentElementDisabled = disabledElementsLookup.get(parentElement);

          if (parentElementDisabled === true && elementDisabled !== false) {
            // disable animations if the user hasn't explicitly enabled animations on the
            // current element
            elementDisabled = true;
            // element is disabled via parent element, no need to check anything else
            break;
          } else if (parentElementDisabled === false) {
            elementDisabled = false;
          }
          parentAnimationDetected = details.structural;
        }

        if (isUndefined(animateChildren) || animateChildren === true) {
          var value = jqLite.data(parentElement, NG_ANIMATE_CHILDREN_DATA);
          if (isDefined(value)) {
            animateChildren = value;
          }
        }

        // there is no need to continue traversing at this point
        if (parentAnimationDetected && animateChildren === false) break;

        if (!bodyElementDetected) {
          // we also need to ensure that the element is or will be a part of the body element
          // otherwise it is pointless to even issue an animation to be rendered
          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
        }

        if (bodyElementDetected && rootElementDetected) {
          // If both body and root have been found, any other checks are pointless,
          // as no animation data should live outside the application
          break;
        }

        if (!rootElementDetected) {
          // If no rootElement is detected, check if the parentElement is pinned to another element
          parentHost = jqLite.data(parentElement, NG_ANIMATE_PIN_DATA);
          if (parentHost) {
            // The pin target element becomes the next parent element
            parentElement = getDomNode(parentHost);
            continue;
          }
        }

        parentElement = parentElement.parentNode;
      }

      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
      return allowAnimation && rootElementDetected && bodyElementDetected;
    }

    function markElementAnimationState(element, state, details) {
      details = details || {};
      details.state = state;

      var node = getDomNode(element);
      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

      var oldValue = activeAnimationsLookup.get(node);
      var newValue = oldValue
          ? extend(oldValue, details)
          : details;
      activeAnimationsLookup.put(node, newValue);
    }
  }];
}];

var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

  var drivers = this.drivers = [];

  var RUNNER_STORAGE_KEY = '$$animationRunner';

  function setRunner(element, runner) {
    element.data(RUNNER_STORAGE_KEY, runner);
  }

  function removeRunner(element) {
    element.removeData(RUNNER_STORAGE_KEY);
  }

  function getRunner(element) {
    return element.data(RUNNER_STORAGE_KEY);
  }

  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {

    var animationQueue = [];
    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function sortAnimations(animations) {
      var tree = { children: [] };
      var i, lookup = new $$HashMap();

      // this is done first beforehand so that the hashmap
      // is filled with a list of the elements that will be animated
      for (i = 0; i < animations.length; i++) {
        var animation = animations[i];
        lookup.put(animation.domNode, animations[i] = {
          domNode: animation.domNode,
          fn: animation.fn,
          children: []
        });
      }

      for (i = 0; i < animations.length; i++) {
        processNode(animations[i]);
      }

      return flatten(tree);

      function processNode(entry) {
        if (entry.processed) return entry;
        entry.processed = true;

        var elementNode = entry.domNode;
        var parentNode = elementNode.parentNode;
        lookup.put(elementNode, entry);

        var parentEntry;
        while (parentNode) {
          parentEntry = lookup.get(parentNode);
          if (parentEntry) {
            if (!parentEntry.processed) {
              parentEntry = processNode(parentEntry);
            }
            break;
          }
          parentNode = parentNode.parentNode;
        }

        (parentEntry || tree).children.push(entry);
        return entry;
      }

      function flatten(tree) {
        var result = [];
        var queue = [];
        var i;

        for (i = 0; i < tree.children.length; i++) {
          queue.push(tree.children[i]);
        }

        var remainingLevelEntries = queue.length;
        var nextLevelEntries = 0;
        var row = [];

        for (i = 0; i < queue.length; i++) {
          var entry = queue[i];
          if (remainingLevelEntries <= 0) {
            remainingLevelEntries = nextLevelEntries;
            nextLevelEntries = 0;
            result.push(row);
            row = [];
          }
          row.push(entry.fn);
          entry.children.forEach(function(childEntry) {
            nextLevelEntries++;
            queue.push(childEntry);
          });
          remainingLevelEntries--;
        }

        if (row.length) {
          result.push(row);
        }

        return result;
      }
    }

    // TODO(matsko): document the signature in a better way
    return function(element, event, options) {
      options = prepareAnimationOptions(options);
      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // there is no animation at the current moment, however
      // these runner methods will get later updated with the
      // methods leading into the driver's end/cancel methods
      // for now they just stop the animation from starting
      var runner = new $$AnimateRunner({
        end: function() { close(); },
        cancel: function() { close(true); }
      });

      if (!drivers.length) {
        close();
        return runner;
      }

      setRunner(element, runner);

      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
      var tempClasses = options.tempClasses;
      if (tempClasses) {
        classes += ' ' + tempClasses;
        options.tempClasses = null;
      }

      var prepareClassName;
      if (isStructural) {
        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;
        $$jqLite.addClass(element, prepareClassName);
      }

      animationQueue.push({
        // this data is used by the postDigest code and passed into
        // the driver step function
        element: element,
        classes: classes,
        event: event,
        structural: isStructural,
        options: options,
        beforeStart: beforeStart,
        close: close
      });

      element.on('$destroy', handleDestroyedElement);

      // we only want there to be one function called within the post digest
      // block. This way we can group animations for all the animations that
      // were apart of the same postDigest flush call.
      if (animationQueue.length > 1) return runner;

      $rootScope.$$postDigest(function() {
        var animations = [];
        forEach(animationQueue, function(entry) {
          // the element was destroyed early on which removed the runner
          // form its storage. This means we can't animate this element
          // at all and it already has been closed due to destruction.
          if (getRunner(entry.element)) {
            animations.push(entry);
          } else {
            entry.close();
          }
        });

        // now any future animations will be in another postDigest
        animationQueue.length = 0;

        var groupedAnimations = groupAnimations(animations);
        var toBeSortedAnimations = [];

        forEach(groupedAnimations, function(animationEntry) {
          toBeSortedAnimations.push({
            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
            fn: function triggerAnimationStart() {
              // it's important that we apply the `ng-animate` CSS class and the
              // temporary classes before we do any driver invoking since these
              // CSS classes may be required for proper CSS detection.
              animationEntry.beforeStart();

              var startAnimationFn, closeFn = animationEntry.close;

              // in the event that the element was removed before the digest runs or
              // during the RAF sequencing then we should not trigger the animation.
              var targetElement = animationEntry.anchors
                  ? (animationEntry.from.element || animationEntry.to.element)
                  : animationEntry.element;

              if (getRunner(targetElement)) {
                var operation = invokeFirstDriver(animationEntry);
                if (operation) {
                  startAnimationFn = operation.start;
                }
              }

              if (!startAnimationFn) {
                closeFn();
              } else {
                var animationRunner = startAnimationFn();
                animationRunner.done(function(status) {
                  closeFn(!status);
                });
                updateAnimationRunners(animationEntry, animationRunner);
              }
            }
          });
        });

        // we need to sort each of the animations in order of parent to child
        // relationships. This ensures that the child classes are applied at the
        // right time.
        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
      });

      return runner;

      // TODO(matsko): change to reference nodes
      function getAnchorNodes(node) {
        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
              ? [node]
              : node.querySelectorAll(SELECTOR);
        var anchors = [];
        forEach(items, function(node) {
          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
          if (attr && attr.length) {
            anchors.push(node);
          }
        });
        return anchors;
      }

      function groupAnimations(animations) {
        var preparedAnimations = [];
        var refLookup = {};
        forEach(animations, function(animation, index) {
          var element = animation.element;
          var node = getDomNode(element);
          var event = animation.event;
          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

          if (anchorNodes.length) {
            var direction = enterOrMove ? 'to' : 'from';

            forEach(anchorNodes, function(anchor) {
              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
              refLookup[key] = refLookup[key] || {};
              refLookup[key][direction] = {
                animationID: index,
                element: jqLite(anchor)
              };
            });
          } else {
            preparedAnimations.push(animation);
          }
        });

        var usedIndicesLookup = {};
        var anchorGroups = {};
        forEach(refLookup, function(operations, key) {
          var from = operations.from;
          var to = operations.to;

          if (!from || !to) {
            // only one of these is set therefore we can't have an
            // anchor animation since all three pieces are required
            var index = from ? from.animationID : to.animationID;
            var indexKey = index.toString();
            if (!usedIndicesLookup[indexKey]) {
              usedIndicesLookup[indexKey] = true;
              preparedAnimations.push(animations[index]);
            }
            return;
          }

          var fromAnimation = animations[from.animationID];
          var toAnimation = animations[to.animationID];
          var lookupKey = from.animationID.toString();
          if (!anchorGroups[lookupKey]) {
            var group = anchorGroups[lookupKey] = {
              structural: true,
              beforeStart: function() {
                fromAnimation.beforeStart();
                toAnimation.beforeStart();
              },
              close: function() {
                fromAnimation.close();
                toAnimation.close();
              },
              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
              from: fromAnimation,
              to: toAnimation,
              anchors: [] // TODO(matsko): change to reference nodes
            };

            // the anchor animations require that the from and to elements both have at least
            // one shared CSS class which effectively marries the two elements together to use
            // the same animation driver and to properly sequence the anchor animation.
            if (group.classes.length) {
              preparedAnimations.push(group);
            } else {
              preparedAnimations.push(fromAnimation);
              preparedAnimations.push(toAnimation);
            }
          }

          anchorGroups[lookupKey].anchors.push({
            'out': from.element, 'in': to.element
          });
        });

        return preparedAnimations;
      }

      function cssClassesIntersection(a,b) {
        a = a.split(' ');
        b = b.split(' ');
        var matches = [];

        for (var i = 0; i < a.length; i++) {
          var aa = a[i];
          if (aa.substring(0,3) === 'ng-') continue;

          for (var j = 0; j < b.length; j++) {
            if (aa === b[j]) {
              matches.push(aa);
              break;
            }
          }
        }

        return matches.join(' ');
      }

      function invokeFirstDriver(animationDetails) {
        // we loop in reverse order since the more general drivers (like CSS and JS)
        // may attempt more elements, but custom drivers are more particular
        for (var i = drivers.length - 1; i >= 0; i--) {
          var driverName = drivers[i];
          var factory = $injector.get(driverName);
          var driver = factory(animationDetails);
          if (driver) {
            return driver;
          }
        }
      }

      function beforeStart() {
        element.addClass(NG_ANIMATE_CLASSNAME);
        if (tempClasses) {
          $$jqLite.addClass(element, tempClasses);
        }
        if (prepareClassName) {
          $$jqLite.removeClass(element, prepareClassName);
          prepareClassName = null;
        }
      }

      function updateAnimationRunners(animation, newRunner) {
        if (animation.from && animation.to) {
          update(animation.from.element);
          update(animation.to.element);
        } else {
          update(animation.element);
        }

        function update(element) {
          var runner = getRunner(element);
          if (runner) runner.setHost(newRunner);
        }
      }

      function handleDestroyedElement() {
        var runner = getRunner(element);
        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
          runner.end();
        }
      }

      function close(rejected) { // jshint ignore:line
        element.off('$destroy', handleDestroyedElement);
        removeRunner(element);

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();

        if (tempClasses) {
          $$jqLite.removeClass(element, tempClasses);
        }

        element.removeClass(NG_ANIMATE_CLASSNAME);
        runner.complete(!rejected);
      }
    };
  }];
}];

/**
 * @ngdoc directive
 * @name ngAnimateSwap
 * @restrict A
 * @scope
 *
 * @description
 *
 * ngAnimateSwap is a animation-oriented directive that allows for the container to
 * be removed and entered in whenever the associated expression changes. A
 * common usecase for this directive is a rotating banner or slider component which
 * contains one image being present at a time. When the active image changes
 * then the old image will perform a `leave` animation and the new element
 * will be inserted via an `enter` animation.
 *
 * @animations
 * | Animation                        | Occurs                               |
 * |----------------------------------|--------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |
 * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |
 *
 * @example
 * <example name="ngAnimateSwap-directive" module="ngAnimateSwapExample"
 *          deps="angular-animate.js"
 *          animations="true" fixBase="true">
 *   <file name="index.html">
 *     <div class="container" ng-controller="AppCtrl">
 *       <div ng-animate-swap="number" class="cell swap-animation" ng-class="colorClass(number)">
 *         {{ number }}
 *       </div>
 *     </div>
 *   </file>
 *   <file name="script.js">
 *     angular.module('ngAnimateSwapExample', ['ngAnimate'])
 *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {
 *         $scope.number = 0;
 *         $interval(function() {
 *           $scope.number++;
 *         }, 1000);
 *
 *         var colors = ['red','blue','green','yellow','orange'];
 *         $scope.colorClass = function(number) {
 *           return colors[number % colors.length];
 *         };
 *       }]);
 *   </file>
 *  <file name="animations.css">
 *  .container {
 *    height:250px;
 *    width:250px;
 *    position:relative;
 *    overflow:hidden;
 *    border:2px solid black;
 *  }
 *  .container .cell {
 *    font-size:150px;
 *    text-align:center;
 *    line-height:250px;
 *    position:absolute;
 *    top:0;
 *    left:0;
 *    right:0;
 *    border-bottom:2px solid black;
 *  }
 *  .swap-animation.ng-enter, .swap-animation.ng-leave {
 *    transition:0.5s linear all;
 *  }
 *  .swap-animation.ng-enter {
 *    top:-250px;
 *  }
 *  .swap-animation.ng-enter-active {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave-active {
 *    top:250px;
 *  }
 *  .red { background:red; }
 *  .green { background:green; }
 *  .blue { background:blue; }
 *  .yellow { background:yellow; }
 *  .orange { background:orange; }
 *  </file>
 * </example>
 */
var ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {
  return {
    restrict: 'A',
    transclude: 'element',
    terminal: true,
    priority: 600, // we use 600 here to ensure that the directive is caught before others
    link: function(scope, $element, attrs, ctrl, $transclude) {
      var previousElement, previousScope;
      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {
        if (previousElement) {
          $animate.leave(previousElement);
        }
        if (previousScope) {
          previousScope.$destroy();
          previousScope = null;
        }
        if (value || value === 0) {
          previousScope = scope.$new();
          $transclude(previousScope, function(element) {
            previousElement = element;
            $animate.enter(element, null, $element);
          });
        }
      });
    }
  };
}];

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
 * the HTML element that the animation will be triggered on.
 *
 * ## Directive Support
 * The following directives are "animation aware":
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * (More information can be found by visiting each the documentation associated with each directive.)
 *
 * ## CSS-based Animations
 *
 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
 *
 * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
 *
 * ```html
 * <div ng-if="bool" class="fade">
 *    Fade me in out
 * </div>
 * <button ng-click="bool=true">Fade In!</button>
 * <button ng-click="bool=false">Fade Out!</button>
 * ```
 *
 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
 *
 * ```css
 * /&#42; The starting CSS styles for the enter animation &#42;/
 * .fade.ng-enter {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 *
 * /&#42; The finishing CSS styles for the enter animation &#42;/
 * .fade.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * ```
 *
 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
 *
 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
 *
 * ```css
 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
 * .fade.ng-leave {
 *   transition:0.5s linear all;
 *   opacity:1;
 * }
 * .fade.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
 *
 * ```css
 * /&#42; there is no need to define anything inside of the destination
 * CSS class since the keyframe will take charge of the animation &#42;/
 * .fade.ng-leave {
 *   animation: my_fade_animation 0.5s linear;
 *   -webkit-animation: my_fade_animation 0.5s linear;
 * }
 *
 * @keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 *
 * @-webkit-keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 * ```
 *
 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
 *
 * ### CSS Class-based Animations
 *
 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
 * and removed.
 *
 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
 *
 * ```html
 * <div ng-show="bool" class="fade">
 *   Show and hide me
 * </div>
 * <button ng-click="bool=!bool">Toggle</button>
 *
 * <style>
 * .fade.ng-hide {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 * </style>
 * ```
 *
 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
 *
 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
 * with CSS styles.
 *
 * ```html
 * <div ng-class="{on:onOff}" class="highlight">
 *   Highlight this box
 * </div>
 * <button ng-click="onOff=!onOff">Toggle</button>
 *
 * <style>
 * .highlight {
 *   transition:0.5s linear all;
 * }
 * .highlight.on-add {
 *   background:white;
 * }
 * .highlight.on {
 *   background:yellow;
 * }
 * .highlight.on-remove {
 *   background:black;
 * }
 * </style>
 * ```
 *
 * We can also make use of CSS keyframes by placing them within the CSS classes.
 *
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   transition-delay: 0.1s;
 *
 *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
 *     to not accidentally inherit a delay property from another CSS class &#42;/
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * window.requestAnimationFrame(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 *
 *   $scope.$digest();
 * });
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ### The `ng-animate` CSS class
 *
 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
 *
 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
 *
 * ```css
 * .zipper.ng-animate {
 *   transition:0.5s linear all;
 * }
 * .zipper.ng-enter {
 *   opacity:0;
 * }
 * .zipper.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * .zipper.ng-leave {
 *   opacity:1;
 * }
 * .zipper.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
 * the CSS class once an animation has completed.)
 *
 *
 * ### The `ng-[event]-prepare` class
 *
 * This is a special class that can be used to prevent unwanted flickering / flash of content before
 * the actual animation starts. The class is added as soon as an animation is initialized, but removed
 * before the actual animation starts (after waiting for a $digest).
 * It is also only added for *structural* animations (`enter`, `move`, and `leave`).
 *
 * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`
 * into elements that have class-based animations such as `ngClass`.
 *
 * ```html
 * <div ng-class="{red: myProp}">
 *   <div ng-class="{blue: myProp}">
 *     <div class="message" ng-if="myProp"></div>
 *   </div>
 * </div>
 * ```
 *
 * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.
 * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:
 *
 * ```css
 * .message.ng-enter-prepare {
 *   opacity: 0;
 * }
 *
 * ```
 *
 * ## JavaScript-based Animations
 *
 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
 * `module.animation()` module function we can register the animation.
 *
 * Let's see an example of a enter/leave animation using `ngRepeat`:
 *
 * ```html
 * <div ng-repeat="item in items" class="slide">
 *   {{ item }}
 * </div>
 * ```
 *
 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     // make note that other events (like addClass/removeClass)
 *     // have different function input parameters
 *     enter: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *
 *       // remember to call doneFn so that angular
 *       // knows that the animation has concluded
 *     },
 *
 *     move: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *     },
 *
 *     leave: function(element, doneFn) {
 *       jQuery(element).fadeOut(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
 * greensock.js and velocity.js.
 *
 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
 *
 * ```html
 * <div ng-class="color" class="colorful">
 *   this box is moody
 * </div>
 * <button ng-click="color='red'">Change to red</button>
 * <button ng-click="color='blue'">Change to blue</button>
 * <button ng-click="color='green'">Change to green</button>
 * ```
 *
 * ```js
 * myModule.animation('.colorful', [function() {
 *   return {
 *     addClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     removeClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     setClass: function(element, addedClass, removedClass, doneFn) {
 *       // do some cool animation and call the doneFn
 *     }
 *   }
 * }]);
 * ```
 *
 * ## CSS + JS Animations Together
 *
 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
 * charge of the animation**:
 *
 * ```html
 * <div ng-if="bool" class="slide">
 *   Slide in and out
 * </div>
 * ```
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     enter: function(element, doneFn) {
 *       jQuery(element).slideIn(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * ```css
 * .slide.ng-enter {
 *   transition:0.5s linear all;
 *   transform:translateY(-100px);
 * }
 * .slide.ng-enter.ng-enter-active {
 *   transform:translateY(0);
 * }
 * ```
 *
 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
 * our own JS-based animation code:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
 *
 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
 * data into `$animateCss` directly:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true,
 *         addClass: 'maroon-setting',
 *         from: { height:0 },
 *         to: { height: 200 }
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Now we can fill in the rest via our transition CSS code:
 *
 * ```css
 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
 * .slide.ng-enter { transition:0.5s linear all; }
 *
 * /&#42; this extra CSS class will be absorbed into the transition
 * since the $animateCss code is adding the class &#42;/
 * .maroon-setting { background:red; }
 * ```
 *
 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
 *
 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
 *
 * ## Animation Anchoring (via `ng-animate-ref`)
 *
 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
 * structural areas of an application (like views) by pairing up elements using an attribute
 * called `ng-animate-ref`.
 *
 * Let's say for example we have two views that are managed by `ng-view` and we want to show
 * that there is a relationship between two components situated in within these views. By using the
 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
 * can then attach an animation, which is triggered when the view changes.
 *
 * Say for example we have the following template code:
 *
 * ```html
 * <!-- index.html -->
 * <div ng-view class="view-animation">
 * </div>
 *
 * <!-- home.html -->
 * <a href="#/banner-page">
 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * </a>
 *
 * <!-- banner-page.html -->
 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * ```
 *
 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
 * HTML contents to see if there is a match reference between any components in the view
 * that is leaving and the view that is entering. It will scan both the view which is being
 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
 * contain a matching ref value.
 *
 * The two images match since they share the same ref value. ngAnimate will now create a
 * transport element (which is a clone of the first image element) and it will then attempt
 * to animate to the position of the second image element in the next view. For the animation to
 * work a special CSS class called `ng-anchor` will be added to the transported element.
 *
 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
 * ngAnimate will handle the entire transition for us as well as the addition and removal of
 * any changes of CSS classes between the elements:
 *
 * ```css
 * .banner.ng-anchor {
 *   /&#42; this animation will last for 1 second since there are
 *          two phases to the animation (an `in` and an `out` phase) &#42;/
 *   transition:0.5s linear all;
 * }
 * ```
 *
 * We also **must** include animations for the views that are being entered and removed
 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
 *
 * ```css
 * .view-animation.ng-enter, .view-animation.ng-leave {
 *   transition:0.5s linear all;
 *   position:fixed;
 *   left:0;
 *   top:0;
 *   width:100%;
 * }
 * .view-animation.ng-enter {
 *   transform:translateX(100%);
 * }
 * .view-animation.ng-leave,
 * .view-animation.ng-enter.ng-enter-active {
 *   transform:translateX(0%);
 * }
 * .view-animation.ng-leave.ng-leave-active {
 *   transform:translateX(-100%);
 * }
 * ```
 *
 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
 * from its origin. Once that animation is over then the `in` stage occurs which animates the
 * element to its destination. The reason why there are two animations is to give enough time
 * for the enter animation on the new element to be ready.
 *
 * The example above sets up a transition for both the in and out phases, but we can also target the out or
 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
 *
 * ```css
 * .banner.ng-anchor-out {
 *   transition: 0.5s linear all;
 *
 *   /&#42; the scale will be applied during the out animation,
 *          but will be animated away when the in animation runs &#42;/
 *   transform: scale(1.2);
 * }
 *
 * .banner.ng-anchor-in {
 *   transition: 1s linear all;
 * }
 * ```
 *
 *
 *
 *
 * ### Anchoring Demo
 *
  <example module="anchoringExample"
           name="anchoringExample"
           id="anchoringExample"
           deps="angular-animate.js;angular-route.js"
           animations="true">
    <file name="index.html">
      <a href="#/">Home</a>
      <hr />
      <div class="view-container">
        <div ng-view class="view"></div>
      </div>
    </file>
    <file name="script.js">
      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
        .config(['$routeProvider', function($routeProvider) {
          $routeProvider.when('/', {
            templateUrl: 'home.html',
            controller: 'HomeController as home'
          });
          $routeProvider.when('/profile/:id', {
            templateUrl: 'profile.html',
            controller: 'ProfileController as profile'
          });
        }])
        .run(['$rootScope', function($rootScope) {
          $rootScope.records = [
            { id:1, title: "Miss Beulah Roob" },
            { id:2, title: "Trent Morissette" },
            { id:3, title: "Miss Ava Pouros" },
            { id:4, title: "Rod Pouros" },
            { id:5, title: "Abdul Rice" },
            { id:6, title: "Laurie Rutherford Sr." },
            { id:7, title: "Nakia McLaughlin" },
            { id:8, title: "Jordon Blanda DVM" },
            { id:9, title: "Rhoda Hand" },
            { id:10, title: "Alexandrea Sauer" }
          ];
        }])
        .controller('HomeController', [function() {
          //empty
        }])
        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
          var index = parseInt($routeParams.id, 10);
          var record = $rootScope.records[index - 1];

          this.title = record.title;
          this.id = record.id;
        }]);
    </file>
    <file name="home.html">
      <h2>Welcome to the home page</h1>
      <p>Please click on an element</p>
      <a class="record"
         ng-href="#/profile/{{ record.id }}"
         ng-animate-ref="{{ record.id }}"
         ng-repeat="record in records">
        {{ record.title }}
      </a>
    </file>
    <file name="profile.html">
      <div class="profile record" ng-animate-ref="{{ profile.id }}">
        {{ profile.title }}
      </div>
    </file>
    <file name="animations.css">
      .record {
        display:block;
        font-size:20px;
      }
      .profile {
        background:black;
        color:white;
        font-size:100px;
      }
      .view-container {
        position:relative;
      }
      .view-container > .view.ng-animate {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        min-height:500px;
      }
      .view.ng-enter, .view.ng-leave,
      .record.ng-anchor {
        transition:0.5s linear all;
      }
      .view.ng-enter {
        transform:translateX(100%);
      }
      .view.ng-enter.ng-enter-active, .view.ng-leave {
        transform:translateX(0%);
      }
      .view.ng-leave.ng-leave-active {
        transform:translateX(-100%);
      }
      .record.ng-anchor-out {
        background:red;
      }
    </file>
  </example>
 *
 * ### How is the element transported?
 *
 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
 * will become visible since the shim class will be removed.
 *
 * ### How is the morphing handled?
 *
 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
 * what CSS classes differ between the starting element and the destination element. These different CSS classes
 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
 * the cloned element is placed inside of root element which is likely close to the body element).
 *
 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
 *
 *
 * ## Using $animate in your directive code
 *
 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
 * imagine we have a greeting box that shows and hides itself when the data changes
 *
 * ```html
 * <greeting-box active="onOrOff">Hi there</greeting-box>
 * ```
 *
 * ```js
 * ngModule.directive('greetingBox', ['$animate', function($animate) {
 *   return function(scope, element, attrs) {
 *     attrs.$observe('active', function(value) {
 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
 *     });
 *   });
 * }]);
 * ```
 *
 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
 * in our HTML code then we can trigger a CSS or JS animation to happen.
 *
 * ```css
 * /&#42; normally we would create a CSS class to reference on the element &#42;/
 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
 * ```
 *
 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
 * possible be sure to visit the {@link ng.$animate $animate service API page}.
 *
 *
 * ## Callbacks and Promises
 *
 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
 * ended by chaining onto the returned promise that animation method returns.
 *
 * ```js
 * // somewhere within the depths of the directive
 * $animate.enter(element, parent).then(function() {
 *   //the animation has completed
 * });
 * ```
 *
 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
 * anymore.)
 *
 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
 * routing controller to hook into that:
 *
 * ```js
 * ngModule.controller('HomePageController', ['$animate', function($animate) {
 *   $animate.on('enter', ngViewElement, function(element) {
 *     // the animation for this route has completed
 *   }]);
 * }])
 * ```
 *
 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
 */

var copy;
var extend;
var forEach;
var isArray;
var isDefined;
var isElement;
var isFunction;
var isObject;
var isString;
var isUndefined;
var jqLite;
var noop;

/**
 * @ngdoc service
 * @name $animate
 * @kind object
 *
 * @description
 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
 *
 * Click here {@link ng.$animate to learn more about animations with `$animate`}.
 */
angular.module('ngAnimate', [], function initAngularHelpers() {
  // Access helpers from angular core.
  // Do it inside a `config` block to ensure `window.angular` is available.
  noop        = angular.noop;
  copy        = angular.copy;
  extend      = angular.extend;
  jqLite      = angular.element;
  forEach     = angular.forEach;
  isArray     = angular.isArray;
  isString    = angular.isString;
  isObject    = angular.isObject;
  isUndefined = angular.isUndefined;
  isDefined   = angular.isDefined;
  isFunction  = angular.isFunction;
  isElement   = angular.isElement;
})
  .directive('ngAnimateSwap', ngAnimateSwapDirective)

  .directive('ngAnimateChildren', $$AnimateChildrenDirective)
  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

  .provider('$$animateQueue', $$AnimateQueueProvider)
  .provider('$$animation', $$AnimationProvider)

  .provider('$animateCss', $AnimateCssProvider)
  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

  .provider('$$animateJs', $$AnimateJsProvider)
  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


})(window, window.angular);
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJhbmd1bGFyLWFuaW1hdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS41LjhcclxuICogKGMpIDIwMTAtMjAxNiBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcclxuICogTGljZW5zZTogTUlUXHJcbiAqL1xyXG4oZnVuY3Rpb24od2luZG93LCBhbmd1bGFyKSB7J3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XHJcbnZhciBDT01NRU5UX05PREUgPSA4O1xyXG5cclxudmFyIEFERF9DTEFTU19TVUZGSVggPSAnLWFkZCc7XHJcbnZhciBSRU1PVkVfQ0xBU1NfU1VGRklYID0gJy1yZW1vdmUnO1xyXG52YXIgRVZFTlRfQ0xBU1NfUFJFRklYID0gJ25nLSc7XHJcbnZhciBBQ1RJVkVfQ0xBU1NfU1VGRklYID0gJy1hY3RpdmUnO1xyXG52YXIgUFJFUEFSRV9DTEFTU19TVUZGSVggPSAnLXByZXBhcmUnO1xyXG5cclxudmFyIE5HX0FOSU1BVEVfQ0xBU1NOQU1FID0gJ25nLWFuaW1hdGUnO1xyXG52YXIgTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBID0gJyQkbmdBbmltYXRlQ2hpbGRyZW4nO1xyXG5cclxuLy8gRGV0ZWN0IHByb3BlciB0cmFuc2l0aW9uZW5kL2FuaW1hdGlvbmVuZCBldmVudCBuYW1lcy5cclxudmFyIENTU19QUkVGSVggPSAnJywgVFJBTlNJVElPTl9QUk9QLCBUUkFOU0lUSU9ORU5EX0VWRU5ULCBBTklNQVRJT05fUFJPUCwgQU5JTUFUSU9ORU5EX0VWRU5UO1xyXG5cclxuLy8gSWYgdW5wcmVmaXhlZCBldmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgYnV0IHdlYmtpdC1wcmVmaXhlZCBhcmUsIHVzZSB0aGUgbGF0dGVyLlxyXG4vLyBPdGhlcndpc2UsIGp1c3QgdXNlIFczQyBuYW1lcywgYnJvd3NlcnMgbm90IHN1cHBvcnRpbmcgdGhlbSBhdCBhbGwgd2lsbCBqdXN0IGlnbm9yZSB0aGVtLlxyXG4vLyBOb3RlOiBDaHJvbWUgaW1wbGVtZW50cyBgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kYCBhbmQgZG9lc24ndCBpbXBsZW1lbnQgYHdpbmRvdy5vbmFuaW1hdGlvbmVuZGBcclxuLy8gYnV0IGF0IHRoZSBzYW1lIHRpbWUgZGlzcGF0Y2hlcyB0aGUgYGFuaW1hdGlvbmVuZGAgZXZlbnQgYW5kIG5vdCBgd2Via2l0QW5pbWF0aW9uRW5kYC5cclxuLy8gUmVnaXN0ZXIgYm90aCBldmVudHMgaW4gY2FzZSBgd2luZG93Lm9uYW5pbWF0aW9uZW5kYCBpcyBub3Qgc3VwcG9ydGVkIGJlY2F1c2Ugb2YgdGhhdCxcclxuLy8gZG8gdGhlIHNhbWUgZm9yIGB0cmFuc2l0aW9uZW5kYCBhcyBTYWZhcmkgaXMgbGlrZWx5IHRvIGV4aGliaXQgc2ltaWxhciBiZWhhdmlvci5cclxuLy8gQWxzbywgdGhlIG9ubHkgbW9kZXJuIGJyb3dzZXIgdGhhdCB1c2VzIHZlbmRvciBwcmVmaXhlcyBmb3IgdHJhbnNpdGlvbnMva2V5ZnJhbWVzIGlzIHdlYmtpdFxyXG4vLyB0aGVyZWZvcmUgdGhlcmUgaXMgbm8gcmVhc29uIHRvIHRlc3QgYW55bW9yZSBmb3Igb3RoZXIgdmVuZG9yIHByZWZpeGVzOlxyXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXHJcbmlmICgod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdm9pZCAwKSAmJiAod2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdm9pZCAwKSkge1xyXG4gIENTU19QUkVGSVggPSAnLXdlYmtpdC0nO1xyXG4gIFRSQU5TSVRJT05fUFJPUCA9ICdXZWJraXRUcmFuc2l0aW9uJztcclxuICBUUkFOU0lUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCc7XHJcbn0gZWxzZSB7XHJcbiAgVFJBTlNJVElPTl9QUk9QID0gJ3RyYW5zaXRpb24nO1xyXG4gIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAndHJhbnNpdGlvbmVuZCc7XHJcbn1cclxuXHJcbmlmICgod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB2b2lkIDApICYmICh3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHZvaWQgMCkpIHtcclxuICBDU1NfUFJFRklYID0gJy13ZWJraXQtJztcclxuICBBTklNQVRJT05fUFJPUCA9ICdXZWJraXRBbmltYXRpb24nO1xyXG4gIEFOSU1BVElPTkVORF9FVkVOVCA9ICd3ZWJraXRBbmltYXRpb25FbmQgYW5pbWF0aW9uZW5kJztcclxufSBlbHNlIHtcclxuICBBTklNQVRJT05fUFJPUCA9ICdhbmltYXRpb24nO1xyXG4gIEFOSU1BVElPTkVORF9FVkVOVCA9ICdhbmltYXRpb25lbmQnO1xyXG59XHJcblxyXG52YXIgRFVSQVRJT05fS0VZID0gJ0R1cmF0aW9uJztcclxudmFyIFBST1BFUlRZX0tFWSA9ICdQcm9wZXJ0eSc7XHJcbnZhciBERUxBWV9LRVkgPSAnRGVsYXknO1xyXG52YXIgVElNSU5HX0tFWSA9ICdUaW1pbmdGdW5jdGlvbic7XHJcbnZhciBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWSA9ICdJdGVyYXRpb25Db3VudCc7XHJcbnZhciBBTklNQVRJT05fUExBWVNUQVRFX0tFWSA9ICdQbGF5U3RhdGUnO1xyXG52YXIgU0FGRV9GQVNUX0ZPUldBUkRfRFVSQVRJT05fVkFMVUUgPSA5OTk5O1xyXG5cclxudmFyIEFOSU1BVElPTl9ERUxBWV9QUk9QID0gQU5JTUFUSU9OX1BST1AgKyBERUxBWV9LRVk7XHJcbnZhciBBTklNQVRJT05fRFVSQVRJT05fUFJPUCA9IEFOSU1BVElPTl9QUk9QICsgRFVSQVRJT05fS0VZO1xyXG52YXIgVFJBTlNJVElPTl9ERUxBWV9QUk9QID0gVFJBTlNJVElPTl9QUk9QICsgREVMQVlfS0VZO1xyXG52YXIgVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QID0gVFJBTlNJVElPTl9QUk9QICsgRFVSQVRJT05fS0VZO1xyXG5cclxudmFyIG5nTWluRXJyID0gYW5ndWxhci4kJG1pbkVycignbmcnKTtcclxuZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7XHJcbiAgaWYgKCFhcmcpIHtcclxuICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgXCJBcmd1bWVudCAnezB9JyBpcyB7MX1cIiwgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCBcInJlcXVpcmVkXCIpKTtcclxuICB9XHJcbiAgcmV0dXJuIGFyZztcclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xyXG4gIGlmICghYSAmJiAhYikgcmV0dXJuICcnO1xyXG4gIGlmICghYSkgcmV0dXJuIGI7XHJcbiAgaWYgKCFiKSByZXR1cm4gYTtcclxuICBpZiAoaXNBcnJheShhKSkgYSA9IGEuam9pbignICcpO1xyXG4gIGlmIChpc0FycmF5KGIpKSBiID0gYi5qb2luKCcgJyk7XHJcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYWNrYWdlU3R5bGVzKG9wdGlvbnMpIHtcclxuICB2YXIgc3R5bGVzID0ge307XHJcbiAgaWYgKG9wdGlvbnMgJiYgKG9wdGlvbnMudG8gfHwgb3B0aW9ucy5mcm9tKSkge1xyXG4gICAgc3R5bGVzLnRvID0gb3B0aW9ucy50bztcclxuICAgIHN0eWxlcy5mcm9tID0gb3B0aW9ucy5mcm9tO1xyXG4gIH1cclxuICByZXR1cm4gc3R5bGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwZW5kQ2xhc3NlcyhjbGFzc2VzLCBmaXgsIGlzUHJlZml4KSB7XHJcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xyXG4gIGNsYXNzZXMgPSBpc0FycmF5KGNsYXNzZXMpXHJcbiAgICAgID8gY2xhc3Nlc1xyXG4gICAgICA6IGNsYXNzZXMgJiYgaXNTdHJpbmcoY2xhc3NlcykgJiYgY2xhc3Nlcy5sZW5ndGhcclxuICAgICAgICAgID8gY2xhc3Nlcy5zcGxpdCgvXFxzKy8pXHJcbiAgICAgICAgICA6IFtdO1xyXG4gIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MsIGkpIHtcclxuICAgIGlmIChrbGFzcyAmJiBrbGFzcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNsYXNzTmFtZSArPSAoaSA+IDApID8gJyAnIDogJyc7XHJcbiAgICAgIGNsYXNzTmFtZSArPSBpc1ByZWZpeCA/IGZpeCArIGtsYXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGtsYXNzICsgZml4O1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBjbGFzc05hbWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUZyb21BcnJheShhcnIsIHZhbCkge1xyXG4gIHZhciBpbmRleCA9IGFyci5pbmRleE9mKHZhbCk7XHJcbiAgaWYgKHZhbCA+PSAwKSB7XHJcbiAgICBhcnIuc3BsaWNlKGluZGV4LCAxKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KSB7XHJcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBqcUxpdGUpIHtcclxuICAgIHN3aXRjaCAoZWxlbWVudC5sZW5ndGgpIHtcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG5cclxuICAgICAgY2FzZSAxOlxyXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IG9mIHN0cmlwcGluZyBhbnl0aGluZyBpZiB0aGUgZWxlbWVudFxyXG4gICAgICAgIC8vIGlzIHRoZSBvbmx5IGVsZW1lbnQgd2l0aGluIHRoZSBqcUxpdGUgd3JhcHBlci5cclxuICAgICAgICAvLyAoaXQncyBpbXBvcnRhbnQgdGhhdCB3ZSByZXRhaW4gdGhlIGVsZW1lbnQgaW5zdGFuY2UuKVxyXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcclxuICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIGpxTGl0ZShleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xyXG4gICAgcmV0dXJuIGpxTGl0ZShlbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7XHJcbiAgaWYgKCFlbGVtZW50WzBdKSByZXR1cm4gZWxlbWVudDtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBlbG0gPSBlbGVtZW50W2ldO1xyXG4gICAgaWYgKGVsbS5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUpIHtcclxuICAgICAgcmV0dXJuIGVsbTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uICQkYWRkQ2xhc3MoJCRqcUxpdGUsIGVsZW1lbnQsIGNsYXNzTmFtZSkge1xyXG4gIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XHJcbiAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbG0sIGNsYXNzTmFtZSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uICQkcmVtb3ZlQ2xhc3MoJCRqcUxpdGUsIGVsZW1lbnQsIGNsYXNzTmFtZSkge1xyXG4gIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XHJcbiAgICAkJGpxTGl0ZS5yZW1vdmVDbGFzcyhlbG0sIGNsYXNzTmFtZSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkoJCRqcUxpdGUpIHtcclxuICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcclxuICAgICAgJCRhZGRDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgb3B0aW9ucy5hZGRDbGFzcyk7XHJcbiAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcclxuICAgICAgJCRyZW1vdmVDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XHJcbiAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICBpZiAoIW9wdGlvbnMuJCRwcmVwYXJlZCkge1xyXG4gICAgdmFyIGRvbU9wZXJhdGlvbiA9IG9wdGlvbnMuZG9tT3BlcmF0aW9uIHx8IG5vb3A7XHJcbiAgICBvcHRpb25zLmRvbU9wZXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBvcHRpb25zLiQkZG9tT3BlcmF0aW9uRmlyZWQgPSB0cnVlO1xyXG4gICAgICBkb21PcGVyYXRpb24oKTtcclxuICAgICAgZG9tT3BlcmF0aW9uID0gbm9vcDtcclxuICAgIH07XHJcbiAgICBvcHRpb25zLiQkcHJlcGFyZWQgPSB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gIGFwcGx5QW5pbWF0aW9uRnJvbVN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuICBhcHBseUFuaW1hdGlvblRvU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvbkZyb21TdHlsZXMoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gIGlmIChvcHRpb25zLmZyb20pIHtcclxuICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XHJcbiAgICBvcHRpb25zLmZyb20gPSBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25Ub1N0eWxlcyhlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgaWYgKG9wdGlvbnMudG8pIHtcclxuICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMudG8pO1xyXG4gICAgb3B0aW9ucy50byA9IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBtZXJnZUFuaW1hdGlvbkRldGFpbHMoZWxlbWVudCwgb2xkQW5pbWF0aW9uLCBuZXdBbmltYXRpb24pIHtcclxuICB2YXIgdGFyZ2V0ID0gb2xkQW5pbWF0aW9uLm9wdGlvbnMgfHwge307XHJcbiAgdmFyIG5ld09wdGlvbnMgPSBuZXdBbmltYXRpb24ub3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIHRvQWRkID0gKHRhcmdldC5hZGRDbGFzcyB8fCAnJykgKyAnICcgKyAobmV3T3B0aW9ucy5hZGRDbGFzcyB8fCAnJyk7XHJcbiAgdmFyIHRvUmVtb3ZlID0gKHRhcmdldC5yZW1vdmVDbGFzcyB8fCAnJykgKyAnICcgKyAobmV3T3B0aW9ucy5yZW1vdmVDbGFzcyB8fCAnJyk7XHJcbiAgdmFyIGNsYXNzZXMgPSByZXNvbHZlRWxlbWVudENsYXNzZXMoZWxlbWVudC5hdHRyKCdjbGFzcycpLCB0b0FkZCwgdG9SZW1vdmUpO1xyXG5cclxuICBpZiAobmV3T3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMpIHtcclxuICAgIHRhcmdldC5wcmVwYXJhdGlvbkNsYXNzZXMgPSBjb25jYXRXaXRoU3BhY2UobmV3T3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMsIHRhcmdldC5wcmVwYXJhdGlvbkNsYXNzZXMpO1xyXG4gICAgZGVsZXRlIG5ld09wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgLy8gbm9vcCBpcyBiYXNpY2FsbHkgd2hlbiB0aGVyZSBpcyBubyBjYWxsYmFjazsgb3RoZXJ3aXNlIHNvbWV0aGluZyBoYXMgYmVlbiBzZXRcclxuICB2YXIgcmVhbERvbU9wZXJhdGlvbiA9IHRhcmdldC5kb21PcGVyYXRpb24gIT09IG5vb3AgPyB0YXJnZXQuZG9tT3BlcmF0aW9uIDogbnVsbDtcclxuXHJcbiAgZXh0ZW5kKHRhcmdldCwgbmV3T3B0aW9ucyk7XHJcblxyXG4gIC8vIFRPRE8obWF0c2tvIG9yIHNyZWVyYW11KTogcHJvcGVyIGZpeCBpcyB0byBtYWludGFpbiBhbGwgYW5pbWF0aW9uIGNhbGxiYWNrIGluIGFycmF5IGFuZCBjYWxsIGF0IGxhc3QsYnV0IG5vdyBvbmx5IGxlYXZlIGhhcyB0aGUgY2FsbGJhY2sgc28gbm8gaXNzdWUgd2l0aCB0aGlzLlxyXG4gIGlmIChyZWFsRG9tT3BlcmF0aW9uKSB7XHJcbiAgICB0YXJnZXQuZG9tT3BlcmF0aW9uID0gcmVhbERvbU9wZXJhdGlvbjtcclxuICB9XHJcblxyXG4gIGlmIChjbGFzc2VzLmFkZENsYXNzKSB7XHJcbiAgICB0YXJnZXQuYWRkQ2xhc3MgPSBjbGFzc2VzLmFkZENsYXNzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0YXJnZXQuYWRkQ2xhc3MgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNsYXNzZXMucmVtb3ZlQ2xhc3MpIHtcclxuICAgIHRhcmdldC5yZW1vdmVDbGFzcyA9IGNsYXNzZXMucmVtb3ZlQ2xhc3M7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRhcmdldC5yZW1vdmVDbGFzcyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBvbGRBbmltYXRpb24uYWRkQ2xhc3MgPSB0YXJnZXQuYWRkQ2xhc3M7XHJcbiAgb2xkQW5pbWF0aW9uLnJlbW92ZUNsYXNzID0gdGFyZ2V0LnJlbW92ZUNsYXNzO1xyXG5cclxuICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlRWxlbWVudENsYXNzZXMoZXhpc3RpbmcsIHRvQWRkLCB0b1JlbW92ZSkge1xyXG4gIHZhciBBRERfQ0xBU1MgPSAxO1xyXG4gIHZhciBSRU1PVkVfQ0xBU1MgPSAtMTtcclxuXHJcbiAgdmFyIGZsYWdzID0ge307XHJcbiAgZXhpc3RpbmcgPSBzcGxpdENsYXNzZXNUb0xvb2t1cChleGlzdGluZyk7XHJcblxyXG4gIHRvQWRkID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAodG9BZGQpO1xyXG4gIGZvckVhY2godG9BZGQsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgIGZsYWdzW2tleV0gPSBBRERfQ0xBU1M7XHJcbiAgfSk7XHJcblxyXG4gIHRvUmVtb3ZlID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAodG9SZW1vdmUpO1xyXG4gIGZvckVhY2godG9SZW1vdmUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgIGZsYWdzW2tleV0gPSBmbGFnc1trZXldID09PSBBRERfQ0xBU1MgPyBudWxsIDogUkVNT1ZFX0NMQVNTO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgY2xhc3NlcyA9IHtcclxuICAgIGFkZENsYXNzOiAnJyxcclxuICAgIHJlbW92ZUNsYXNzOiAnJ1xyXG4gIH07XHJcblxyXG4gIGZvckVhY2goZmxhZ3MsIGZ1bmN0aW9uKHZhbCwga2xhc3MpIHtcclxuICAgIHZhciBwcm9wLCBhbGxvdztcclxuICAgIGlmICh2YWwgPT09IEFERF9DTEFTUykge1xyXG4gICAgICBwcm9wID0gJ2FkZENsYXNzJztcclxuICAgICAgYWxsb3cgPSAhZXhpc3Rpbmdba2xhc3NdIHx8IGV4aXN0aW5nW2tsYXNzICsgUkVNT1ZFX0NMQVNTX1NVRkZJWF07XHJcbiAgICB9IGVsc2UgaWYgKHZhbCA9PT0gUkVNT1ZFX0NMQVNTKSB7XHJcbiAgICAgIHByb3AgPSAncmVtb3ZlQ2xhc3MnO1xyXG4gICAgICBhbGxvdyA9IGV4aXN0aW5nW2tsYXNzXSB8fCBleGlzdGluZ1trbGFzcyArIEFERF9DTEFTU19TVUZGSVhdO1xyXG4gICAgfVxyXG4gICAgaWYgKGFsbG93KSB7XHJcbiAgICAgIGlmIChjbGFzc2VzW3Byb3BdLmxlbmd0aCkge1xyXG4gICAgICAgIGNsYXNzZXNbcHJvcF0gKz0gJyAnO1xyXG4gICAgICB9XHJcbiAgICAgIGNsYXNzZXNbcHJvcF0gKz0ga2xhc3M7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHNwbGl0Q2xhc3Nlc1RvTG9va3VwKGNsYXNzZXMpIHtcclxuICAgIGlmIChpc1N0cmluZyhjbGFzc2VzKSkge1xyXG4gICAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MpIHtcclxuICAgICAgLy8gc29tZXRpbWVzIHRoZSBzcGxpdCBsZWF2ZXMgZW1wdHkgc3RyaW5nIHZhbHVlc1xyXG4gICAgICAvLyBpbmNhc2UgZXh0cmEgc3BhY2VzIHdlcmUgYXBwbGllZCB0byB0aGUgb3B0aW9uc1xyXG4gICAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XHJcbiAgICAgICAgb2JqW2tsYXNzXSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcblxyXG4gIHJldHVybiBjbGFzc2VzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXREb21Ob2RlKGVsZW1lbnQpIHtcclxuICByZXR1cm4gKGVsZW1lbnQgaW5zdGFuY2VvZiBqcUxpdGUpID8gZWxlbWVudFswXSA6IGVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5R2VuZXJhdGVkUHJlcGFyYXRpb25DbGFzc2VzKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zKSB7XHJcbiAgdmFyIGNsYXNzZXMgPSAnJztcclxuICBpZiAoZXZlbnQpIHtcclxuICAgIGNsYXNzZXMgPSBwZW5kQ2xhc3NlcyhldmVudCwgRVZFTlRfQ0xBU1NfUFJFRklYLCB0cnVlKTtcclxuICB9XHJcbiAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcclxuICAgIGNsYXNzZXMgPSBjb25jYXRXaXRoU3BhY2UoY2xhc3NlcywgcGVuZENsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgQUREX0NMQVNTX1NVRkZJWCkpO1xyXG4gIH1cclxuICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xyXG4gICAgY2xhc3NlcyA9IGNvbmNhdFdpdGhTcGFjZShjbGFzc2VzLCBwZW5kQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBSRU1PVkVfQ0xBU1NfU1VGRklYKSk7XHJcbiAgfVxyXG4gIGlmIChjbGFzc2VzLmxlbmd0aCkge1xyXG4gICAgb3B0aW9ucy5wcmVwYXJhdGlvbkNsYXNzZXMgPSBjbGFzc2VzO1xyXG4gICAgZWxlbWVudC5hZGRDbGFzcyhjbGFzc2VzKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFyR2VuZXJhdGVkQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgaWYgKG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzKSB7XHJcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzKTtcclxuICAgIG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzID0gbnVsbDtcclxuICB9XHJcbiAgaWYgKG9wdGlvbnMuYWN0aXZlQ2xhc3Nlcykge1xyXG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLmFjdGl2ZUNsYXNzZXMpO1xyXG4gICAgb3B0aW9ucy5hY3RpdmVDbGFzc2VzID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZHVyYXRpb24pIHtcclxuICAvLyB3ZSB1c2UgYSBuZWdhdGl2ZSBkZWxheSB2YWx1ZSBzaW5jZSBpdCBwZXJmb3JtcyBibG9ja2luZ1xyXG4gIC8vIHlldCBpdCBkb2Vzbid0IGtpbGwgYW55IGV4aXN0aW5nIHRyYW5zaXRpb25zIHJ1bm5pbmcgb24gdGhlXHJcbiAgLy8gc2FtZSBlbGVtZW50IHdoaWNoIG1ha2VzIHRoaXMgc2FmZSBmb3IgY2xhc3MtYmFzZWQgYW5pbWF0aW9uc1xyXG4gIHZhciB2YWx1ZSA9IGR1cmF0aW9uID8gJy0nICsgZHVyYXRpb24gKyAncycgOiAnJztcclxuICBhcHBseUlubGluZVN0eWxlKG5vZGUsIFtUUkFOU0lUSU9OX0RFTEFZX1BST1AsIHZhbHVlXSk7XHJcbiAgcmV0dXJuIFtUUkFOU0lUSU9OX0RFTEFZX1BST1AsIHZhbHVlXTtcclxufVxyXG5cclxuZnVuY3Rpb24gYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMobm9kZSwgYXBwbHlCbG9jaykge1xyXG4gIHZhciB2YWx1ZSA9IGFwcGx5QmxvY2sgPyAncGF1c2VkJyA6ICcnO1xyXG4gIHZhciBrZXkgPSBBTklNQVRJT05fUFJPUCArIEFOSU1BVElPTl9QTEFZU1RBVEVfS0VZO1xyXG4gIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgW2tleSwgdmFsdWVdKTtcclxuICByZXR1cm4gW2tleSwgdmFsdWVdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBseUlubGluZVN0eWxlKG5vZGUsIHN0eWxlVHVwbGUpIHtcclxuICB2YXIgcHJvcCA9IHN0eWxlVHVwbGVbMF07XHJcbiAgdmFyIHZhbHVlID0gc3R5bGVUdXBsZVsxXTtcclxuICBub2RlLnN0eWxlW3Byb3BdID0gdmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbmNhdFdpdGhTcGFjZShhLGIpIHtcclxuICBpZiAoIWEpIHJldHVybiBiO1xyXG4gIGlmICghYikgcmV0dXJuIGE7XHJcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xyXG59XHJcblxyXG52YXIgJCRyQUZTY2hlZHVsZXJGYWN0b3J5ID0gWyckJHJBRicsIGZ1bmN0aW9uKCQkckFGKSB7XHJcbiAgdmFyIHF1ZXVlLCBjYW5jZWxGbjtcclxuXHJcbiAgZnVuY3Rpb24gc2NoZWR1bGVyKHRhc2tzKSB7XHJcbiAgICAvLyB3ZSBtYWtlIGEgY29weSBzaW5jZSBSQUZTY2hlZHVsZXIgbXV0YXRlcyB0aGUgc3RhdGVcclxuICAgIC8vIG9mIHRoZSBwYXNzZWQgaW4gYXJyYXkgdmFyaWFibGUgYW5kIHRoaXMgd291bGQgYmUgZGlmZmljdWx0XHJcbiAgICAvLyB0byB0cmFjayBkb3duIG9uIHRoZSBvdXRzaWRlIGNvZGVcclxuICAgIHF1ZXVlID0gcXVldWUuY29uY2F0KHRhc2tzKTtcclxuICAgIG5leHRUaWNrKCk7XHJcbiAgfVxyXG5cclxuICBxdWV1ZSA9IHNjaGVkdWxlci5xdWV1ZSA9IFtdO1xyXG5cclxuICAvKiB3YWl0VW50aWxRdWlldCBkb2VzIHR3byB0aGluZ3M6XHJcbiAgICogMS4gSXQgd2lsbCBydW4gdGhlIEZJTkFMIGBmbmAgdmFsdWUgb25seSB3aGVuIGFuIHVuY2FuY2VsZWQgUkFGIGhhcyBwYXNzZWQgdGhyb3VnaFxyXG4gICAqIDIuIEl0IHdpbGwgZGVsYXkgdGhlIG5leHQgd2F2ZSBvZiB0YXNrcyBmcm9tIHJ1bm5pbmcgdW50aWwgdGhlIHF1aWV0IGBmbmAgaGFzIHJ1bi5cclxuICAgKlxyXG4gICAqIFRoZSBtb3RpdmF0aW9uIGhlcmUgaXMgdGhhdCBhbmltYXRpb24gY29kZSBjYW4gcmVxdWVzdCBtb3JlIHRpbWUgZnJvbSB0aGUgc2NoZWR1bGVyXHJcbiAgICogYmVmb3JlIHRoZSBuZXh0IHdhdmUgcnVucy4gVGhpcyBhbGxvd3MgZm9yIGNlcnRhaW4gRE9NIHByb3BlcnRpZXMgc3VjaCBhcyBjbGFzc2VzIHRvXHJcbiAgICogYmUgcmVzb2x2ZWQgaW4gdGltZSBmb3IgdGhlIG5leHQgYW5pbWF0aW9uIHRvIHJ1bi5cclxuICAgKi9cclxuICBzY2hlZHVsZXIud2FpdFVudGlsUXVpZXQgPSBmdW5jdGlvbihmbikge1xyXG4gICAgaWYgKGNhbmNlbEZuKSBjYW5jZWxGbigpO1xyXG5cclxuICAgIGNhbmNlbEZuID0gJCRyQUYoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNhbmNlbEZuID0gbnVsbDtcclxuICAgICAgZm4oKTtcclxuICAgICAgbmV4dFRpY2soKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBzY2hlZHVsZXI7XHJcblxyXG4gIGZ1bmN0aW9uIG5leHRUaWNrKCkge1xyXG4gICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHJldHVybjtcclxuXHJcbiAgICB2YXIgaXRlbXMgPSBxdWV1ZS5zaGlmdCgpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpdGVtc1tpXSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghY2FuY2VsRm4pIHtcclxuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCFjYW5jZWxGbikgbmV4dFRpY2soKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nQW5pbWF0ZUNoaWxkcmVuXHJcbiAqIEByZXN0cmljdCBBRVxyXG4gKiBAZWxlbWVudCBBTllcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIG5nQW5pbWF0ZUNoaWxkcmVuIGFsbG93cyB5b3UgdG8gc3BlY2lmeSB0aGF0IGNoaWxkcmVuIG9mIHRoaXMgZWxlbWVudCBzaG91bGQgYW5pbWF0ZSBldmVuIGlmIGFueVxyXG4gKiBvZiB0aGUgY2hpbGRyZW4ncyBwYXJlbnRzIGFyZSBjdXJyZW50bHkgYW5pbWF0aW5nLiBCeSBkZWZhdWx0LCB3aGVuIGFuIGVsZW1lbnQgaGFzIGFuIGFjdGl2ZSBgZW50ZXJgLCBgbGVhdmVgLCBvciBgbW92ZWBcclxuICogKHN0cnVjdHVyYWwpIGFuaW1hdGlvbiwgY2hpbGQgZWxlbWVudHMgdGhhdCBhbHNvIGhhdmUgYW4gYWN0aXZlIHN0cnVjdHVyYWwgYW5pbWF0aW9uIGFyZSBub3QgYW5pbWF0ZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCBldmVuIGlmIGBuZ0FuaW10ZUNoaWxkcmVuYCBpcyBzZXQsIG5vIGNoaWxkIGFuaW1hdGlvbnMgd2lsbCBydW4gd2hlbiB0aGUgcGFyZW50IGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gKGBsZWF2ZWAgYW5pbWF0aW9uKS5cclxuICpcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG5nQW5pbWF0ZUNoaWxkcmVuIElmIHRoZSB2YWx1ZSBpcyBlbXB0eSwgYHRydWVgIG9yIGBvbmAsXHJcbiAqICAgICB0aGVuIGNoaWxkIGFuaW1hdGlvbnMgYXJlIGFsbG93ZWQuIElmIHRoZSB2YWx1ZSBpcyBgZmFsc2VgLCBjaGlsZCBhbmltYXRpb25zIGFyZSBub3QgYWxsb3dlZC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlQ2hpbGRyZW5cIiBuYW1lPVwibmdBbmltYXRlQ2hpbGRyZW5cIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cclxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwibWFpbkNvbnRyb2xsZXIgYXMgbWFpblwiPlxyXG4gICAgICAgICA8bGFiZWw+U2hvdyBjb250YWluZXI/IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm1haW4uZW50ZXJFbGVtZW50XCIgLz48L2xhYmVsPlxyXG4gICAgICAgICA8bGFiZWw+QW5pbWF0ZSBjaGlsZHJlbj8gPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibWFpbi5hbmltYXRlQ2hpbGRyZW5cIiAvPjwvbGFiZWw+XHJcbiAgICAgICAgIDxocj5cclxuICAgICAgICAgPGRpdiBuZy1hbmltYXRlLWNoaWxkcmVuPVwie3ttYWluLmFuaW1hdGVDaGlsZHJlbn19XCI+XHJcbiAgICAgICAgICAgPGRpdiBuZy1pZj1cIm1haW4uZW50ZXJFbGVtZW50XCIgY2xhc3M9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgIExpc3Qgb2YgaXRlbXM6XHJcbiAgICAgICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cIml0ZW0gaW4gWzAsIDEsIDIsIDNdXCIgY2xhc3M9XCJpdGVtXCI+SXRlbSB7e2l0ZW19fTwvZGl2PlxyXG4gICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICA8L2Rpdj5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZmlsZT5cclxuICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cclxuXHJcbiAgICAgIC5jb250YWluZXIubmctZW50ZXIsXHJcbiAgICAgIC5jb250YWluZXIubmctbGVhdmUge1xyXG4gICAgICAgIHRyYW5zaXRpb246IGFsbCBlYXNlIDEuNXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5jb250YWluZXIubmctZW50ZXIsXHJcbiAgICAgIC5jb250YWluZXIubmctbGVhdmUtYWN0aXZlIHtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuY29udGFpbmVyLm5nLWxlYXZlLFxyXG4gICAgICAuY29udGFpbmVyLm5nLWVudGVyLWFjdGl2ZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLml0ZW0ge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGZpcmVicmljaztcclxuICAgICAgICBjb2xvcjogI0ZGRjtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuaXRlbS5uZy1lbnRlcixcclxuICAgICAgLml0ZW0ubmctbGVhdmUge1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxLjVzIGVhc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5pdGVtLm5nLWVudGVyIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoNTBweCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5pdGVtLm5nLWVudGVyLWFjdGl2ZSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xyXG4gICAgICB9XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XHJcbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ0FuaW1hdGVDaGlsZHJlbicsIFsnbmdBbmltYXRlJ10pXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ21haW5Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0aGlzLmFuaW1hdGVDaGlsZHJlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgdGhpcy5lbnRlckVsZW1lbnQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIDwvZmlsZT5cclxuICA8L2V4YW1wbGU+XHJcbiAqL1xyXG52YXIgJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgdmFyIHZhbCA9IGF0dHJzLm5nQW5pbWF0ZUNoaWxkcmVuO1xyXG4gICAgICBpZiAoaXNTdHJpbmcodmFsKSAmJiB2YWwubGVuZ3RoID09PSAwKSB7IC8vZW1wdHkgYXR0cmlidXRlXHJcbiAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSwgdHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gSW50ZXJwb2xhdGUgYW5kIHNldCB0aGUgdmFsdWUsIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIHRvXHJcbiAgICAgICAgLy8gYW5pbWF0aW9ucyB0aGF0IHJ1biByaWdodCBhZnRlciBjb21waWxhdGlvblxyXG4gICAgICAgIHNldERhdGEoJGludGVycG9sYXRlKHZhbCkoc2NvcGUpKTtcclxuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgnbmdBbmltYXRlQ2hpbGRyZW4nLCBzZXREYXRhKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gc2V0RGF0YSh2YWx1ZSkge1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT09ICdvbicgfHwgdmFsdWUgPT09ICd0cnVlJztcclxuICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBLCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XTtcclxuXHJcbnZhciBBTklNQVRFX1RJTUVSX0tFWSA9ICckJGFuaW1hdGVDc3MnO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAqIEBuYW1lICRhbmltYXRlQ3NzXHJcbiAqIEBraW5kIG9iamVjdFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSBpcyBhIHVzZWZ1bCB1dGlsaXR5IHRvIHRyaWdnZXIgY3VzdG9taXplZCBDU1MtYmFzZWQgdHJhbnNpdGlvbnMva2V5ZnJhbWVzXHJcbiAqIGZyb20gYSBKYXZhU2NyaXB0LWJhc2VkIGFuaW1hdGlvbiBvciBkaXJlY3RseSBmcm9tIGEgZGlyZWN0aXZlLiBUaGUgcHVycG9zZSBvZiBgJGFuaW1hdGVDc3NgIGlzIE5PVFxyXG4gKiB0byBzaWRlLXN0ZXAgaG93IGAkYW5pbWF0ZWAgYW5kIG5nQW5pbWF0ZSB3b3JrLCBidXQgdGhlIGdvYWwgaXMgdG8gYWxsb3cgcHJlLWV4aXN0aW5nIGFuaW1hdGlvbnMgb3JcclxuICogZGlyZWN0aXZlcyB0byBjcmVhdGUgbW9yZSBjb21wbGV4IGFuaW1hdGlvbnMgdGhhdCBjYW4gYmUgcHVyZWx5IGRyaXZlbiB1c2luZyBDU1MgY29kZS5cclxuICpcclxuICogTm90ZSB0aGF0IG9ubHkgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUyB0cmFuc2l0aW9ucyBhbmQvb3Iga2V5ZnJhbWUgYW5pbWF0aW9ucyBhcmUgY2FwYWJsZSBvZlxyXG4gKiByZW5kZXJpbmcgYW5pbWF0aW9ucyB0cmlnZ2VyZWQgdmlhIGAkYW5pbWF0ZUNzc2AgKGJhZCBuZXdzIGZvciBJRTkgYW5kIGxvd2VyKS5cclxuICpcclxuICogIyMgVXNhZ2VcclxuICogT25jZSBhZ2FpbiwgYCRhbmltYXRlQ3NzYCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBhIHJlZ2lzdGVyZWQgSmF2YVNjcmlwdCBhbmltYXRpb24gdGhhdFxyXG4gKiBpcyBwb3dlcmVkIGJ5IG5nQW5pbWF0ZS4gSXQgaXMgcG9zc2libGUgdG8gdXNlIGAkYW5pbWF0ZUNzc2AgZGlyZWN0bHkgaW5zaWRlIG9mIGEgZGlyZWN0aXZlLCBob3dldmVyLFxyXG4gKiBhbnkgYXV0b21hdGljIGNvbnRyb2wgb3ZlciBjYW5jZWxsaW5nIGFuaW1hdGlvbnMgYW5kL29yIHByZXZlbnRpbmcgYW5pbWF0aW9ucyBmcm9tIGJlaW5nIHJ1biBvblxyXG4gKiBjaGlsZCBlbGVtZW50cyB3aWxsIG5vdCBiZSBoYW5kbGVkIGJ5IEFuZ3VsYXIuIEZvciB0aGlzIHRvIHdvcmsgYXMgZXhwZWN0ZWQsIHBsZWFzZSB1c2UgYCRhbmltYXRlYCB0b1xyXG4gKiB0cmlnZ2VyIHRoZSBhbmltYXRpb24gYW5kIHRoZW4gc2V0dXAgYSBKYXZhU2NyaXB0IGFuaW1hdGlvbiB0aGF0IGluamVjdHMgYCRhbmltYXRlQ3NzYCB0byB0cmlnZ2VyXHJcbiAqIHRoZSBDU1MgYW5pbWF0aW9uLlxyXG4gKlxyXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBzaG93cyBob3cgd2UgY2FuIGNyZWF0ZSBhIGZvbGRpbmcgYW5pbWF0aW9uIG9uIGFuIGVsZW1lbnQgdXNpbmcgYG5nLWlmYDpcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8IS0tIG5vdGljZSB0aGUgYGZvbGQtYW5pbWF0aW9uYCBDU1MgY2xhc3MgLS0+XHJcbiAqIDxkaXYgbmctaWY9XCJvbk9mZlwiIGNsYXNzPVwiZm9sZC1hbmltYXRpb25cIj5cclxuICogICBUaGlzIGVsZW1lbnQgd2lsbCBnbyBCT09NXHJcbiAqIDwvZGl2PlxyXG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwib25PZmY9dHJ1ZVwiPkZvbGQgSW48L2J1dHRvbj5cclxuICogYGBgXHJcbiAqXHJcbiAqIE5vdyB3ZSBjcmVhdGUgdGhlICoqSmF2YVNjcmlwdCBhbmltYXRpb24qKiB0aGF0IHdpbGwgdHJpZ2dlciB0aGUgQ1NTIHRyYW5zaXRpb246XHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIG5nTW9kdWxlLmFuaW1hdGlvbignLmZvbGQtYW5pbWF0aW9uJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XHJcbiAqICAgcmV0dXJuIHtcclxuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcclxuICogICAgICAgdmFyIGhlaWdodCA9IGVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0O1xyXG4gKiAgICAgICByZXR1cm4gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xyXG4gKiAgICAgICAgIGZyb206IHsgaGVpZ2h0OicwcHgnIH0sXHJcbiAqICAgICAgICAgdG86IHsgaGVpZ2h0OmhlaWdodCArICdweCcgfSxcclxuICogICAgICAgICBkdXJhdGlvbjogMSAvLyBvbmUgc2Vjb25kXHJcbiAqICAgICAgIH0pO1xyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICogfV0pO1xyXG4gKiBgYGBcclxuICpcclxuICogIyMgTW9yZSBBZHZhbmNlZCBVc2VzXHJcbiAqXHJcbiAqIGAkYW5pbWF0ZUNzc2AgaXMgdGhlIHVuZGVybHlpbmcgY29kZSB0aGF0IG5nQW5pbWF0ZSB1c2VzIHRvIHBvd2VyICoqQ1NTLWJhc2VkIGFuaW1hdGlvbnMqKiBiZWhpbmQgdGhlIHNjZW5lcy4gVGhlcmVmb3JlIENTUyBob29rc1xyXG4gKiBsaWtlIGAubmctRVZFTlRgLCBgLm5nLUVWRU5ULWFjdGl2ZWAsIGAubmctRVZFTlQtc3RhZ2dlcmAgYXJlIGFsbCBmZWF0dXJlcyB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgdXNpbmcgYCRhbmltYXRlQ3NzYCB2aWEgSmF2YVNjcmlwdCBjb2RlLlxyXG4gKlxyXG4gKiBUaGlzIGFsc28gbWVhbnMgdGhhdCBqdXN0IGFib3V0IGFueSBjb21iaW5hdGlvbiBvZiBhZGRpbmcgY2xhc3NlcywgcmVtb3ZpbmcgY2xhc3Nlcywgc2V0dGluZyBzdHlsZXMsIGR5bmFtaWNhbGx5IHNldHRpbmcgYSBrZXlmcmFtZSBhbmltYXRpb24sXHJcbiAqIGFwcGx5aW5nIGEgaGFyZGNvZGVkIGR1cmF0aW9uIG9yIGRlbGF5IHZhbHVlLCBjaGFuZ2luZyB0aGUgYW5pbWF0aW9uIGVhc2luZyBvciBhcHBseWluZyBhIHN0YWdnZXIgYW5pbWF0aW9uIGFyZSBhbGwgb3B0aW9ucyB0aGF0IHdvcmsgd2l0aFxyXG4gKiBgJGFuaW1hdGVDc3NgLiBUaGUgc2VydmljZSBpdHNlbGYgaXMgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgdGhlIGNvbWJpbmF0aW9uIG9mIG9wdGlvbnMgYW5kIGV4YW1pbmUgdGhlIGVsZW1lbnQgc3R5bGluZyBwcm9wZXJ0aWVzIGluIG9yZGVyXHJcbiAqIHRvIHByb3ZpZGUgYSB3b3JraW5nIGFuaW1hdGlvbiB0aGF0IHdpbGwgcnVuIGluIENTUy5cclxuICpcclxuICogVGhlIGV4YW1wbGUgYmVsb3cgc2hvd2Nhc2VzIGEgbW9yZSBhZHZhbmNlZCB2ZXJzaW9uIG9mIHRoZSBgLmZvbGQtYW5pbWF0aW9uYCBmcm9tIHRoZSBleGFtcGxlIGFib3ZlOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBuZ01vZHVsZS5hbmltYXRpb24oJy5mb2xkLWFuaW1hdGlvbicsIFsnJGFuaW1hdGVDc3MnLCBmdW5jdGlvbigkYW5pbWF0ZUNzcykge1xyXG4gKiAgIHJldHVybiB7XHJcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XHJcbiAqICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50WzBdLm9mZnNldEhlaWdodDtcclxuICogICAgICAgcmV0dXJuICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcclxuICogICAgICAgICBhZGRDbGFzczogJ3JlZCBsYXJnZS10ZXh0IHB1bHNlLXR3aWNlJyxcclxuICogICAgICAgICBlYXNpbmc6ICdlYXNlLW91dCcsXHJcbiAqICAgICAgICAgZnJvbTogeyBoZWlnaHQ6JzBweCcgfSxcclxuICogICAgICAgICB0bzogeyBoZWlnaHQ6aGVpZ2h0ICsgJ3B4JyB9LFxyXG4gKiAgICAgICAgIGR1cmF0aW9uOiAxIC8vIG9uZSBzZWNvbmRcclxuICogICAgICAgfSk7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBTaW5jZSB3ZSdyZSBhZGRpbmcvcmVtb3ZpbmcgQ1NTIGNsYXNzZXMgdGhlbiB0aGUgQ1NTIHRyYW5zaXRpb24gd2lsbCBhbHNvIHBpY2sgdGhvc2UgdXA6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAvJiM0Mjsgc2luY2UgYSBoYXJkY29kZWQgZHVyYXRpb24gdmFsdWUgb2YgMSB3YXMgcHJvdmlkZWQgaW4gdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIGNvZGUsXHJcbiAqIHRoZSBDU1MgY2xhc3NlcyBiZWxvdyB3aWxsIGJlIHRyYW5zaXRpb25lZCBkZXNwaXRlIHRoZW0gYmVpbmcgZGVmaW5lZCBhcyByZWd1bGFyIENTUyBjbGFzc2VzICYjNDI7L1xyXG4gKiAucmVkIHsgYmFja2dyb3VuZDpyZWQ7IH1cclxuICogLmxhcmdlLXRleHQgeyBmb250LXNpemU6MjBweDsgfVxyXG4gKlxyXG4gKiAvJiM0Mjsgd2UgY2FuIGFsc28gdXNlIGEga2V5ZnJhbWUgYW5pbWF0aW9uIGFuZCAkYW5pbWF0ZUNzcyB3aWxsIG1ha2UgaXQgd29yayBhbG9uZ3NpZGUgdGhlIHRyYW5zaXRpb24gJiM0MjsvXHJcbiAqIC5wdWxzZS10d2ljZSB7XHJcbiAqICAgYW5pbWF0aW9uOiAwLjVzIHB1bHNlIGxpbmVhciAyO1xyXG4gKiAgIC13ZWJraXQtYW5pbWF0aW9uOiAwLjVzIHB1bHNlIGxpbmVhciAyO1xyXG4gKiB9XHJcbiAqXHJcbiAqIEBrZXlmcmFtZXMgcHVsc2Uge1xyXG4gKiAgIGZyb20geyB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IH1cclxuICogICB0byB7IHRyYW5zZm9ybTogc2NhbGUoMS41KTsgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIEAtd2Via2l0LWtleWZyYW1lcyBwdWxzZSB7XHJcbiAqICAgZnJvbSB7IC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB9XHJcbiAqICAgdG8geyAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS41KTsgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBHaXZlbiB0aGlzIGNvbXBsZXggY29tYmluYXRpb24gb2YgQ1NTIGNsYXNzZXMsIHN0eWxlcyBhbmQgb3B0aW9ucywgYCRhbmltYXRlQ3NzYCB3aWxsIGZpZ3VyZSBldmVyeXRoaW5nIG91dCBhbmQgbWFrZSB0aGUgYW5pbWF0aW9uIGhhcHBlbi5cclxuICpcclxuICogIyMgSG93IHRoZSBPcHRpb25zIGFyZSBoYW5kbGVkXHJcbiAqXHJcbiAqIGAkYW5pbWF0ZUNzc2AgaXMgdmVyeSB2ZXJzYXRpbGUgYW5kIGludGVsbGlnZW50IHdoZW4gaXQgY29tZXMgdG8gZmlndXJpbmcgb3V0IHdoYXQgY29uZmlndXJhdGlvbnMgdG8gYXBwbHkgdG8gdGhlIGVsZW1lbnQgdG8gZW5zdXJlIHRoZSBhbmltYXRpb25cclxuICogd29ya3Mgd2l0aCB0aGUgb3B0aW9ucyBwcm92aWRlZC4gU2F5IGZvciBleGFtcGxlIHdlIHdlcmUgYWRkaW5nIGEgY2xhc3MgdGhhdCBjb250YWluZWQgYSBrZXlmcmFtZSB2YWx1ZSBhbmQgd2Ugd2FudGVkIHRvIGFsc28gYW5pbWF0ZSBzb21lIGlubGluZVxyXG4gKiBzdHlsZXMgdXNpbmcgdGhlIGBmcm9tYCBhbmQgYHRvYCBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XHJcbiAqICAgZnJvbTogeyBiYWNrZ3JvdW5kOidyZWQnIH0sXHJcbiAqICAgdG86IHsgYmFja2dyb3VuZDonYmx1ZScgfVxyXG4gKiB9KTtcclxuICogYW5pbWF0b3Iuc3RhcnQoKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAucm90YXRpbmctYW5pbWF0aW9uIHtcclxuICogICBhbmltYXRpb246MC41cyByb3RhdGUgbGluZWFyO1xyXG4gKiAgIC13ZWJraXQtYW5pbWF0aW9uOjAuNXMgcm90YXRlIGxpbmVhcjtcclxuICogfVxyXG4gKlxyXG4gKiBAa2V5ZnJhbWVzIHJvdGF0ZSB7XHJcbiAqICAgZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XHJcbiAqICAgdG8geyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XHJcbiAqIH1cclxuICpcclxuICogQC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZSB7XHJcbiAqICAgZnJvbSB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cclxuICogICB0byB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGUgbWlzc2luZyBwaWVjZXMgaGVyZSBhcmUgdGhhdCB3ZSBkbyBub3QgaGF2ZSBhIHRyYW5zaXRpb24gc2V0ICh3aXRoaW4gdGhlIENTUyBjb2RlIG5vciB3aXRoaW4gdGhlIGAkYW5pbWF0ZUNzc2Agb3B0aW9ucykgYW5kIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uIGlzXHJcbiAqIGdvaW5nIHRvIGJlIGRldGVjdGVkIGZyb20gd2hhdCB0aGUga2V5ZnJhbWUgc3R5bGVzIG9uIHRoZSBDU1MgY2xhc3MgYXJlLiBJbiB0aGlzIGV2ZW50LCBgJGFuaW1hdGVDc3NgIHdpbGwgYXV0b21hdGljYWxseSBjcmVhdGUgYW4gaW5saW5lIHRyYW5zaXRpb25cclxuICogc3R5bGUgbWF0Y2hpbmcgdGhlIGR1cmF0aW9uIGRldGVjdGVkIGZyb20gdGhlIGtleWZyYW1lIHN0eWxlICh3aGljaCBpcyBwcmVzZW50IGluIHRoZSBDU1MgY2xhc3MgdGhhdCBpcyBiZWluZyBhZGRlZCkgYW5kIHRoZW4gcHJlcGFyZSBib3RoIHRoZSB0cmFuc2l0aW9uXHJcbiAqIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zIHRvIHJ1biBpbiBwYXJhbGxlbCBvbiB0aGUgZWxlbWVudC4gVGhlbiB3aGVuIHRoZSBhbmltYXRpb24gaXMgdW5kZXJ3YXkgdGhlIHByb3ZpZGVkIGBmcm9tYCBhbmQgYHRvYCBDU1Mgc3R5bGVzIHdpbGwgYmUgYXBwbGllZFxyXG4gKiBhbmQgc3ByZWFkIGFjcm9zcyB0aGUgdHJhbnNpdGlvbiBhbmQga2V5ZnJhbWUgYW5pbWF0aW9uLlxyXG4gKlxyXG4gKiAjIyBXaGF0IGlzIHJldHVybmVkXHJcbiAqXHJcbiAqIGAkYW5pbWF0ZUNzc2Agd29ya3MgaW4gdHdvIHN0YWdlczogYSBwcmVwYXJhdGlvbiBwaGFzZSBhbmQgYW4gYW5pbWF0aW9uIHBoYXNlLiBUaGVyZWZvcmUgd2hlbiBgJGFuaW1hdGVDc3NgIGlzIGZpcnN0IGNhbGxlZCBpdCB3aWxsIE5PVCBhY3R1YWxseVxyXG4gKiBzdGFydCB0aGUgYW5pbWF0aW9uLiBBbGwgdGhhdCBpcyBnb2luZyBvbiBoZXJlIGlzIHRoYXQgdGhlIGVsZW1lbnQgaXMgYmVpbmcgcHJlcGFyZWQgZm9yIHRoZSBhbmltYXRpb24gKHdoaWNoIG1lYW5zIHRoYXQgdGhlIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmVcclxuICogYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGVsZW1lbnQpLiBPbmNlIGAkYW5pbWF0ZUNzc2AgaXMgY2FsbGVkIGl0IHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICpcclxuICogYGBganNcclxuICogdmFyIGFuaW1hdG9yID0gJGFuaW1hdGVDc3MoZWxlbWVudCwgeyAuLi4gfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3cgd2hhdCBkbyB0aGUgY29udGVudHMgb2Ygb3VyIGBhbmltYXRvcmAgdmFyaWFibGUgbG9vayBsaWtlOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiB7XHJcbiAqICAgLy8gc3RhcnRzIHRoZSBhbmltYXRpb25cclxuICogICBzdGFydDogRnVuY3Rpb24sXHJcbiAqXHJcbiAqICAgLy8gZW5kcyAoYWJvcnRzKSB0aGUgYW5pbWF0aW9uXHJcbiAqICAgZW5kOiBGdW5jdGlvblxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUbyBhY3R1YWxseSBzdGFydCB0aGUgYW5pbWF0aW9uIHdlIG5lZWQgdG8gcnVuIGBhbmltYXRpb24uc3RhcnQoKWAgd2hpY2ggd2lsbCB0aGVuIHJldHVybiBhIHByb21pc2UgdGhhdCB3ZSBjYW4gaG9vayBpbnRvIHRvIGRldGVjdCB3aGVuIHRoZSBhbmltYXRpb24gZW5kcy5cclxuICogSWYgd2UgY2hvb3NlIG5vdCB0byBydW4gdGhlIGFuaW1hdGlvbiB0aGVuIHdlIE1VU1QgcnVuIGBhbmltYXRpb24uZW5kKClgIHRvIHBlcmZvcm0gYSBjbGVhbnVwIG9uIHRoZSBlbGVtZW50IChzaW5jZSBzb21lIENTUyBjbGFzc2VzIGFuZCBzdHlsZXMgbWF5IGhhdmUgYmVlblxyXG4gKiBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGR1cmluZyB0aGUgcHJlcGFyYXRpb24gcGhhc2UpLiBOb3RlIHRoYXQgYWxsIG90aGVyIHByb3BlcnRpZXMgc3VjaCBhcyBkdXJhdGlvbiwgZGVsYXksIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgYXJlIGp1c3QgcHJvcGVydGllc1xyXG4gKiBhbmQgdGhhdCBjaGFuZ2luZyB0aGVtIHdpbGwgbm90IHJlY29uZmlndXJlIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBhbmltYXRpb24uXHJcbiAqXHJcbiAqICMjIyBydW5uZXIuZG9uZSgpIHZzIHJ1bm5lci50aGVuKClcclxuICogSXQgaXMgZG9jdW1lbnRlZCB0aGF0IGBhbmltYXRpb24uc3RhcnQoKWAgd2lsbCByZXR1cm4gYSBwcm9taXNlIG9iamVjdCBhbmQgdGhpcyBpcyB0cnVlLCBob3dldmVyLCB0aGVyZSBpcyBhbHNvIGFuIGFkZGl0aW9uYWwgbWV0aG9kIGF2YWlsYWJsZSBvbiB0aGVcclxuICogcnVubmVyIGNhbGxlZCBgLmRvbmUoY2FsbGJhY2tGbilgLiBUaGUgZG9uZSBtZXRob2Qgd29ya3MgdGhlIHNhbWUgYXMgYC5maW5hbGx5KGNhbGxiYWNrRm4pYCwgaG93ZXZlciwgaXQgZG9lcyAqKm5vdCB0cmlnZ2VyIGEgZGlnZXN0IHRvIG9jY3VyKiouXHJcbiAqIFRoZXJlZm9yZSwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0J3MgYWx3YXlzIGJlc3QgdG8gdXNlIGBydW5uZXIuZG9uZShjYWxsYmFjaylgIGluc3RlYWQgb2YgYHJ1bm5lci50aGVuKClgLCBgcnVubmVyLmNhdGNoKClgIG9yIGBydW5uZXIuZmluYWxseSgpYFxyXG4gKiB1bmxlc3MgeW91IHJlYWxseSBuZWVkIGEgZGlnZXN0IHRvIGtpY2sgb2ZmIGFmdGVyd2FyZHMuXHJcbiAqXHJcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCB0byBtYWtlIHRoaXMgZWFzaWVyLCBuZ0FuaW1hdGUgaGFzIHR3ZWFrZWQgdGhlIEpTIGFuaW1hdGlvbnMgQVBJIHRvIHJlY29nbml6ZSB3aGVuIGEgcnVubmVyIGluc3RhbmNlIGlzIHJldHVybmVkIGZyb20gJGFuaW1hdGVDc3NcclxuICogKHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBgcnVubmVyLmRvbmUoZG9uZUZuKWAgaW5zaWRlIG9mIHlvdXIgSmF2YVNjcmlwdCBhbmltYXRpb24gY29kZSkuXHJcbiAqIENoZWNrIHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzI3VzYWdlIGFuaW1hdGlvbiBjb2RlIGFib3ZlfSB0byBzZWUgaG93IHRoaXMgd29ya3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgYW5pbWF0ZWRcclxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgdGhlIGFuaW1hdGlvbi1yZWxhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgZHVyaW5nIHRoZSBhbmltYXRpb25cclxuICpcclxuICogKiBgZXZlbnRgIC0gVGhlIERPTSBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUpLiBXaGVuIHVzZWQsIGEgZ2VuZXJhdGVkIENTUyBjbGFzcyBvZiBgbmctRVZFTlRgIGFuZCBgbmctRVZFTlQtYWN0aXZlYCB3aWxsIGJlIGFwcGxpZWRcclxuICogdG8gdGhlIGVsZW1lbnQgZHVyaW5nIHRoZSBhbmltYXRpb24uIE11bHRpcGxlIGV2ZW50cyBjYW4gYmUgcHJvdmlkZWQgd2hlbiBzcGFjZXMgYXJlIHVzZWQgYXMgYSBzZXBhcmF0b3IuIChOb3RlIHRoYXQgdGhpcyB3aWxsIG5vdCBwZXJmb3JtIGFueSBET00gb3BlcmF0aW9uLilcclxuICogKiBgc3RydWN0dXJhbGAgLSBJbmRpY2F0ZXMgdGhhdCB0aGUgYG5nLWAgcHJlZml4IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGV2ZW50IGNsYXNzLiBTZXR0aW5nIHRvIGBmYWxzZWAgb3Igb21pdHRpbmcgd2lsbCB0dXJuIGBuZy1FVkVOVGAgYW5kXHJcbiAqIGBuZy1FVkVOVC1hY3RpdmVgIGluIGBFVkVOVGAgYW5kIGBFVkVOVC1hY3RpdmVgLiBVbnVzZWQgaWYgYGV2ZW50YCBpcyBvbWl0dGVkLlxyXG4gKiAqIGBlYXNpbmdgIC0gVGhlIENTUyBlYXNpbmcgdmFsdWUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gb3Iga2V5ZnJhbWUgYW5pbWF0aW9uIChvciBib3RoKS5cclxuICogKiBgdHJhbnNpdGlvblN0eWxlYCAtIFRoZSByYXcgQ1NTIHRyYW5zaXRpb24gc3R5bGUgdGhhdCB3aWxsIGJlIHVzZWQgKGUuZy4gYDFzIGxpbmVhciBhbGxgKS5cclxuICogKiBga2V5ZnJhbWVTdHlsZWAgLSBUaGUgcmF3IENTUyBrZXlmcmFtZSBhbmltYXRpb24gc3R5bGUgdGhhdCB3aWxsIGJlIHVzZWQgKGUuZy4gYDFzIG15X2FuaW1hdGlvbiBsaW5lYXJgKS5cclxuICogKiBgZnJvbWAgLSBUaGUgc3RhcnRpbmcgQ1NTIHN0eWxlcyAoYSBrZXkvdmFsdWUgb2JqZWN0KSB0aGF0IHdpbGwgYmUgYXBwbGllZCBhdCB0aGUgc3RhcnQgb2YgdGhlIGFuaW1hdGlvbi5cclxuICogKiBgdG9gIC0gVGhlIGVuZGluZyBDU1Mgc3R5bGVzIChhIGtleS92YWx1ZSBvYmplY3QpIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGFjcm9zcyB0aGUgYW5pbWF0aW9uIHZpYSBhIENTUyB0cmFuc2l0aW9uLlxyXG4gKiAqIGBhZGRDbGFzc2AgLSBBIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIENTUyBjbGFzc2VzIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudCBhbmQgc3ByZWFkIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxyXG4gKiAqIGByZW1vdmVDbGFzc2AgLSBBIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIENTUyBjbGFzc2VzIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgYW5kIHNwcmVhZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbi5cclxuICogKiBgZHVyYXRpb25gIC0gQSBudW1iZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB0b3RhbCBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBhbmQvb3Iga2V5ZnJhbWUgKG5vdGUgdGhhdCBhIHZhbHVlIG9mIDEgaXMgMTAwMG1zKS4gSWYgYSB2YWx1ZSBvZiBgMGBcclxuICogaXMgcHJvdmlkZWQgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgYmUgc2tpcHBlZCBlbnRpcmVseS5cclxuICogKiBgZGVsYXlgIC0gQSBudW1iZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB0b3RhbCBkZWxheSBvZiB0aGUgdHJhbnNpdGlvbiBhbmQvb3Iga2V5ZnJhbWUgKG5vdGUgdGhhdCBhIHZhbHVlIG9mIDEgaXMgMTAwMG1zKS4gSWYgYSB2YWx1ZSBvZiBgdHJ1ZWAgaXNcclxuICogdXNlZCB0aGVuIHdoYXRldmVyIGRlbGF5IHZhbHVlIGlzIGRldGVjdGVkIGZyb20gdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgbWlycm9yZWQgb24gdGhlIGVsZW1lbnRzIHN0eWxlcyAoZS5nLiBieSBzZXR0aW5nIGRlbGF5IHRydWUgdGhlbiB0aGUgc3R5bGUgdmFsdWVcclxuICogb2YgdGhlIGVsZW1lbnQgd2lsbCBiZSBgdHJhbnNpdGlvbi1kZWxheTogREVURUNURURfVkFMVUVgKS4gVXNpbmcgYHRydWVgIGlzIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRoZSBDU1MgY2xhc3NlcyBhbmQgaW5saW5lIHN0eWxlcyB0byBhbGwgc2hhcmUgdGhlIHNhbWVcclxuICogQ1NTIGRlbGF5IHZhbHVlLlxyXG4gKiAqIGBzdGFnZ2VyYCAtIEEgbnVtZXJpYyB0aW1lIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgZGVsYXkgYmV0d2VlbiBzdWNjZXNzaXZlbHkgYW5pbWF0ZWQgZWxlbWVudHNcclxuICogKHtAbGluayBuZ0FuaW1hdGUjY3NzLXN0YWdnZXJpbmctYW5pbWF0aW9ucyBDbGljayBoZXJlIHRvIGxlYXJuIGhvdyBDU1MtYmFzZWQgc3RhZ2dlcmluZyB3b3JrcyBpbiBuZ0FuaW1hdGUufSlcclxuICogKiBgc3RhZ2dlckluZGV4YCAtIFRoZSBudW1lcmljIGluZGV4IHJlcHJlc2VudGluZyB0aGUgc3RhZ2dlciBpdGVtIChlLmcuIGEgdmFsdWUgb2YgNSBpcyBlcXVhbCB0byB0aGUgc2l4dGggaXRlbSBpbiB0aGUgc3RhZ2dlcjsgdGhlcmVmb3JlIHdoZW4gYVxyXG4gKiAgIGBzdGFnZ2VyYCBvcHRpb24gdmFsdWUgb2YgYDAuMWAgaXMgdXNlZCB0aGVuIHRoZXJlIHdpbGwgYmUgYSBzdGFnZ2VyIGRlbGF5IG9mIGA2MDBtc2ApXHJcbiAqICogYGFwcGx5Q2xhc3Nlc0Vhcmx5YCAtIFdoZXRoZXIgb3Igbm90IHRoZSBjbGFzc2VzIGJlaW5nIGFkZGVkIG9yIHJlbW92ZWQgd2lsbCBiZSB1c2VkIHdoZW4gZGV0ZWN0aW5nIHRoZSBhbmltYXRpb24uIFRoaXMgaXMgc2V0IGJ5IGAkYW5pbWF0ZWAgd2hlbiBlbnRlci9sZWF2ZS9tb3ZlIGFuaW1hdGlvbnMgYXJlIGZpcmVkIHRvIGVuc3VyZSB0aGF0IHRoZSBDU1MgY2xhc3NlcyBhcmUgcmVzb2x2ZWQgaW4gdGltZS4gKE5vdGUgdGhhdCB0aGlzIHdpbGwgcHJldmVudCBhbnkgdHJhbnNpdGlvbnMgZnJvbSBvY2N1cnJpbmcgb24gdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQgYW5kIHJlbW92ZWQuKVxyXG4gKiAqIGBjbGVhbnVwU3R5bGVzYCAtIFdoZXRoZXIgb3Igbm90IHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kIGB0b2Agc3R5bGVzIHdpbGwgYmUgcmVtb3ZlZCBvbmNlXHJcbiAqICAgIHRoZSBhbmltYXRpb24gaXMgY2xvc2VkLiBUaGlzIGlzIHVzZWZ1bCBmb3Igd2hlbiB0aGUgc3R5bGVzIGFyZSB1c2VkIHB1cmVseSBmb3IgdGhlIHNha2Ugb2ZcclxuICogICAgdGhlIGFuaW1hdGlvbiBhbmQgZG8gbm90IGhhdmUgYSBsYXN0aW5nIHZpc3VhbCBlZmZlY3Qgb24gdGhlIGVsZW1lbnQgKGUuZy4gYSBjb2xsYXBzZSBhbmQgb3BlbiBhbmltYXRpb24pLlxyXG4gKiAgICBCeSBkZWZhdWx0IHRoaXMgdmFsdWUgaXMgc2V0IHRvIGBmYWxzZWAuXHJcbiAqXHJcbiAqIEByZXR1cm4ge29iamVjdH0gYW4gb2JqZWN0IHdpdGggc3RhcnQgYW5kIGVuZCBtZXRob2RzIGFuZCBkZXRhaWxzIGFib3V0IHRoZSBhbmltYXRpb24uXHJcbiAqXHJcbiAqICogYHN0YXJ0YCAtIFRoZSBtZXRob2QgdG8gc3RhcnQgdGhlIGFuaW1hdGlvbi4gVGhpcyB3aWxsIHJldHVybiBhIGBQcm9taXNlYCB3aGVuIGNhbGxlZC5cclxuICogKiBgZW5kYCAtIFRoaXMgbWV0aG9kIHdpbGwgY2FuY2VsIHRoZSBhbmltYXRpb24gYW5kIHJlbW92ZSBhbGwgYXBwbGllZCBDU1MgY2xhc3NlcyBhbmQgc3R5bGVzLlxyXG4gKi9cclxudmFyIE9ORV9TRUNPTkQgPSAxMDAwO1xyXG52YXIgQkFTRV9URU4gPSAxMDtcclxuXHJcbnZhciBFTEFQU0VEX1RJTUVfTUFYX0RFQ0lNQUxfUExBQ0VTID0gMztcclxudmFyIENMT1NJTkdfVElNRV9CVUZGRVIgPSAxLjU7XHJcblxyXG52YXIgREVURUNUX0NTU19QUk9QRVJUSUVTID0ge1xyXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogICAgICBUUkFOU0lUSU9OX0RVUkFUSU9OX1BST1AsXHJcbiAgdHJhbnNpdGlvbkRlbGF5OiAgICAgICAgIFRSQU5TSVRJT05fREVMQVlfUFJPUCxcclxuICB0cmFuc2l0aW9uUHJvcGVydHk6ICAgICAgVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZLFxyXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiAgICAgICBBTklNQVRJT05fRFVSQVRJT05fUFJPUCxcclxuICBhbmltYXRpb25EZWxheTogICAgICAgICAgQU5JTUFUSU9OX0RFTEFZX1BST1AsXHJcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IEFOSU1BVElPTl9QUk9QICsgQU5JTUFUSU9OX0lURVJBVElPTl9DT1VOVF9LRVlcclxufTtcclxuXHJcbnZhciBERVRFQ1RfU1RBR0dFUl9DU1NfUFJPUEVSVElFUyA9IHtcclxuICB0cmFuc2l0aW9uRHVyYXRpb246ICAgICAgVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QLFxyXG4gIHRyYW5zaXRpb25EZWxheTogICAgICAgICBUUkFOU0lUSU9OX0RFTEFZX1BST1AsXHJcbiAgYW5pbWF0aW9uRHVyYXRpb246ICAgICAgIEFOSU1BVElPTl9EVVJBVElPTl9QUk9QLFxyXG4gIGFuaW1hdGlvbkRlbGF5OiAgICAgICAgICBBTklNQVRJT05fREVMQVlfUFJPUFxyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Q3NzS2V5ZnJhbWVEdXJhdGlvblN0eWxlKGR1cmF0aW9uKSB7XHJcbiAgcmV0dXJuIFtBTklNQVRJT05fRFVSQVRJT05fUFJPUCwgZHVyYXRpb24gKyAncyddO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDc3NEZWxheVN0eWxlKGRlbGF5LCBpc0tleWZyYW1lQW5pbWF0aW9uKSB7XHJcbiAgdmFyIHByb3AgPSBpc0tleWZyYW1lQW5pbWF0aW9uID8gQU5JTUFUSU9OX0RFTEFZX1BST1AgOiBUUkFOU0lUSU9OX0RFTEFZX1BST1A7XHJcbiAgcmV0dXJuIFtwcm9wLCBkZWxheSArICdzJ107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgZWxlbWVudCwgcHJvcGVydGllcykge1xyXG4gIHZhciBzdHlsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gIHZhciBkZXRlY3RlZFN0eWxlcyA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB8fCB7fTtcclxuICBmb3JFYWNoKHByb3BlcnRpZXMsIGZ1bmN0aW9uKGZvcm1hbFN0eWxlTmFtZSwgYWN0dWFsU3R5bGVOYW1lKSB7XHJcbiAgICB2YXIgdmFsID0gZGV0ZWN0ZWRTdHlsZXNbZm9ybWFsU3R5bGVOYW1lXTtcclxuICAgIGlmICh2YWwpIHtcclxuICAgICAgdmFyIGMgPSB2YWwuY2hhckF0KDApO1xyXG5cclxuICAgICAgLy8gb25seSBudW1lcmljYWwtYmFzZWQgdmFsdWVzIGhhdmUgYSBuZWdhdGl2ZSBzaWduIG9yIGRpZ2l0IGFzIHRoZSBmaXJzdCB2YWx1ZVxyXG4gICAgICBpZiAoYyA9PT0gJy0nIHx8IGMgPT09ICcrJyB8fCBjID49IDApIHtcclxuICAgICAgICB2YWwgPSBwYXJzZU1heFRpbWUodmFsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gYnkgc2V0dGluZyB0aGlzIHRvIG51bGwgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGRlbGF5IGlzIG5vdCBzZXQgb3IgaXMgc2V0IGRpcmVjdGx5IGFzIDBcclxuICAgICAgLy8gdGhlbiB3ZSBjYW4gc3RpbGwgYWxsb3cgZm9yIG5lZ2F0aXZlIHZhbHVlcyB0byBiZSB1c2VkIGxhdGVyIG9uIGFuZCBub3QgbWlzdGFrZSB0aGlzXHJcbiAgICAgIC8vIHZhbHVlIGZvciBiZWluZyBncmVhdGVyIHRoYW4gYW55IG90aGVyIG5lZ2F0aXZlIHZhbHVlLlxyXG4gICAgICBpZiAodmFsID09PSAwKSB7XHJcbiAgICAgICAgdmFsID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBzdHlsZXNbYWN0dWFsU3R5bGVOYW1lXSA9IHZhbDtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHN0eWxlcztcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VNYXhUaW1lKHN0cikge1xyXG4gIHZhciBtYXhWYWx1ZSA9IDA7XHJcbiAgdmFyIHZhbHVlcyA9IHN0ci5zcGxpdCgvXFxzKixcXHMqLyk7XHJcbiAgZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAvLyBpdCdzIGFsd2F5cyBzYWZlIHRvIGNvbnNpZGVyIG9ubHkgc2Vjb25kIHZhbHVlcyBhbmQgb21pdCBgbXNgIHZhbHVlcyBzaW5jZVxyXG4gICAgLy8gZ2V0Q29tcHV0ZWRTdHlsZSB3aWxsIGFsd2F5cyBoYW5kbGUgdGhlIGNvbnZlcnNpb24gZm9yIHVzXHJcbiAgICBpZiAodmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpID09ICdzJykge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YWx1ZS5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcclxuICAgIG1heFZhbHVlID0gbWF4VmFsdWUgPyBNYXRoLm1heCh2YWx1ZSwgbWF4VmFsdWUpIDogdmFsdWU7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG1heFZhbHVlO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cnV0aHlUaW1pbmdWYWx1ZSh2YWwpIHtcclxuICByZXR1cm4gdmFsID09PSAwIHx8IHZhbCAhPSBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDc3NUcmFuc2l0aW9uRHVyYXRpb25TdHlsZShkdXJhdGlvbiwgYXBwbHlPbmx5RHVyYXRpb24pIHtcclxuICB2YXIgc3R5bGUgPSBUUkFOU0lUSU9OX1BST1A7XHJcbiAgdmFyIHZhbHVlID0gZHVyYXRpb24gKyAncyc7XHJcbiAgaWYgKGFwcGx5T25seUR1cmF0aW9uKSB7XHJcbiAgICBzdHlsZSArPSBEVVJBVElPTl9LRVk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhbHVlICs9ICcgbGluZWFyIGFsbCc7XHJcbiAgfVxyXG4gIHJldHVybiBbc3R5bGUsIHZhbHVlXTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCgpIHtcclxuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gIHJldHVybiB7XHJcbiAgICBmbHVzaDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIH0sXHJcblxyXG4gICAgY291bnQ6IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xyXG4gICAgICByZXR1cm4gZW50cnkgPyBlbnRyeS50b3RhbCA6IDA7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgIHZhciBlbnRyeSA9IGNhY2hlW2tleV07XHJcbiAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgIGlmICghY2FjaGVba2V5XSkge1xyXG4gICAgICAgIGNhY2hlW2tleV0gPSB7IHRvdGFsOiAxLCB2YWx1ZTogdmFsdWUgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjYWNoZVtrZXldLnRvdGFsKys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG4vLyB3ZSBkbyBub3QgcmVhc3NpZ24gYW4gYWxyZWFkeSBwcmVzZW50IHN0eWxlIHZhbHVlIHNpbmNlXHJcbi8vIGlmIHdlIGRldGVjdCB0aGUgc3R5bGUgcHJvcGVydHkgdmFsdWUgYWdhaW4gd2UgbWF5IGJlXHJcbi8vIGRldGVjdGluZyBzdHlsZXMgdGhhdCB3ZXJlIGFkZGVkIHZpYSB0aGUgYGZyb21gIHN0eWxlcy5cclxuLy8gV2UgbWFrZSB1c2Ugb2YgYGlzRGVmaW5lZGAgaGVyZSBzaW5jZSBhbiBlbXB0eSBzdHJpbmdcclxuLy8gb3IgbnVsbCB2YWx1ZSAod2hpY2ggaXMgd2hhdCBnZXRQcm9wZXJ0eVZhbHVlIHdpbGwgcmV0dXJuXHJcbi8vIGZvciBhIG5vbi1leGlzdGluZyBzdHlsZSkgd2lsbCBzdGlsbCBiZSBtYXJrZWQgYXMgYSB2YWxpZFxyXG4vLyB2YWx1ZSBmb3IgdGhlIHN0eWxlIChhIGZhbHN5IHZhbHVlIGltcGxpZXMgdGhhdCB0aGUgc3R5bGVcclxuLy8gaXMgdG8gYmUgcmVtb3ZlZCBhdCB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb24pLiBJZiB3ZSBoYWQgYSBzaW1wbGVcclxuLy8gXCJPUlwiIHN0YXRlbWVudCB0aGVuIGl0IHdvdWxkIG5vdCBiZSBlbm91Z2ggdG8gY2F0Y2ggdGhhdC5cclxuZnVuY3Rpb24gcmVnaXN0ZXJSZXN0b3JhYmxlU3R5bGVzKGJhY2t1cCwgbm9kZSwgcHJvcGVydGllcykge1xyXG4gIGZvckVhY2gocHJvcGVydGllcywgZnVuY3Rpb24ocHJvcCkge1xyXG4gICAgYmFja3VwW3Byb3BdID0gaXNEZWZpbmVkKGJhY2t1cFtwcm9wXSlcclxuICAgICAgICA/IGJhY2t1cFtwcm9wXVxyXG4gICAgICAgIDogbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xyXG4gIH0pO1xyXG59XHJcblxyXG52YXIgJEFuaW1hdGVDc3NQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcclxuICB2YXIgZ2NzTG9va3VwID0gY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCgpO1xyXG4gIHZhciBnY3NTdGFnZ2VyTG9va3VwID0gY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCgpO1xyXG5cclxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJCRqcUxpdGUnLCAnJCRBbmltYXRlUnVubmVyJywgJyR0aW1lb3V0JyxcclxuICAgICAgICAgICAgICAgJyQkZm9yY2VSZWZsb3cnLCAnJHNuaWZmZXInLCAnJCRyQUZTY2hlZHVsZXInLCAnJCRhbmltYXRlUXVldWUnLFxyXG4gICAgICAgZnVuY3Rpb24oJHdpbmRvdywgICAkJGpxTGl0ZSwgICAkJEFuaW1hdGVSdW5uZXIsICAgJHRpbWVvdXQsXHJcbiAgICAgICAgICAgICAgICAkJGZvcmNlUmVmbG93LCAgICRzbmlmZmVyLCAgICQkckFGU2NoZWR1bGVyLCAkJGFuaW1hdGVRdWV1ZSkge1xyXG5cclxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcclxuXHJcbiAgICB2YXIgcGFyZW50Q291bnRlciA9IDA7XHJcbiAgICBmdW5jdGlvbiBnY3NIYXNoRm4obm9kZSwgZXh0cmFDbGFzc2VzKSB7XHJcbiAgICAgIHZhciBLRVkgPSBcIiQkbmdBbmltYXRlUGFyZW50S2V5XCI7XHJcbiAgICAgIHZhciBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICB2YXIgcGFyZW50SUQgPSBwYXJlbnROb2RlW0tFWV0gfHwgKHBhcmVudE5vZGVbS0VZXSA9ICsrcGFyZW50Q291bnRlcik7XHJcbiAgICAgIHJldHVybiBwYXJlbnRJRCArICctJyArIG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpICsgJy0nICsgZXh0cmFDbGFzc2VzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVDYWNoZWRDc3NTdHlsZXMobm9kZSwgY2xhc3NOYW1lLCBjYWNoZUtleSwgcHJvcGVydGllcykge1xyXG4gICAgICB2YXIgdGltaW5ncyA9IGdjc0xvb2t1cC5nZXQoY2FjaGVLZXkpO1xyXG5cclxuICAgICAgaWYgKCF0aW1pbmdzKSB7XHJcbiAgICAgICAgdGltaW5ncyA9IGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgbm9kZSwgcHJvcGVydGllcyk7XHJcbiAgICAgICAgaWYgKHRpbWluZ3MuYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgPT09ICdpbmZpbml0ZScpIHtcclxuICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gd2Uga2VlcCBwdXR0aW5nIHRoaXMgaW4gbXVsdGlwbGUgdGltZXMgZXZlbiB0aG91Z2ggdGhlIHZhbHVlIGFuZCB0aGUgY2FjaGVLZXkgYXJlIHRoZSBzYW1lXHJcbiAgICAgIC8vIGJlY2F1c2Ugd2UncmUga2VlcGluZyBhbiBpbnRlcm5hbCB0YWxseSBvZiBob3cgbWFueSBkdXBsaWNhdGUgYW5pbWF0aW9ucyBhcmUgZGV0ZWN0ZWQuXHJcbiAgICAgIGdjc0xvb2t1cC5wdXQoY2FjaGVLZXksIHRpbWluZ3MpO1xyXG4gICAgICByZXR1cm4gdGltaW5ncztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21wdXRlQ2FjaGVkQ3NzU3RhZ2dlclN0eWxlcyhub2RlLCBjbGFzc05hbWUsIGNhY2hlS2V5LCBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHZhciBzdGFnZ2VyO1xyXG5cclxuICAgICAgLy8gaWYgd2UgaGF2ZSBvbmUgb3IgbW9yZSBleGlzdGluZyBtYXRjaGVzIG9mIG1hdGNoaW5nIGVsZW1lbnRzXHJcbiAgICAgIC8vIGNvbnRhaW5pbmcgdGhlIHNhbWUgcGFyZW50ICsgQ1NTIHN0eWxlcyAod2hpY2ggaXMgaG93IGNhY2hlS2V5IHdvcmtzKVxyXG4gICAgICAvLyB0aGVuIHN0YWdnZXJpbmcgaXMgcG9zc2libGVcclxuICAgICAgaWYgKGdjc0xvb2t1cC5jb3VudChjYWNoZUtleSkgPiAwKSB7XHJcbiAgICAgICAgc3RhZ2dlciA9IGdjc1N0YWdnZXJMb29rdXAuZ2V0KGNhY2hlS2V5KTtcclxuXHJcbiAgICAgICAgaWYgKCFzdGFnZ2VyKSB7XHJcbiAgICAgICAgICB2YXIgc3RhZ2dlckNsYXNzTmFtZSA9IHBlbmRDbGFzc2VzKGNsYXNzTmFtZSwgJy1zdGFnZ2VyJyk7XHJcblxyXG4gICAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3Mobm9kZSwgc3RhZ2dlckNsYXNzTmFtZSk7XHJcblxyXG4gICAgICAgICAgc3RhZ2dlciA9IGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgbm9kZSwgcHJvcGVydGllcyk7XHJcblxyXG4gICAgICAgICAgLy8gZm9yY2UgdGhlIGNvbnZlcnNpb24gb2YgYSBudWxsIHZhbHVlIHRvIHplcm8gaW5jYXNlIG5vdCBzZXRcclxuICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRHVyYXRpb24gPSBNYXRoLm1heChzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uLCAwKTtcclxuICAgICAgICAgIHN0YWdnZXIudHJhbnNpdGlvbkR1cmF0aW9uID0gTWF0aC5tYXgoc3RhZ2dlci50cmFuc2l0aW9uRHVyYXRpb24sIDApO1xyXG5cclxuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKG5vZGUsIHN0YWdnZXJDbGFzc05hbWUpO1xyXG5cclxuICAgICAgICAgIGdjc1N0YWdnZXJMb29rdXAucHV0KGNhY2hlS2V5LCBzdGFnZ2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzdGFnZ2VyIHx8IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjYW5jZWxMYXN0UkFGUmVxdWVzdDtcclxuICAgIHZhciByYWZXYWl0UXVldWUgPSBbXTtcclxuICAgIGZ1bmN0aW9uIHdhaXRVbnRpbFF1aWV0KGNhbGxiYWNrKSB7XHJcbiAgICAgIHJhZldhaXRRdWV1ZS5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgJCRyQUZTY2hlZHVsZXIud2FpdFVudGlsUXVpZXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZ2NzTG9va3VwLmZsdXNoKCk7XHJcbiAgICAgICAgZ2NzU3RhZ2dlckxvb2t1cC5mbHVzaCgpO1xyXG5cclxuICAgICAgICAvLyBETyBOT1QgUkVNT1ZFIFRISVMgTElORSBPUiBSRUZBQ1RPUiBPVVQgVEhFIGBwYWdlV2lkdGhgIHZhcmlhYmxlLlxyXG4gICAgICAgIC8vIFBMRUFTRSBFWEFNSU5FIFRIRSBgJCRmb3JjZVJlZmxvd2Agc2VydmljZSB0byB1bmRlcnN0YW5kIHdoeS5cclxuICAgICAgICB2YXIgcGFnZVdpZHRoID0gJCRmb3JjZVJlZmxvdygpO1xyXG5cclxuICAgICAgICAvLyB3ZSB1c2UgYSBmb3IgbG9vcCB0byBlbnN1cmUgdGhhdCBpZiB0aGUgcXVldWUgaXMgY2hhbmdlZFxyXG4gICAgICAgIC8vIGR1cmluZyB0aGlzIGxvb3BpbmcgdGhlbiBpdCB3aWxsIGNvbnNpZGVyIG5ldyByZXF1ZXN0c1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFmV2FpdFF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICByYWZXYWl0UXVldWVbaV0ocGFnZVdpZHRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFmV2FpdFF1ZXVlLmxlbmd0aCA9IDA7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVUaW1pbmdzKG5vZGUsIGNsYXNzTmFtZSwgY2FjaGVLZXkpIHtcclxuICAgICAgdmFyIHRpbWluZ3MgPSBjb21wdXRlQ2FjaGVkQ3NzU3R5bGVzKG5vZGUsIGNsYXNzTmFtZSwgY2FjaGVLZXksIERFVEVDVF9DU1NfUFJPUEVSVElFUyk7XHJcbiAgICAgIHZhciBhRCA9IHRpbWluZ3MuYW5pbWF0aW9uRGVsYXk7XHJcbiAgICAgIHZhciB0RCA9IHRpbWluZ3MudHJhbnNpdGlvbkRlbGF5O1xyXG4gICAgICB0aW1pbmdzLm1heERlbGF5ID0gYUQgJiYgdERcclxuICAgICAgICAgID8gTWF0aC5tYXgoYUQsIHREKVxyXG4gICAgICAgICAgOiAoYUQgfHwgdEQpO1xyXG4gICAgICB0aW1pbmdzLm1heER1cmF0aW9uID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICB0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uICogdGltaW5ncy5hbmltYXRpb25JdGVyYXRpb25Db3VudCxcclxuICAgICAgICAgIHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uKTtcclxuXHJcbiAgICAgIHJldHVybiB0aW1pbmdzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiBpbml0KGVsZW1lbnQsIGluaXRpYWxPcHRpb25zKSB7XHJcbiAgICAgIC8vIGFsbCBvZiB0aGUgYW5pbWF0aW9uIGZ1bmN0aW9ucyBzaG91bGQgY3JlYXRlXHJcbiAgICAgIC8vIGEgY29weSBvZiB0aGUgb3B0aW9ucyBkYXRhLCBob3dldmVyLCBpZiBhXHJcbiAgICAgIC8vIHBhcmVudCBzZXJ2aWNlIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb3B5IHRoZW5cclxuICAgICAgLy8gd2Ugc2hvdWxkIHN0aWNrIHRvIHVzaW5nIHRoYXRcclxuICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucyB8fCB7fTtcclxuICAgICAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcclxuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMoY29weShvcHRpb25zKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciByZXN0b3JlU3R5bGVzID0ge307XHJcbiAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcclxuICAgICAgaWYgKCFub2RlXHJcbiAgICAgICAgICB8fCAhbm9kZS5wYXJlbnROb2RlXHJcbiAgICAgICAgICB8fCAhJCRhbmltYXRlUXVldWUuZW5hYmxlZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB0ZW1wb3JhcnlTdHlsZXMgPSBbXTtcclxuICAgICAgdmFyIGNsYXNzZXMgPSBlbGVtZW50LmF0dHIoJ2NsYXNzJyk7XHJcbiAgICAgIHZhciBzdHlsZXMgPSBwYWNrYWdlU3R5bGVzKG9wdGlvbnMpO1xyXG4gICAgICB2YXIgYW5pbWF0aW9uQ2xvc2VkO1xyXG4gICAgICB2YXIgYW5pbWF0aW9uUGF1c2VkO1xyXG4gICAgICB2YXIgYW5pbWF0aW9uQ29tcGxldGVkO1xyXG4gICAgICB2YXIgcnVubmVyO1xyXG4gICAgICB2YXIgcnVubmVySG9zdDtcclxuICAgICAgdmFyIG1heERlbGF5O1xyXG4gICAgICB2YXIgbWF4RGVsYXlUaW1lO1xyXG4gICAgICB2YXIgbWF4RHVyYXRpb247XHJcbiAgICAgIHZhciBtYXhEdXJhdGlvblRpbWU7XHJcbiAgICAgIHZhciBzdGFydFRpbWU7XHJcbiAgICAgIHZhciBldmVudHMgPSBbXTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uID09PSAwIHx8ICghJHNuaWZmZXIuYW5pbWF0aW9ucyAmJiAhJHNuaWZmZXIudHJhbnNpdGlvbnMpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBtZXRob2QgPSBvcHRpb25zLmV2ZW50ICYmIGlzQXJyYXkob3B0aW9ucy5ldmVudClcclxuICAgICAgICAgICAgPyBvcHRpb25zLmV2ZW50LmpvaW4oJyAnKVxyXG4gICAgICAgICAgICA6IG9wdGlvbnMuZXZlbnQ7XHJcblxyXG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gbWV0aG9kICYmIG9wdGlvbnMuc3RydWN0dXJhbDtcclxuICAgICAgdmFyIHN0cnVjdHVyYWxDbGFzc05hbWUgPSAnJztcclxuICAgICAgdmFyIGFkZFJlbW92ZUNsYXNzTmFtZSA9ICcnO1xyXG5cclxuICAgICAgaWYgKGlzU3RydWN0dXJhbCkge1xyXG4gICAgICAgIHN0cnVjdHVyYWxDbGFzc05hbWUgPSBwZW5kQ2xhc3NlcyhtZXRob2QsIEVWRU5UX0NMQVNTX1BSRUZJWCwgdHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XHJcbiAgICAgICAgc3RydWN0dXJhbENsYXNzTmFtZSA9IG1ldGhvZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcclxuICAgICAgICBhZGRSZW1vdmVDbGFzc05hbWUgKz0gcGVuZENsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgQUREX0NMQVNTX1NVRkZJWCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XHJcbiAgICAgICAgaWYgKGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGgpIHtcclxuICAgICAgICAgIGFkZFJlbW92ZUNsYXNzTmFtZSArPSAnICc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZFJlbW92ZUNsYXNzTmFtZSArPSBwZW5kQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBSRU1PVkVfQ0xBU1NfU1VGRklYKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gdGhlcmUgbWF5IGJlIGEgc2l0dWF0aW9uIHdoZXJlIGEgc3RydWN0dXJhbCBhbmltYXRpb24gaXMgY29tYmluZWQgdG9nZXRoZXJcclxuICAgICAgLy8gd2l0aCBDU1MgY2xhc3NlcyB0aGF0IG5lZWQgdG8gcmVzb2x2ZSBiZWZvcmUgdGhlIGFuaW1hdGlvbiBpcyBjb21wdXRlZC5cclxuICAgICAgLy8gSG93ZXZlciB0aGlzIG1lYW5zIHRoYXQgdGhlcmUgaXMgbm8gZXhwbGljaXQgQ1NTIGNvZGUgdG8gYmxvY2sgdGhlIGFuaW1hdGlvblxyXG4gICAgICAvLyBmcm9tIGhhcHBlbmluZyAoYnkgc2V0dGluZyAwcyBub25lIGluIHRoZSBjbGFzcyBuYW1lKS4gSWYgdGhpcyBpcyB0aGUgY2FzZVxyXG4gICAgICAvLyB3ZSBuZWVkIHRvIGFwcGx5IHRoZSBjbGFzc2VzIGJlZm9yZSB0aGUgZmlyc3QgckFGIHNvIHdlIGtub3cgdG8gY29udGludWUgaWZcclxuICAgICAgLy8gdGhlcmUgYWN0dWFsbHkgaXMgYSBkZXRlY3RlZCB0cmFuc2l0aW9uIG9yIGtleWZyYW1lIGFuaW1hdGlvblxyXG4gICAgICBpZiAob3B0aW9ucy5hcHBseUNsYXNzZXNFYXJseSAmJiBhZGRSZW1vdmVDbGFzc05hbWUubGVuZ3RoKSB7XHJcbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcHJlcGFyYXRpb25DbGFzc2VzID0gW3N0cnVjdHVyYWxDbGFzc05hbWUsIGFkZFJlbW92ZUNsYXNzTmFtZV0uam9pbignICcpLnRyaW0oKTtcclxuICAgICAgdmFyIGZ1bGxDbGFzc05hbWUgPSBjbGFzc2VzICsgJyAnICsgcHJlcGFyYXRpb25DbGFzc2VzO1xyXG4gICAgICB2YXIgYWN0aXZlQ2xhc3NlcyA9IHBlbmRDbGFzc2VzKHByZXBhcmF0aW9uQ2xhc3NlcywgQUNUSVZFX0NMQVNTX1NVRkZJWCk7XHJcbiAgICAgIHZhciBoYXNUb1N0eWxlcyA9IHN0eWxlcy50byAmJiBPYmplY3Qua2V5cyhzdHlsZXMudG8pLmxlbmd0aCA+IDA7XHJcbiAgICAgIHZhciBjb250YWluc0tleWZyYW1lQW5pbWF0aW9uID0gKG9wdGlvbnMua2V5ZnJhbWVTdHlsZSB8fCAnJykubGVuZ3RoID4gMDtcclxuXHJcbiAgICAgIC8vIHRoZXJlIGlzIG5vIHdheSB3ZSBjYW4gdHJpZ2dlciBhbiBhbmltYXRpb24gaWYgbm8gc3R5bGVzIGFuZFxyXG4gICAgICAvLyBubyBjbGFzc2VzIGFyZSBiZWluZyBhcHBsaWVkIHdoaWNoIHdvdWxkIHRoZW4gdHJpZ2dlciBhIHRyYW5zaXRpb24sXHJcbiAgICAgIC8vIHVubGVzcyB0aGVyZSBhIGlzIHJhdyBrZXlmcmFtZSB2YWx1ZSB0aGF0IGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXHJcbiAgICAgIGlmICghY29udGFpbnNLZXlmcmFtZUFuaW1hdGlvblxyXG4gICAgICAgICAgICYmICFoYXNUb1N0eWxlc1xyXG4gICAgICAgICAgICYmICFwcmVwYXJhdGlvbkNsYXNzZXMpIHtcclxuICAgICAgICByZXR1cm4gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGNhY2hlS2V5LCBzdGFnZ2VyO1xyXG4gICAgICBpZiAob3B0aW9ucy5zdGFnZ2VyID4gMCkge1xyXG4gICAgICAgIHZhciBzdGFnZ2VyVmFsID0gcGFyc2VGbG9hdChvcHRpb25zLnN0YWdnZXIpO1xyXG4gICAgICAgIHN0YWdnZXIgPSB7XHJcbiAgICAgICAgICB0cmFuc2l0aW9uRGVsYXk6IHN0YWdnZXJWYWwsXHJcbiAgICAgICAgICBhbmltYXRpb25EZWxheTogc3RhZ2dlclZhbCxcclxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMCxcclxuICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAwXHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjYWNoZUtleSA9IGdjc0hhc2hGbihub2RlLCBmdWxsQ2xhc3NOYW1lKTtcclxuICAgICAgICBzdGFnZ2VyID0gY29tcHV0ZUNhY2hlZENzc1N0YWdnZXJTdHlsZXMobm9kZSwgcHJlcGFyYXRpb25DbGFzc2VzLCBjYWNoZUtleSwgREVURUNUX1NUQUdHRVJfQ1NTX1BST1BFUlRJRVMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIW9wdGlvbnMuJCRza2lwUHJlcGFyYXRpb25DbGFzc2VzKSB7XHJcbiAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgcHJlcGFyYXRpb25DbGFzc2VzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGFwcGx5T25seUR1cmF0aW9uO1xyXG5cclxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvblN0eWxlKSB7XHJcbiAgICAgICAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IFtUUkFOU0lUSU9OX1BST1AsIG9wdGlvbnMudHJhbnNpdGlvblN0eWxlXTtcclxuICAgICAgICBhcHBseUlubGluZVN0eWxlKG5vZGUsIHRyYW5zaXRpb25TdHlsZSk7XHJcbiAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2godHJhbnNpdGlvblN0eWxlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuZHVyYXRpb24gPj0gMCkge1xyXG4gICAgICAgIGFwcGx5T25seUR1cmF0aW9uID0gbm9kZS5zdHlsZVtUUkFOU0lUSU9OX1BST1BdLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgdmFyIGR1cmF0aW9uU3R5bGUgPSBnZXRDc3NUcmFuc2l0aW9uRHVyYXRpb25TdHlsZShvcHRpb25zLmR1cmF0aW9uLCBhcHBseU9ubHlEdXJhdGlvbik7XHJcblxyXG4gICAgICAgIC8vIHdlIHNldCB0aGUgZHVyYXRpb24gc28gdGhhdCBpdCB3aWxsIGJlIHBpY2tlZCB1cCBieSBnZXRDb21wdXRlZFN0eWxlIGxhdGVyXHJcbiAgICAgICAgYXBwbHlJbmxpbmVTdHlsZShub2RlLCBkdXJhdGlvblN0eWxlKTtcclxuICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChkdXJhdGlvblN0eWxlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMua2V5ZnJhbWVTdHlsZSkge1xyXG4gICAgICAgIHZhciBrZXlmcmFtZVN0eWxlID0gW0FOSU1BVElPTl9QUk9QLCBvcHRpb25zLmtleWZyYW1lU3R5bGVdO1xyXG4gICAgICAgIGFwcGx5SW5saW5lU3R5bGUobm9kZSwga2V5ZnJhbWVTdHlsZSk7XHJcbiAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goa2V5ZnJhbWVTdHlsZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBpdGVtSW5kZXggPSBzdGFnZ2VyXHJcbiAgICAgICAgICA/IG9wdGlvbnMuc3RhZ2dlckluZGV4ID49IDBcclxuICAgICAgICAgICAgICA/IG9wdGlvbnMuc3RhZ2dlckluZGV4XHJcbiAgICAgICAgICAgICAgOiBnY3NMb29rdXAuY291bnQoY2FjaGVLZXkpXHJcbiAgICAgICAgICA6IDA7XHJcblxyXG4gICAgICB2YXIgaXNGaXJzdCA9IGl0ZW1JbmRleCA9PT0gMDtcclxuXHJcbiAgICAgIC8vIHRoaXMgaXMgYSBwcmUtZW1wdGl2ZSB3YXkgb2YgZm9yY2luZyB0aGUgc2V0dXAgY2xhc3NlcyB0byBiZSBhZGRlZCBhbmQgYXBwbGllZCBJTlNUQU5UTFlcclxuICAgICAgLy8gd2l0aG91dCBjYXVzaW5nIGFueSBjb21iaW5hdGlvbiBvZiB0cmFuc2l0aW9ucyB0byBraWNrIGluLiBCeSBhZGRpbmcgYSBuZWdhdGl2ZSBkZWxheSB2YWx1ZVxyXG4gICAgICAvLyBpdCBmb3JjZXMgdGhlIHNldHVwIGNsYXNzJyB0cmFuc2l0aW9uIHRvIGVuZCBpbW1lZGlhdGVseS4gV2UgbGF0ZXIgdGhlbiByZW1vdmUgdGhlIG5lZ2F0aXZlXHJcbiAgICAgIC8vIHRyYW5zaXRpb24gZGVsYXkgdG8gYWxsb3cgZm9yIHRoZSB0cmFuc2l0aW9uIHRvIG5hdHVyYWxseSBkbyBpdCdzIHRoaW5nLiBUaGUgYmVhdXR5IGhlcmUgaXNcclxuICAgICAgLy8gdGhhdCBpZiB0aGVyZSBpcyBubyB0cmFuc2l0aW9uIGRlZmluZWQgdGhlbiBub3RoaW5nIHdpbGwgaGFwcGVuIGFuZCB0aGlzIHdpbGwgYWxzbyBhbGxvd1xyXG4gICAgICAvLyBvdGhlciB0cmFuc2l0aW9ucyB0byBiZSBzdGFja2VkIG9uIHRvcCBvZiBlYWNoIG90aGVyIHdpdGhvdXQgYW55IGNob3BwaW5nIHRoZW0gb3V0LlxyXG4gICAgICBpZiAoaXNGaXJzdCAmJiAhb3B0aW9ucy5za2lwQmxvY2tpbmcpIHtcclxuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIFNBRkVfRkFTVF9GT1JXQVJEX0RVUkFUSU9OX1ZBTFVFKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRpbWluZ3MgPSBjb21wdXRlVGltaW5ncyhub2RlLCBmdWxsQ2xhc3NOYW1lLCBjYWNoZUtleSk7XHJcbiAgICAgIHZhciByZWxhdGl2ZURlbGF5ID0gdGltaW5ncy5tYXhEZWxheTtcclxuICAgICAgbWF4RGVsYXkgPSBNYXRoLm1heChyZWxhdGl2ZURlbGF5LCAwKTtcclxuICAgICAgbWF4RHVyYXRpb24gPSB0aW1pbmdzLm1heER1cmF0aW9uO1xyXG5cclxuICAgICAgdmFyIGZsYWdzID0ge307XHJcbiAgICAgIGZsYWdzLmhhc1RyYW5zaXRpb25zICAgICAgICAgID0gdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPiAwO1xyXG4gICAgICBmbGFncy5oYXNBbmltYXRpb25zICAgICAgICAgICA9IHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPiAwO1xyXG4gICAgICBmbGFncy5oYXNUcmFuc2l0aW9uQWxsICAgICAgICA9IGZsYWdzLmhhc1RyYW5zaXRpb25zICYmIHRpbWluZ3MudHJhbnNpdGlvblByb3BlcnR5ID09ICdhbGwnO1xyXG4gICAgICBmbGFncy5hcHBseVRyYW5zaXRpb25EdXJhdGlvbiA9IGhhc1RvU3R5bGVzICYmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmbGFncy5oYXNUcmFuc2l0aW9ucyAmJiAhZmxhZ3MuaGFzVHJhbnNpdGlvbkFsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAoZmxhZ3MuaGFzQW5pbWF0aW9ucyAmJiAhZmxhZ3MuaGFzVHJhbnNpdGlvbnMpKTtcclxuICAgICAgZmxhZ3MuYXBwbHlBbmltYXRpb25EdXJhdGlvbiAgPSBvcHRpb25zLmR1cmF0aW9uICYmIGZsYWdzLmhhc0FuaW1hdGlvbnM7XHJcbiAgICAgIGZsYWdzLmFwcGx5VHJhbnNpdGlvbkRlbGF5ICAgID0gdHJ1dGh5VGltaW5nVmFsdWUob3B0aW9ucy5kZWxheSkgJiYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIHx8IGZsYWdzLmhhc1RyYW5zaXRpb25zKTtcclxuICAgICAgZmxhZ3MuYXBwbHlBbmltYXRpb25EZWxheSAgICAgPSB0cnV0aHlUaW1pbmdWYWx1ZShvcHRpb25zLmRlbGF5KSAmJiBmbGFncy5oYXNBbmltYXRpb25zO1xyXG4gICAgICBmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcyA9IGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgaWYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIHx8IGZsYWdzLmFwcGx5QW5pbWF0aW9uRHVyYXRpb24pIHtcclxuICAgICAgICBtYXhEdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gPyBwYXJzZUZsb2F0KG9wdGlvbnMuZHVyYXRpb24pIDogbWF4RHVyYXRpb247XHJcblxyXG4gICAgICAgIGlmIChmbGFncy5hcHBseVRyYW5zaXRpb25EdXJhdGlvbikge1xyXG4gICAgICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbnMgPSB0cnVlO1xyXG4gICAgICAgICAgdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPSBtYXhEdXJhdGlvbjtcclxuICAgICAgICAgIGFwcGx5T25seUR1cmF0aW9uID0gbm9kZS5zdHlsZVtUUkFOU0lUSU9OX1BST1AgKyBQUk9QRVJUWV9LRVldLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChnZXRDc3NUcmFuc2l0aW9uRHVyYXRpb25TdHlsZShtYXhEdXJhdGlvbiwgYXBwbHlPbmx5RHVyYXRpb24pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmbGFncy5hcHBseUFuaW1hdGlvbkR1cmF0aW9uKSB7XHJcbiAgICAgICAgICBmbGFncy5oYXNBbmltYXRpb25zID0gdHJ1ZTtcclxuICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPSBtYXhEdXJhdGlvbjtcclxuICAgICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKGdldENzc0tleWZyYW1lRHVyYXRpb25TdHlsZShtYXhEdXJhdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG1heER1cmF0aW9uID09PSAwICYmICFmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcykge1xyXG4gICAgICAgIHJldHVybiBjbG9zZUFuZFJldHVybk5vb3BBbmltYXRvcigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAhPSBudWxsKSB7XHJcbiAgICAgICAgdmFyIGRlbGF5U3R5bGU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlbGF5ICE9PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgZGVsYXlTdHlsZSA9IHBhcnNlRmxvYXQob3B0aW9ucy5kZWxheSk7XHJcbiAgICAgICAgICAvLyBudW1iZXIgaW4gb3B0aW9ucy5kZWxheSBtZWFucyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoZSBkZWxheSBmb3IgdGhlIGNsb3NpbmcgdGltZW91dFxyXG4gICAgICAgICAgbWF4RGVsYXkgPSBNYXRoLm1heChkZWxheVN0eWxlLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmbGFncy5hcHBseVRyYW5zaXRpb25EZWxheSkge1xyXG4gICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZ2V0Q3NzRGVsYXlTdHlsZShkZWxheVN0eWxlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmxhZ3MuYXBwbHlBbmltYXRpb25EZWxheSkge1xyXG4gICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZ2V0Q3NzRGVsYXlTdHlsZShkZWxheVN0eWxlLCB0cnVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIHRoZSBkZWxheSB2YWx1ZSBzaW5jZSB3ZSB1c2VkIGEgcHJlLWVtcHRpdmUgbmVnYXRpdmVcclxuICAgICAgLy8gZGVsYXkgdmFsdWUgYW5kIHRoZSBkZWxheSB2YWx1ZSBpcyByZXF1aXJlZCBmb3IgdGhlIGZpbmFsIGV2ZW50IGNoZWNraW5nLiBUaGlzXHJcbiAgICAgIC8vIHByb3BlcnR5IHdpbGwgZW5zdXJlIHRoYXQgdGhpcyB3aWxsIGhhcHBlbiBhZnRlciB0aGUgUkFGIHBoYXNlIGhhcyBwYXNzZWQuXHJcbiAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uID09IG51bGwgJiYgdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgZmxhZ3MucmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMgPSBmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcyB8fCBpc0ZpcnN0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXhEZWxheVRpbWUgPSBtYXhEZWxheSAqIE9ORV9TRUNPTkQ7XHJcbiAgICAgIG1heER1cmF0aW9uVGltZSA9IG1heER1cmF0aW9uICogT05FX1NFQ09ORDtcclxuICAgICAgaWYgKCFvcHRpb25zLnNraXBCbG9ja2luZykge1xyXG4gICAgICAgIGZsYWdzLmJsb2NrVHJhbnNpdGlvbiA9IHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID4gMDtcclxuICAgICAgICBmbGFncy5ibG9ja0tleWZyYW1lQW5pbWF0aW9uID0gdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2dlci5hbmltYXRpb25EZWxheSA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhZ2dlci5hbmltYXRpb25EdXJhdGlvbiA9PT0gMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNsZWFudXBTdHlsZXMpIHtcclxuICAgICAgICAgIHJlZ2lzdGVyUmVzdG9yYWJsZVN0eWxlcyhyZXN0b3JlU3R5bGVzLCBub2RlLCBPYmplY3Qua2V5cyhvcHRpb25zLmZyb20pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXBwbHlBbmltYXRpb25Gcm9tU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZmxhZ3MuYmxvY2tUcmFuc2l0aW9uIHx8IGZsYWdzLmJsb2NrS2V5ZnJhbWVBbmltYXRpb24pIHtcclxuICAgICAgICBhcHBseUJsb2NraW5nKG1heER1cmF0aW9uKTtcclxuICAgICAgfSBlbHNlIGlmICghb3B0aW9ucy5za2lwQmxvY2tpbmcpIHtcclxuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVE9ETyhtYXRza28pOiBmb3IgMS41IGNoYW5nZSB0aGlzIGNvZGUgdG8gaGF2ZSBhbiBhbmltYXRvciBvYmplY3QgZm9yIGJldHRlciBkZWJ1Z2dpbmdcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAkJHdpbGxBbmltYXRlOiB0cnVlLFxyXG4gICAgICAgIGVuZDogZW5kRm4sXHJcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIHJ1bm5lckhvc3QgPSB7XHJcbiAgICAgICAgICAgIGVuZDogZW5kRm4sXHJcbiAgICAgICAgICAgIGNhbmNlbDogY2FuY2VsRm4sXHJcbiAgICAgICAgICAgIHJlc3VtZTogbnVsbCwgLy90aGlzIHdpbGwgYmUgc2V0IGR1cmluZyB0aGUgc3RhcnQoKSBwaGFzZVxyXG4gICAgICAgICAgICBwYXVzZTogbnVsbFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHJ1bm5lckhvc3QpO1xyXG5cclxuICAgICAgICAgIHdhaXRVbnRpbFF1aWV0KHN0YXJ0KTtcclxuXHJcbiAgICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGFjY2VzcyB0byBwYXVzZS9yZXN1bWUgdGhlIGFuaW1hdGlvblxyXG4gICAgICAgICAgLy8gc2luY2UgaXQgaGFzbid0IHJ1biB5ZXQuIEFuaW1hdGVSdW5uZXIgd2lsbCB0aGVyZWZvcmVcclxuICAgICAgICAgIC8vIHNldCBub29wIGZ1bmN0aW9ucyBmb3IgcmVzdW1lIGFuZCBwYXVzZSBhbmQgdGhleSB3aWxsXHJcbiAgICAgICAgICAvLyBsYXRlciBiZSBvdmVycmlkZGVuIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyB0cmlnZ2VyZWRcclxuICAgICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgZnVuY3Rpb24gZW5kRm4oKSB7XHJcbiAgICAgICAgY2xvc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2FuY2VsRm4oKSB7XHJcbiAgICAgICAgY2xvc2UodHJ1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNsb3NlKHJlamVjdGVkKSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgIC8vIGlmIHRoZSBwcm9taXNlIGhhcyBiZWVuIGNhbGxlZCBhbHJlYWR5IHRoZW4gd2Ugc2hvdWxkbid0IGNsb3NlXHJcbiAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiBhZ2FpblxyXG4gICAgICAgIGlmIChhbmltYXRpb25DbG9zZWQgfHwgKGFuaW1hdGlvbkNvbXBsZXRlZCAmJiBhbmltYXRpb25QYXVzZWQpKSByZXR1cm47XHJcbiAgICAgICAgYW5pbWF0aW9uQ2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICBhbmltYXRpb25QYXVzZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKCFvcHRpb25zLiQkc2tpcFByZXBhcmF0aW9uQ2xhc3Nlcykge1xyXG4gICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgcHJlcGFyYXRpb25DbGFzc2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgYWN0aXZlQ2xhc3Nlcyk7XHJcblxyXG4gICAgICAgIGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsIGZhbHNlKTtcclxuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgZm9yRWFjaCh0ZW1wb3JhcnlTdHlsZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XHJcbiAgICAgICAgICAvLyBUaGVyZSBpcyBvbmx5IG9uZSB3YXkgdG8gcmVtb3ZlIGlubGluZSBzdHlsZSBwcm9wZXJ0aWVzIGVudGlyZWx5IGZyb20gZWxlbWVudHMuXHJcbiAgICAgICAgICAvLyBCeSB1c2luZyBgcmVtb3ZlUHJvcGVydHlgIHRoaXMgd29ya3MsIGJ1dCB3ZSBuZWVkIHRvIGNvbnZlcnQgY2FtZWwtY2FzZWQgQ1NTXHJcbiAgICAgICAgICAvLyBzdHlsZXMgZG93biB0byBoeXBoZW5hdGVkIHZhbHVlcy5cclxuICAgICAgICAgIG5vZGUuc3R5bGVbZW50cnlbMF1dID0gJyc7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlc3RvcmVTdHlsZXMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgZm9yRWFjaChyZXN0b3JlU3R5bGVzLCBmdW5jdGlvbih2YWx1ZSwgcHJvcCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA/IG5vZGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgIDogbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGhlIHJlYXNvbiB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBpcyB0byBhbGxvdyBhIHN5bmNocm9ub3VzIGNsb3NpbmcgY2FsbGJhY2tcclxuICAgICAgICAvLyB0aGF0IGlzIGZpcmVkIGFzIFNPT04gYXMgdGhlIGFuaW1hdGlvbiBlbmRzICh3aGVuIHRoZSBDU1MgaXMgcmVtb3ZlZCkgb3IgaWZcclxuICAgICAgICAvLyB0aGUgYW5pbWF0aW9uIG5ldmVyIHRha2VzIG9mZiBhdCBhbGwuIEEgZ29vZCBleGFtcGxlIGlzIGEgbGVhdmUgYW5pbWF0aW9uIHNpbmNlXHJcbiAgICAgICAgLy8gdGhlIGVsZW1lbnQgbXVzdCBiZSByZW1vdmVkIGp1c3QgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBpcyBvdmVyIG9yIGVsc2UgdGhlIGVsZW1lbnRcclxuICAgICAgICAvLyB3aWxsIGFwcGVhciBvbiBzY3JlZW4gZm9yIG9uZSBhbmltYXRpb24gZnJhbWUgY2F1c2luZyBhbiBvdmVyYmVhcmluZyBmbGlja2VyLlxyXG4gICAgICAgIGlmIChvcHRpb25zLm9uRG9uZSkge1xyXG4gICAgICAgICAgb3B0aW9ucy5vbkRvbmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSB0cmFuc2l0aW9uZW5kIC8gYW5pbWF0aW9uZW5kIGxpc3RlbmVyKHMpXHJcbiAgICAgICAgICBlbGVtZW50Lm9mZihldmVudHMuam9pbignICcpLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vQ2FuY2VsIHRoZSBmYWxsYmFjayBjbG9zaW5nIHRpbWVvdXQgYW5kIHJlbW92ZSB0aGUgdGltZXIgZGF0YVxyXG4gICAgICAgIHZhciBhbmltYXRpb25UaW1lckRhdGEgPSBlbGVtZW50LmRhdGEoQU5JTUFURV9USU1FUl9LRVkpO1xyXG4gICAgICAgIGlmIChhbmltYXRpb25UaW1lckRhdGEpIHtcclxuICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChhbmltYXRpb25UaW1lckRhdGFbMF0udGltZXIpO1xyXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVEYXRhKEFOSU1BVEVfVElNRVJfS0VZKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZSBwcmVwYXJhdGlvbiBmdW5jdGlvbiBmYWlscyB0aGVuIHRoZSBwcm9taXNlIGlzIG5vdCBzZXR1cFxyXG4gICAgICAgIGlmIChydW5uZXIpIHtcclxuICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSghcmVqZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gYXBwbHlCbG9ja2luZyhkdXJhdGlvbikge1xyXG4gICAgICAgIGlmIChmbGFncy5ibG9ja1RyYW5zaXRpb24pIHtcclxuICAgICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgZHVyYXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZsYWdzLmJsb2NrS2V5ZnJhbWVBbmltYXRpb24pIHtcclxuICAgICAgICAgIGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsICEhZHVyYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKSB7XHJcbiAgICAgICAgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcih7XHJcbiAgICAgICAgICBlbmQ6IGVuZEZuLFxyXG4gICAgICAgICAgY2FuY2VsOiBjYW5jZWxGblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzaG91bGQgZmx1c2ggdGhlIGNhY2hlIGFuaW1hdGlvblxyXG4gICAgICAgIHdhaXRVbnRpbFF1aWV0KG5vb3ApO1xyXG4gICAgICAgIGNsb3NlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAkJHdpbGxBbmltYXRlOiBmYWxzZSxcclxuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBlbmQ6IGVuZEZuXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHZhciBldiA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQ7XHJcblxyXG4gICAgICAgIC8vIHdlIG5vdyBhbHdheXMgdXNlIGBEYXRlLm5vdygpYCBkdWUgdG8gdGhlIHJlY2VudCBjaGFuZ2VzIHdpdGhcclxuICAgICAgICAvLyBldmVudC50aW1lU3RhbXAgaW4gRmlyZWZveCwgV2Via2l0IGFuZCBDaHJvbWUgKHNlZSAjMTM0OTQgZm9yIG1vcmUgaW5mbylcclxuICAgICAgICB2YXIgdGltZVN0YW1wID0gZXYuJG1hbnVhbFRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICAvKiBGaXJlZm94IChvciBwb3NzaWJseSBqdXN0IEdlY2tvKSBsaWtlcyB0byBub3Qgcm91bmQgdmFsdWVzIHVwXHJcbiAgICAgICAgICogd2hlbiBhIG1zIG1lYXN1cmVtZW50IGlzIHVzZWQgZm9yIHRoZSBhbmltYXRpb24gKi9cclxuICAgICAgICB2YXIgZWxhcHNlZFRpbWUgPSBwYXJzZUZsb2F0KGV2LmVsYXBzZWRUaW1lLnRvRml4ZWQoRUxBUFNFRF9USU1FX01BWF9ERUNJTUFMX1BMQUNFUykpO1xyXG5cclxuICAgICAgICAvKiAkbWFudWFsVGltZVN0YW1wIGlzIGEgbW9ja2VkIHRpbWVTdGFtcCB2YWx1ZSB3aGljaCBpcyBzZXRcclxuICAgICAgICAgKiB3aXRoaW4gYnJvd3NlclRyaWdnZXIoKS4gVGhpcyBpcyBvbmx5IGhlcmUgc28gdGhhdCB0ZXN0cyBjYW5cclxuICAgICAgICAgKiBtb2NrIGFuaW1hdGlvbnMgcHJvcGVybHkuIFJlYWwgZXZlbnRzIGZhbGxiYWNrIHRvIGV2ZW50LnRpbWVTdGFtcCxcclxuICAgICAgICAgKiBvciwgaWYgdGhleSBkb24ndCwgdGhlbiBhIHRpbWVTdGFtcCBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgZm9yIHRoZW0uXHJcbiAgICAgICAgICogV2UncmUgY2hlY2tpbmcgdG8gc2VlIGlmIHRoZSB0aW1lU3RhbXAgc3VycGFzc2VzIHRoZSBleHBlY3RlZCBkZWxheSxcclxuICAgICAgICAgKiBidXQgd2UncmUgdXNpbmcgZWxhcHNlZFRpbWUgaW5zdGVhZCBvZiB0aGUgdGltZVN0YW1wIG9uIHRoZSAybmRcclxuICAgICAgICAgKiBwcmUtY29uZGl0aW9uIHNpbmNlIGFuaW1hdGlvblBhdXNlZHMgc29tZXRpbWVzIGNsb3NlIG9mZiBlYXJseSAqL1xyXG4gICAgICAgIGlmIChNYXRoLm1heCh0aW1lU3RhbXAgLSBzdGFydFRpbWUsIDApID49IG1heERlbGF5VGltZSAmJiBlbGFwc2VkVGltZSA+PSBtYXhEdXJhdGlvbikge1xyXG4gICAgICAgICAgLy8gd2Ugc2V0IHRoaXMgZmxhZyB0byBlbnN1cmUgdGhhdCBpZiB0aGUgdHJhbnNpdGlvbiBpcyBwYXVzZWQgdGhlbiwgd2hlbiByZXN1bWVkLFxyXG4gICAgICAgICAgLy8gdGhlIGFuaW1hdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xvc2UgaXRzZWxmIHNpbmNlIHRyYW5zaXRpb25zIGNhbm5vdCBiZSBwYXVzZWQuXHJcbiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmIChhbmltYXRpb25DbG9zZWQpIHJldHVybjtcclxuICAgICAgICBpZiAoIW5vZGUucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGV2ZW4gdGhvdWdoIHdlIG9ubHkgcGF1c2Uga2V5ZnJhbWUgYW5pbWF0aW9ucyBoZXJlIHRoZSBwYXVzZSBmbGFnXHJcbiAgICAgICAgLy8gd2lsbCBzdGlsbCBoYXBwZW4gd2hlbiB0cmFuc2l0aW9ucyBhcmUgdXNlZC4gT25seSB0aGUgdHJhbnNpdGlvbiB3aWxsXHJcbiAgICAgICAgLy8gbm90IGJlIHBhdXNlZCBzaW5jZSB0aGF0IGlzIG5vdCBwb3NzaWJsZS4gSWYgdGhlIGFuaW1hdGlvbiBlbmRzIHdoZW5cclxuICAgICAgICAvLyBwYXVzZWQgdGhlbiBpdCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB1bnBhdXNlZCBvciBjYW5jZWxsZWQuXHJcbiAgICAgICAgdmFyIHBsYXlQYXVzZSA9IGZ1bmN0aW9uKHBsYXlBbmltYXRpb24pIHtcclxuICAgICAgICAgIGlmICghYW5pbWF0aW9uQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblBhdXNlZCA9ICFwbGF5QW5pbWF0aW9uO1xyXG4gICAgICAgICAgICBpZiAodGltaW5ncy5hbmltYXRpb25EdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsIGFuaW1hdGlvblBhdXNlZCk7XHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uUGF1c2VkXHJcbiAgICAgICAgICAgICAgICAgID8gdGVtcG9yYXJ5U3R5bGVzLnB1c2godmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgIDogcmVtb3ZlRnJvbUFycmF5KHRlbXBvcmFyeVN0eWxlcywgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvblBhdXNlZCAmJiBwbGF5QW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblBhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGNoZWNraW5nIHRoZSBzdGFnZ2VyIGR1cmF0aW9uIHByZXZlbnRzIGFuIGFjY2lkZW50YWxseSBjYXNjYWRlIG9mIHRoZSBDU1MgZGVsYXkgc3R5bGVcclxuICAgICAgICAvLyBiZWluZyBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50LiBJZiB0aGUgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyB6ZXJvIHRoZW4gd2UgY2FuIHNhZmVseVxyXG4gICAgICAgIC8vIHJlbHkgdGhhdCB0aGUgZGVsYXkgdmFsdWUgaXMgYW4gaW50ZW50aW9uYWwgc3RhZ2dlciBkZWxheSBzdHlsZS5cclxuICAgICAgICB2YXIgbWF4U3RhZ2dlciA9IGl0ZW1JbmRleCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICYmICgodGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gJiYgc3RhZ2dlci50cmFuc2l0aW9uRHVyYXRpb24gPT09IDApIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiAmJiBzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICYmIE1hdGgubWF4KHN0YWdnZXIuYW5pbWF0aW9uRGVsYXksIHN0YWdnZXIudHJhbnNpdGlvbkRlbGF5KTtcclxuICAgICAgICBpZiAobWF4U3RhZ2dlcikge1xyXG4gICAgICAgICAgJHRpbWVvdXQodHJpZ2dlckFuaW1hdGlvblN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihtYXhTdGFnZ2VyICogaXRlbUluZGV4ICogT05FX1NFQ09ORCksXHJcbiAgICAgICAgICAgICAgICAgICBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRyaWdnZXJBbmltYXRpb25TdGFydCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGhpcyB3aWxsIGRlY29yYXRlIHRoZSBleGlzdGluZyBwcm9taXNlIHJ1bm5lciB3aXRoIHBhdXNlL3Jlc3VtZSBtZXRob2RzXHJcbiAgICAgICAgcnVubmVySG9zdC5yZXN1bWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHBsYXlQYXVzZSh0cnVlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBydW5uZXJIb3N0LnBhdXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBwbGF5UGF1c2UoZmFsc2UpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJBbmltYXRpb25TdGFydCgpIHtcclxuICAgICAgICAgIC8vIGp1c3QgaW5jYXNlIGEgc3RhZ2dlciBhbmltYXRpb24ga2lja3MgaW4gd2hlbiB0aGUgYW5pbWF0aW9uXHJcbiAgICAgICAgICAvLyBpdHNlbGYgd2FzIGNhbmNlbGxlZCBlbnRpcmVseVxyXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGFwcGx5QmxvY2tpbmcoZmFsc2UpO1xyXG5cclxuICAgICAgICAgIGZvckVhY2godGVtcG9yYXJ5U3R5bGVzLCBmdW5jdGlvbihlbnRyeSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVudHJ5WzFdO1xyXG4gICAgICAgICAgICBub2RlLnN0eWxlW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIGFjdGl2ZUNsYXNzZXMpO1xyXG5cclxuICAgICAgICAgIGlmIChmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcykge1xyXG4gICAgICAgICAgICBmdWxsQ2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWUgKyAnICcgKyBwcmVwYXJhdGlvbkNsYXNzZXM7XHJcbiAgICAgICAgICAgIGNhY2hlS2V5ID0gZ2NzSGFzaEZuKG5vZGUsIGZ1bGxDbGFzc05hbWUpO1xyXG5cclxuICAgICAgICAgICAgdGltaW5ncyA9IGNvbXB1dGVUaW1pbmdzKG5vZGUsIGZ1bGxDbGFzc05hbWUsIGNhY2hlS2V5KTtcclxuICAgICAgICAgICAgcmVsYXRpdmVEZWxheSA9IHRpbWluZ3MubWF4RGVsYXk7XHJcbiAgICAgICAgICAgIG1heERlbGF5ID0gTWF0aC5tYXgocmVsYXRpdmVEZWxheSwgMCk7XHJcbiAgICAgICAgICAgIG1heER1cmF0aW9uID0gdGltaW5ncy5tYXhEdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGlmIChtYXhEdXJhdGlvbiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIGNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmbGFncy5oYXNUcmFuc2l0aW9ucyA9IHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID4gMDtcclxuICAgICAgICAgICAgZmxhZ3MuaGFzQW5pbWF0aW9ucyA9IHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPiAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChmbGFncy5hcHBseUFuaW1hdGlvbkRlbGF5KSB7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlRGVsYXkgPSB0eXBlb2Ygb3B0aW9ucy5kZWxheSAhPT0gXCJib29sZWFuXCIgJiYgdHJ1dGh5VGltaW5nVmFsdWUob3B0aW9ucy5kZWxheSlcclxuICAgICAgICAgICAgICAgICAgPyBwYXJzZUZsb2F0KG9wdGlvbnMuZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgIDogcmVsYXRpdmVEZWxheTtcclxuXHJcbiAgICAgICAgICAgIG1heERlbGF5ID0gTWF0aC5tYXgocmVsYXRpdmVEZWxheSwgMCk7XHJcbiAgICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uRGVsYXkgPSByZWxhdGl2ZURlbGF5O1xyXG4gICAgICAgICAgICBkZWxheVN0eWxlID0gZ2V0Q3NzRGVsYXlTdHlsZShyZWxhdGl2ZURlbGF5LCB0cnVlKTtcclxuICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZGVsYXlTdHlsZSk7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGVbZGVsYXlTdHlsZVswXV0gPSBkZWxheVN0eWxlWzFdO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG1heERlbGF5VGltZSA9IG1heERlbGF5ICogT05FX1NFQ09ORDtcclxuICAgICAgICAgIG1heER1cmF0aW9uVGltZSA9IG1heER1cmF0aW9uICogT05FX1NFQ09ORDtcclxuXHJcbiAgICAgICAgICBpZiAob3B0aW9ucy5lYXNpbmcpIHtcclxuICAgICAgICAgICAgdmFyIGVhc2VQcm9wLCBlYXNlVmFsID0gb3B0aW9ucy5lYXNpbmc7XHJcbiAgICAgICAgICAgIGlmIChmbGFncy5oYXNUcmFuc2l0aW9ucykge1xyXG4gICAgICAgICAgICAgIGVhc2VQcm9wID0gVFJBTlNJVElPTl9QUk9QICsgVElNSU5HX0tFWTtcclxuICAgICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChbZWFzZVByb3AsIGVhc2VWYWxdKTtcclxuICAgICAgICAgICAgICBub2RlLnN0eWxlW2Vhc2VQcm9wXSA9IGVhc2VWYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZsYWdzLmhhc0FuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgICBlYXNlUHJvcCA9IEFOSU1BVElPTl9QUk9QICsgVElNSU5HX0tFWTtcclxuICAgICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChbZWFzZVByb3AsIGVhc2VWYWxdKTtcclxuICAgICAgICAgICAgICBub2RlLnN0eWxlW2Vhc2VQcm9wXSA9IGVhc2VWYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAodGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24pIHtcclxuICAgICAgICAgICAgZXZlbnRzLnB1c2goVFJBTlNJVElPTkVORF9FVkVOVCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24pIHtcclxuICAgICAgICAgICAgZXZlbnRzLnB1c2goQU5JTUFUSU9ORU5EX0VWRU5UKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgdmFyIHRpbWVyVGltZSA9IG1heERlbGF5VGltZSArIENMT1NJTkdfVElNRV9CVUZGRVIgKiBtYXhEdXJhdGlvblRpbWU7XHJcbiAgICAgICAgICB2YXIgZW5kVGltZSA9IHN0YXJ0VGltZSArIHRpbWVyVGltZTtcclxuXHJcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uc0RhdGEgPSBlbGVtZW50LmRhdGEoQU5JTUFURV9USU1FUl9LRVkpIHx8IFtdO1xyXG4gICAgICAgICAgdmFyIHNldHVwRmFsbGJhY2tUaW1lciA9IHRydWU7XHJcbiAgICAgICAgICBpZiAoYW5pbWF0aW9uc0RhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZXJEYXRhID0gYW5pbWF0aW9uc0RhdGFbMF07XHJcbiAgICAgICAgICAgIHNldHVwRmFsbGJhY2tUaW1lciA9IGVuZFRpbWUgPiBjdXJyZW50VGltZXJEYXRhLmV4cGVjdGVkRW5kVGltZTtcclxuICAgICAgICAgICAgaWYgKHNldHVwRmFsbGJhY2tUaW1lcikge1xyXG4gICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChjdXJyZW50VGltZXJEYXRhLnRpbWVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBhbmltYXRpb25zRGF0YS5wdXNoKGNsb3NlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChzZXR1cEZhbGxiYWNrVGltZXIpIHtcclxuICAgICAgICAgICAgdmFyIHRpbWVyID0gJHRpbWVvdXQob25BbmltYXRpb25FeHBpcmVkLCB0aW1lclRpbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uc0RhdGFbMF0gPSB7XHJcbiAgICAgICAgICAgICAgdGltZXI6IHRpbWVyLFxyXG4gICAgICAgICAgICAgIGV4cGVjdGVkRW5kVGltZTogZW5kVGltZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhbmltYXRpb25zRGF0YS5wdXNoKGNsb3NlKTtcclxuICAgICAgICAgICAgZWxlbWVudC5kYXRhKEFOSU1BVEVfVElNRVJfS0VZLCBhbmltYXRpb25zRGF0YSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5vbihldmVudHMuam9pbignICcpLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAob3B0aW9ucy50bykge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZXN0b3JhYmxlU3R5bGVzKHJlc3RvcmVTdHlsZXMsIG5vZGUsIE9iamVjdC5rZXlzKG9wdGlvbnMudG8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcHBseUFuaW1hdGlvblRvU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25FeHBpcmVkKCkge1xyXG4gICAgICAgICAgdmFyIGFuaW1hdGlvbnNEYXRhID0gZWxlbWVudC5kYXRhKEFOSU1BVEVfVElNRVJfS0VZKTtcclxuXHJcbiAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgZmFsc2UgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGVsZW1lbnQgd2FzXHJcbiAgICAgICAgICAvLyByZW1vdmVkIGZyb20gdGhlIERPTSAodmlhIGEgbGVhdmUgYW5pbWF0aW9uIG9yIHNvbWV0aGluZ1xyXG4gICAgICAgICAgLy8gc2ltaWxhcilcclxuICAgICAgICAgIGlmIChhbmltYXRpb25zRGF0YSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFuaW1hdGlvbnNEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uc0RhdGFbaV0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoQU5JTUFURV9USU1FUl9LRVkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XTtcclxufV07XHJcblxyXG52YXIgJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIgPSBbJyQkYW5pbWF0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkJGFuaW1hdGlvblByb3ZpZGVyKSB7XHJcbiAgJCRhbmltYXRpb25Qcm92aWRlci5kcml2ZXJzLnB1c2goJyQkYW5pbWF0ZUNzc0RyaXZlcicpO1xyXG5cclxuICB2YXIgTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUgPSAnbmctYW5pbWF0ZS1zaGltJztcclxuICB2YXIgTkdfQU5JTUFURV9BTkNIT1JfQ0xBU1NfTkFNRSA9ICduZy1hbmNob3InO1xyXG5cclxuICB2YXIgTkdfT1VUX0FOQ0hPUl9DTEFTU19OQU1FID0gJ25nLWFuY2hvci1vdXQnO1xyXG4gIHZhciBOR19JTl9BTkNIT1JfQ0xBU1NfTkFNRSA9ICduZy1hbmNob3ItaW4nO1xyXG5cclxuICBmdW5jdGlvbiBpc0RvY3VtZW50RnJhZ21lbnQobm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGUubm9kZVR5cGUgPT09IDExO1xyXG4gIH1cclxuXHJcbiAgdGhpcy4kZ2V0ID0gWyckYW5pbWF0ZUNzcycsICckcm9vdFNjb3BlJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckcm9vdEVsZW1lbnQnLCAnJHNuaWZmZXInLCAnJCRqcUxpdGUnLCAnJGRvY3VtZW50JyxcclxuICAgICAgIGZ1bmN0aW9uKCRhbmltYXRlQ3NzLCAgICRyb290U2NvcGUsICAgJCRBbmltYXRlUnVubmVyLCAgICRyb290RWxlbWVudCwgICAkc25pZmZlciwgICAkJGpxTGl0ZSwgICAkZG9jdW1lbnQpIHtcclxuXHJcbiAgICAvLyBvbmx5IGJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0aGVzZSBwcm9wZXJ0aWVzIGNhbiByZW5kZXIgYW5pbWF0aW9uc1xyXG4gICAgaWYgKCEkc25pZmZlci5hbmltYXRpb25zICYmICEkc25pZmZlci50cmFuc2l0aW9ucykgcmV0dXJuIG5vb3A7XHJcblxyXG4gICAgdmFyIGJvZHlOb2RlID0gJGRvY3VtZW50WzBdLmJvZHk7XHJcbiAgICB2YXIgcm9vdE5vZGUgPSBnZXREb21Ob2RlKCRyb290RWxlbWVudCk7XHJcblxyXG4gICAgdmFyIHJvb3RCb2R5RWxlbWVudCA9IGpxTGl0ZShcclxuICAgICAgLy8gdGhpcyBpcyB0byBhdm9pZCB1c2luZyBzb21ldGhpbmcgdGhhdCBleGlzdHMgb3V0c2lkZSBvZiB0aGUgYm9keVxyXG4gICAgICAvLyB3ZSBhbHNvIHNwZWNpYWwgY2FzZSB0aGUgZG9jIGZyYWdtZW50IGNhc2UgYmVjYXVzZSBvdXIgdW5pdCB0ZXN0IGNvZGVcclxuICAgICAgLy8gYXBwZW5kcyB0aGUgJHJvb3RFbGVtZW50IHRvIHRoZSBib2R5IGFmdGVyIHRoZSBhcHAgaGFzIGJlZW4gYm9vdHN0cmFwcGVkXHJcbiAgICAgIGlzRG9jdW1lbnRGcmFnbWVudChyb290Tm9kZSkgfHwgYm9keU5vZGUuY29udGFpbnMocm9vdE5vZGUpID8gcm9vdE5vZGUgOiBib2R5Tm9kZVxyXG4gICAgKTtcclxuXHJcbiAgICB2YXIgYXBwbHlBbmltYXRpb25DbGFzc2VzID0gYXBwbHlBbmltYXRpb25DbGFzc2VzRmFjdG9yeSgkJGpxTGl0ZSk7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGluaXREcml2ZXJGbihhbmltYXRpb25EZXRhaWxzKSB7XHJcbiAgICAgIHJldHVybiBhbmltYXRpb25EZXRhaWxzLmZyb20gJiYgYW5pbWF0aW9uRGV0YWlscy50b1xyXG4gICAgICAgICAgPyBwcmVwYXJlRnJvbVRvQW5jaG9yQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMuZnJvbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25EZXRhaWxzLnRvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMuY2xhc3NlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25EZXRhaWxzLmFuY2hvcnMpXHJcbiAgICAgICAgICA6IHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBmaWx0ZXJDc3NDbGFzc2VzKGNsYXNzZXMpIHtcclxuICAgICAgLy9yZW1vdmUgYWxsIHRoZSBgbmctYCBzdHVmZlxyXG4gICAgICByZXR1cm4gY2xhc3Nlcy5yZXBsYWNlKC9cXGJuZy1cXFMrXFxiL2csICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRVbmlxdWVWYWx1ZXMoYSwgYikge1xyXG4gICAgICBpZiAoaXNTdHJpbmcoYSkpIGEgPSBhLnNwbGl0KCcgJyk7XHJcbiAgICAgIGlmIChpc1N0cmluZyhiKSkgYiA9IGIuc3BsaXQoJyAnKTtcclxuICAgICAgcmV0dXJuIGEuZmlsdGVyKGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgICAgIHJldHVybiBiLmluZGV4T2YodmFsKSA9PT0gLTE7XHJcbiAgICAgIH0pLmpvaW4oJyAnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwcmVwYXJlQW5jaG9yZWRBbmltYXRpb24oY2xhc3Nlcywgb3V0QW5jaG9yLCBpbkFuY2hvcikge1xyXG4gICAgICB2YXIgY2xvbmUgPSBqcUxpdGUoZ2V0RG9tTm9kZShvdXRBbmNob3IpLmNsb25lTm9kZSh0cnVlKSk7XHJcbiAgICAgIHZhciBzdGFydGluZ0NsYXNzZXMgPSBmaWx0ZXJDc3NDbGFzc2VzKGdldENsYXNzVmFsKGNsb25lKSk7XHJcblxyXG4gICAgICBvdXRBbmNob3IuYWRkQ2xhc3MoTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUpO1xyXG4gICAgICBpbkFuY2hvci5hZGRDbGFzcyhOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSk7XHJcblxyXG4gICAgICBjbG9uZS5hZGRDbGFzcyhOR19BTklNQVRFX0FOQ0hPUl9DTEFTU19OQU1FKTtcclxuXHJcbiAgICAgIHJvb3RCb2R5RWxlbWVudC5hcHBlbmQoY2xvbmUpO1xyXG5cclxuICAgICAgdmFyIGFuaW1hdG9ySW4sIGFuaW1hdG9yT3V0ID0gcHJlcGFyZU91dEFuaW1hdGlvbigpO1xyXG5cclxuICAgICAgLy8gdGhlIHVzZXIgbWF5IG5vdCBlbmQgdXAgdXNpbmcgdGhlIGBvdXRgIGFuaW1hdGlvbiBhbmRcclxuICAgICAgLy8gb25seSBtYWtpbmcgdXNlIG9mIHRoZSBgaW5gIGFuaW1hdGlvbiBvciB2aWNlLXZlcnNhLlxyXG4gICAgICAvLyBJbiBlaXRoZXIgY2FzZSB3ZSBzaG91bGQgYWxsb3cgdGhpcyBhbmQgbm90IGFzc3VtZSB0aGVcclxuICAgICAgLy8gYW5pbWF0aW9uIGlzIG92ZXIgdW5sZXNzIGJvdGggYW5pbWF0aW9ucyBhcmUgbm90IHVzZWQuXHJcbiAgICAgIGlmICghYW5pbWF0b3JPdXQpIHtcclxuICAgICAgICBhbmltYXRvckluID0gcHJlcGFyZUluQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgaWYgKCFhbmltYXRvckluKSB7XHJcbiAgICAgICAgICByZXR1cm4gZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgc3RhcnRpbmdBbmltYXRvciA9IGFuaW1hdG9yT3V0IHx8IGFuaW1hdG9ySW47XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBydW5uZXI7XHJcblxyXG4gICAgICAgICAgdmFyIGN1cnJlbnRBbmltYXRpb24gPSBzdGFydGluZ0FuaW1hdG9yLnN0YXJ0KCk7XHJcbiAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIWFuaW1hdG9ySW4pIHtcclxuICAgICAgICAgICAgICBhbmltYXRvckluID0gcHJlcGFyZUluQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgaWYgKGFuaW1hdG9ySW4pIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRvckluLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGVyZSBpcyBubyBgaW5gIGFuaW1hdGlvblxyXG4gICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcclxuICAgICAgICAgICAgZW5kOiBlbmRGbixcclxuICAgICAgICAgICAgY2FuY2VsOiBlbmRGblxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiBlbmRGbigpIHtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uLmVuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlQW5jaG9yU3R5bGVzKGFuY2hvcikge1xyXG4gICAgICAgIHZhciBzdHlsZXMgPSB7fTtcclxuXHJcbiAgICAgICAgdmFyIGNvb3JkcyA9IGdldERvbU5vZGUoYW5jaG9yKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgLy8gd2UgaXRlcmF0ZSBkaXJlY3RseSBzaW5jZSBzYWZhcmkgbWVzc2VzIHVwIGFuZCBkb2Vzbid0IHJldHVyblxyXG4gICAgICAgIC8vIGFsbCB0aGUga2V5cyBmb3IgdGhlIGNvb3JkcyBvYmplY3Qgd2hlbiBpdGVyYXRlZFxyXG4gICAgICAgIGZvckVhY2goWyd3aWR0aCcsJ2hlaWdodCcsJ3RvcCcsJ2xlZnQnXSwgZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb29yZHNba2V5XTtcclxuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICAgICAgdmFsdWUgKz0gYm9keU5vZGUuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICB2YWx1ZSArPSBib2R5Tm9kZS5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3R5bGVzW2tleV0gPSBNYXRoLmZsb29yKHZhbHVlKSArICdweCc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gcHJlcGFyZU91dEFuaW1hdGlvbigpIHtcclxuICAgICAgICB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhjbG9uZSwge1xyXG4gICAgICAgICAgYWRkQ2xhc3M6IE5HX09VVF9BTkNIT1JfQ0xBU1NfTkFNRSxcclxuICAgICAgICAgIGRlbGF5OiB0cnVlLFxyXG4gICAgICAgICAgZnJvbTogY2FsY3VsYXRlQW5jaG9yU3R5bGVzKG91dEFuY2hvcilcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcmVhZCB0aGUgY29tbWVudCB3aXRoaW4gYHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uYCB0byB1bmRlcnN0YW5kXHJcbiAgICAgICAgLy8gd2h5IHRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5XHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdG9yLiQkd2lsbEFuaW1hdGUgPyBhbmltYXRvciA6IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGdldENsYXNzVmFsKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudC5hdHRyKCdjbGFzcycpIHx8ICcnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBwcmVwYXJlSW5BbmltYXRpb24oKSB7XHJcbiAgICAgICAgdmFyIGVuZGluZ0NsYXNzZXMgPSBmaWx0ZXJDc3NDbGFzc2VzKGdldENsYXNzVmFsKGluQW5jaG9yKSk7XHJcbiAgICAgICAgdmFyIHRvQWRkID0gZ2V0VW5pcXVlVmFsdWVzKGVuZGluZ0NsYXNzZXMsIHN0YXJ0aW5nQ2xhc3Nlcyk7XHJcbiAgICAgICAgdmFyIHRvUmVtb3ZlID0gZ2V0VW5pcXVlVmFsdWVzKHN0YXJ0aW5nQ2xhc3NlcywgZW5kaW5nQ2xhc3Nlcyk7XHJcblxyXG4gICAgICAgIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGNsb25lLCB7XHJcbiAgICAgICAgICB0bzogY2FsY3VsYXRlQW5jaG9yU3R5bGVzKGluQW5jaG9yKSxcclxuICAgICAgICAgIGFkZENsYXNzOiBOR19JTl9BTkNIT1JfQ0xBU1NfTkFNRSArICcgJyArIHRvQWRkLFxyXG4gICAgICAgICAgcmVtb3ZlQ2xhc3M6IE5HX09VVF9BTkNIT1JfQ0xBU1NfTkFNRSArICcgJyArIHRvUmVtb3ZlLFxyXG4gICAgICAgICAgZGVsYXk6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcmVhZCB0aGUgY29tbWVudCB3aXRoaW4gYHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uYCB0byB1bmRlcnN0YW5kXHJcbiAgICAgICAgLy8gd2h5IHRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5XHJcbiAgICAgICAgcmV0dXJuIGFuaW1hdG9yLiQkd2lsbEFuaW1hdGUgPyBhbmltYXRvciA6IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGVuZCgpIHtcclxuICAgICAgICBjbG9uZS5yZW1vdmUoKTtcclxuICAgICAgICBvdXRBbmNob3IucmVtb3ZlQ2xhc3MoTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUpO1xyXG4gICAgICAgIGluQW5jaG9yLnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByZXBhcmVGcm9tVG9BbmNob3JBbmltYXRpb24oZnJvbSwgdG8sIGNsYXNzZXMsIGFuY2hvcnMpIHtcclxuICAgICAgdmFyIGZyb21BbmltYXRpb24gPSBwcmVwYXJlUmVndWxhckFuaW1hdGlvbihmcm9tLCBub29wKTtcclxuICAgICAgdmFyIHRvQW5pbWF0aW9uID0gcHJlcGFyZVJlZ3VsYXJBbmltYXRpb24odG8sIG5vb3ApO1xyXG5cclxuICAgICAgdmFyIGFuY2hvckFuaW1hdGlvbnMgPSBbXTtcclxuICAgICAgZm9yRWFjaChhbmNob3JzLCBmdW5jdGlvbihhbmNob3IpIHtcclxuICAgICAgICB2YXIgb3V0RWxlbWVudCA9IGFuY2hvclsnb3V0J107XHJcbiAgICAgICAgdmFyIGluRWxlbWVudCA9IGFuY2hvclsnaW4nXTtcclxuICAgICAgICB2YXIgYW5pbWF0b3IgPSBwcmVwYXJlQW5jaG9yZWRBbmltYXRpb24oY2xhc3Nlcywgb3V0RWxlbWVudCwgaW5FbGVtZW50KTtcclxuICAgICAgICBpZiAoYW5pbWF0b3IpIHtcclxuICAgICAgICAgIGFuY2hvckFuaW1hdGlvbnMucHVzaChhbmltYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIG5vIHBvaW50IGluIGRvaW5nIGFueXRoaW5nIHdoZW4gdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHRvIGFuaW1hdGVcclxuICAgICAgaWYgKCFmcm9tQW5pbWF0aW9uICYmICF0b0FuaW1hdGlvbiAmJiBhbmNob3JBbmltYXRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uUnVubmVycyA9IFtdO1xyXG5cclxuICAgICAgICAgIGlmIChmcm9tQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaChmcm9tQW5pbWF0aW9uLnN0YXJ0KCkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0b0FuaW1hdGlvbikge1xyXG4gICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2godG9BbmltYXRpb24uc3RhcnQoKSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZm9yRWFjaChhbmNob3JBbmltYXRpb25zLCBmdW5jdGlvbihhbmltYXRpb24pIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uUnVubmVycy5wdXNoKGFuaW1hdGlvbi5zdGFydCgpKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcclxuICAgICAgICAgICAgZW5kOiBlbmRGbixcclxuICAgICAgICAgICAgY2FuY2VsOiBlbmRGbiAvLyBDU1MtZHJpdmVuIGFuaW1hdGlvbnMgY2Fubm90IGJlIGNhbmNlbGxlZCwgb25seSBlbmRlZFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgJCRBbmltYXRlUnVubmVyLmFsbChhbmltYXRpb25SdW5uZXJzLCBmdW5jdGlvbihzdGF0dXMpIHtcclxuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHN0YXR1cyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIGVuZEZuKCkge1xyXG4gICAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvblJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xyXG4gICAgICAgICAgICAgIHJ1bm5lci5lbmQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpIHtcclxuICAgICAgdmFyIGVsZW1lbnQgPSBhbmltYXRpb25EZXRhaWxzLmVsZW1lbnQ7XHJcbiAgICAgIHZhciBvcHRpb25zID0gYW5pbWF0aW9uRGV0YWlscy5vcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbCkge1xyXG4gICAgICAgIG9wdGlvbnMuZXZlbnQgPSBhbmltYXRpb25EZXRhaWxzLmV2ZW50O1xyXG4gICAgICAgIG9wdGlvbnMuc3RydWN0dXJhbCA9IHRydWU7XHJcbiAgICAgICAgb3B0aW9ucy5hcHBseUNsYXNzZXNFYXJseSA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIHdlIHNwZWNpYWwgY2FzZSB0aGUgbGVhdmUgYW5pbWF0aW9uIHNpbmNlIHdlIHdhbnQgdG8gZW5zdXJlIHRoYXRcclxuICAgICAgICAvLyB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGFzIHNvb24gYXMgdGhlIGFuaW1hdGlvbiBpcyBvdmVyLiBPdGhlcndpc2VcclxuICAgICAgICAvLyBhIGZsaWNrZXIgbWlnaHQgYXBwZWFyIG9yIHRoZSBlbGVtZW50IG1heSBub3QgYmUgcmVtb3ZlZCBhdCBhbGxcclxuICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscy5ldmVudCA9PT0gJ2xlYXZlJykge1xyXG4gICAgICAgICAgb3B0aW9ucy5vbkRvbmUgPSBvcHRpb25zLmRvbU9wZXJhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFdlIGFzc2lnbiB0aGUgcHJlcGFyYXRpb25DbGFzc2VzIGFzIHRoZSBhY3R1YWwgYW5pbWF0aW9uIGV2ZW50IHNpbmNlXHJcbiAgICAgIC8vIHRoZSBpbnRlcm5hbHMgb2YgJGFuaW1hdGVDc3Mgd2lsbCBqdXN0IHN1ZmZpeCB0aGUgZXZlbnQgdG9rZW4gdmFsdWVzXHJcbiAgICAgIC8vIHdpdGggYC1hY3RpdmVgIHRvIHRyaWdnZXIgdGhlIGFuaW1hdGlvbi5cclxuICAgICAgaWYgKG9wdGlvbnMucHJlcGFyYXRpb25DbGFzc2VzKSB7XHJcbiAgICAgICAgb3B0aW9ucy5ldmVudCA9IGNvbmNhdFdpdGhTcGFjZShvcHRpb25zLmV2ZW50LCBvcHRpb25zLnByZXBhcmF0aW9uQ2xhc3Nlcyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgLy8gdGhlIGRyaXZlciBsb29rdXAgY29kZSBpbnNpZGUgb2YgJCRhbmltYXRpb24gYXR0ZW1wdHMgdG8gc3Bhd24gYVxyXG4gICAgICAvLyBkcml2ZXIgb25lIGJ5IG9uZSB1bnRpbCBhIGRyaXZlciByZXR1cm5zIGEuJCR3aWxsQW5pbWF0ZSBhbmltYXRvciBvYmplY3QuXHJcbiAgICAgIC8vICRhbmltYXRlQ3NzIHdpbGwgYWx3YXlzIHJldHVybiBhbiBvYmplY3QsIGhvd2V2ZXIsIGl0IHdpbGwgcGFzcyBpblxyXG4gICAgICAvLyBhIGZsYWcgYXMgYSBoaW50IGFzIHRvIHdoZXRoZXIgYW4gYW5pbWF0aW9uIHdhcyBkZXRlY3RlZCBvciBub3RcclxuICAgICAgcmV0dXJuIGFuaW1hdG9yLiQkd2lsbEFuaW1hdGUgPyBhbmltYXRvciA6IG51bGw7XHJcbiAgICB9XHJcbiAgfV07XHJcbn1dO1xyXG5cclxuLy8gVE9ETyhtYXRza28pOiB1c2UgY2FjaGluZyBoZXJlIHRvIHNwZWVkIHRoaW5ncyB1cCBmb3IgZGV0ZWN0aW9uXHJcbi8vIFRPRE8obWF0c2tvKTogYWRkIGRvY3VtZW50YXRpb25cclxuLy8gIGJ5IHRoZSB0aW1lLi4uXHJcblxyXG52YXIgJCRBbmltYXRlSnNQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcclxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckJEFuaW1hdGVSdW5uZXInLCAnJCRqcUxpdGUnLFxyXG4gICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkJGpxTGl0ZSkge1xyXG5cclxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcclxuICAgICAgICAgLy8gJGFuaW1hdGVKcyhlbGVtZW50LCAnZW50ZXInKTtcclxuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgY2xhc3Nlcywgb3B0aW9ucykge1xyXG4gICAgICB2YXIgYW5pbWF0aW9uQ2xvc2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyB0aGUgYGNsYXNzZXNgIGFyZ3VtZW50IGlzIG9wdGlvbmFsIGFuZCBpZiBpdCBpcyBub3QgdXNlZFxyXG4gICAgICAvLyB0aGVuIHRoZSBjbGFzc2VzIHdpbGwgYmUgcmVzb2x2ZWQgZnJvbSB0aGUgZWxlbWVudCdzIGNsYXNzTmFtZVxyXG4gICAgICAvLyBwcm9wZXJ0eSBhcyB3ZWxsIGFzIG9wdGlvbnMuYWRkQ2xhc3Mvb3B0aW9ucy5yZW1vdmVDbGFzcy5cclxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgaXNPYmplY3QoY2xhc3NlcykpIHtcclxuICAgICAgICBvcHRpb25zID0gY2xhc3NlcztcclxuICAgICAgICBjbGFzc2VzID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICBpZiAoIWNsYXNzZXMpIHtcclxuICAgICAgICBjbGFzc2VzID0gZWxlbWVudC5hdHRyKCdjbGFzcycpIHx8ICcnO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XHJcbiAgICAgICAgICBjbGFzc2VzICs9ICcgJyArIG9wdGlvbnMuYWRkQ2xhc3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XHJcbiAgICAgICAgICBjbGFzc2VzICs9ICcgJyArIG9wdGlvbnMucmVtb3ZlQ2xhc3M7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgY2xhc3Nlc1RvQWRkID0gb3B0aW9ucy5hZGRDbGFzcztcclxuICAgICAgdmFyIGNsYXNzZXNUb1JlbW92ZSA9IG9wdGlvbnMucmVtb3ZlQ2xhc3M7XHJcblxyXG4gICAgICAvLyB0aGUgbG9va3VwQW5pbWF0aW9ucyBmdW5jdGlvbiByZXR1cm5zIGEgc2VyaWVzIG9mIGFuaW1hdGlvbiBvYmplY3RzIHRoYXQgYXJlXHJcbiAgICAgIC8vIG1hdGNoZWQgdXAgd2l0aCBvbmUgb3IgbW9yZSBvZiB0aGUgQ1NTIGNsYXNzZXMuIFRoZXNlIGFuaW1hdGlvbiBvYmplY3RzIGFyZVxyXG4gICAgICAvLyBkZWZpbmVkIHZpYSB0aGUgbW9kdWxlLmFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBJZiBub3RoaW5nIGlzIGRldGVjdGVkIHRoZW5cclxuICAgICAgLy8gd2UgZG9uJ3QgcmV0dXJuIGFueXRoaW5nIHdoaWNoIHRoZW4gbWFrZXMgJGFuaW1hdGlvbiBxdWVyeSB0aGUgbmV4dCBkcml2ZXIuXHJcbiAgICAgIHZhciBhbmltYXRpb25zID0gbG9va3VwQW5pbWF0aW9ucyhjbGFzc2VzKTtcclxuICAgICAgdmFyIGJlZm9yZSwgYWZ0ZXI7XHJcbiAgICAgIGlmIChhbmltYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBhZnRlckZuLCBiZWZvcmVGbjtcclxuICAgICAgICBpZiAoZXZlbnQgPT0gJ2xlYXZlJykge1xyXG4gICAgICAgICAgYmVmb3JlRm4gPSAnbGVhdmUnO1xyXG4gICAgICAgICAgYWZ0ZXJGbiA9ICdhZnRlckxlYXZlJzsgLy8gVE9ETyhtYXRza28pOiBnZXQgcmlkIG9mIHRoaXNcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYmVmb3JlRm4gPSAnYmVmb3JlJyArIGV2ZW50LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZXZlbnQuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgYWZ0ZXJGbiA9IGV2ZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50ICE9PSAnZW50ZXInICYmIGV2ZW50ICE9PSAnbW92ZScpIHtcclxuICAgICAgICAgIGJlZm9yZSA9IHBhY2thZ2VBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBiZWZvcmVGbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFmdGVyICA9IHBhY2thZ2VBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBhZnRlckZuKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gbm8gbWF0Y2hpbmcgYW5pbWF0aW9uc1xyXG4gICAgICBpZiAoIWJlZm9yZSAmJiAhYWZ0ZXIpIHJldHVybjtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGFwcGx5T3B0aW9ucygpIHtcclxuICAgICAgICBvcHRpb25zLmRvbU9wZXJhdGlvbigpO1xyXG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2xvc2UoKSB7XHJcbiAgICAgICAgYW5pbWF0aW9uQ2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICBhcHBseU9wdGlvbnMoKTtcclxuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHJ1bm5lcjtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgJCR3aWxsQW5pbWF0ZTogdHJ1ZSxcclxuICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHJ1bm5lcikge1xyXG4gICAgICAgICAgICBydW5uZXIuZW5kKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XHJcbiAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSh0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAocnVubmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpO1xyXG4gICAgICAgICAgdmFyIGNsb3NlQWN0aXZlQW5pbWF0aW9ucztcclxuICAgICAgICAgIHZhciBjaGFpbiA9IFtdO1xyXG5cclxuICAgICAgICAgIGlmIChiZWZvcmUpIHtcclxuICAgICAgICAgICAgY2hhaW4ucHVzaChmdW5jdGlvbihmbikge1xyXG4gICAgICAgICAgICAgIGNsb3NlQWN0aXZlQW5pbWF0aW9ucyA9IGJlZm9yZShmbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChjaGFpbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2hhaW4ucHVzaChmdW5jdGlvbihmbikge1xyXG4gICAgICAgICAgICAgIGFwcGx5T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgIGZuKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcGx5T3B0aW9ucygpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChhZnRlcikge1xyXG4gICAgICAgICAgICBjaGFpbi5wdXNoKGZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgICAgICAgICAgY2xvc2VBY3RpdmVBbmltYXRpb25zID0gYWZ0ZXIoZm4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBydW5uZXIuc2V0SG9zdCh7XHJcbiAgICAgICAgICAgIGVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgZW5kQW5pbWF0aW9ucygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGVuZEFuaW1hdGlvbnModHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICQkQW5pbWF0ZVJ1bm5lci5jaGFpbihjaGFpbiwgb25Db21wbGV0ZSk7XHJcbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIG9uQ29tcGxldGUoc3VjY2Vzcykge1xyXG4gICAgICAgICAgICBjbG9zZShzdWNjZXNzKTtcclxuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHN1Y2Nlc3MpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIGVuZEFuaW1hdGlvbnMoY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgIGlmICghYW5pbWF0aW9uQ2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgKGNsb3NlQWN0aXZlQW5pbWF0aW9ucyB8fCBub29wKShjYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICAgIG9uQ29tcGxldGUoY2FuY2VsbGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVBbmltYXRpb25GbihmbiwgZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIG9uRG9uZSkge1xyXG4gICAgICAgIHZhciBhcmdzO1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcclxuICAgICAgICAgIGNhc2UgJ2FuaW1hdGUnOlxyXG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIG9wdGlvbnMuZnJvbSwgb3B0aW9ucy50bywgb25Eb25lXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnc2V0Q2xhc3MnOlxyXG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIGNsYXNzZXNUb0FkZCwgY2xhc3Nlc1RvUmVtb3ZlLCBvbkRvbmVdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdhZGRDbGFzcyc6XHJcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgY2xhc3Nlc1RvQWRkLCBvbkRvbmVdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdyZW1vdmVDbGFzcyc6XHJcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgY2xhc3Nlc1RvUmVtb3ZlLCBvbkRvbmVdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIG9uRG9uZV07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJncy5wdXNoKG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB2YXIgdmFsdWUgPSBmbi5hcHBseShmbiwgYXJncyk7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZS5zdGFydCkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdGFydCgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mICQkQW5pbWF0ZVJ1bm5lcikge1xyXG4gICAgICAgICAgICB2YWx1ZS5kb25lKG9uRG9uZSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsIG9uRW5kIC8gb25DYW5jZWwgY2FsbGJhY2tcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5vb3A7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGZuTmFtZSkge1xyXG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XHJcbiAgICAgICAgZm9yRWFjaChhbmltYXRpb25zLCBmdW5jdGlvbihhbmkpIHtcclxuICAgICAgICAgIHZhciBhbmltYXRpb24gPSBhbmlbZm5OYW1lXTtcclxuICAgICAgICAgIGlmICghYW5pbWF0aW9uKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgLy8gbm90ZSB0aGF0IGFsbCBvZiB0aGVzZSBhbmltYXRpb25zIHdpbGwgcnVuIGluIHBhcmFsbGVsXHJcbiAgICAgICAgICBvcGVyYXRpb25zLnB1c2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBydW5uZXI7XHJcbiAgICAgICAgICAgIHZhciBlbmRQcm9ncmVzc0NiO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBvbkFuaW1hdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24ocmVqZWN0ZWQpIHtcclxuICAgICAgICAgICAgICBpZiAoIXJlc29sdmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAoZW5kUHJvZ3Jlc3NDYiB8fCBub29wKShyZWplY3RlZCk7XHJcbiAgICAgICAgICAgICAgICBydW5uZXIuY29tcGxldGUoIXJlamVjdGVkKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcclxuICAgICAgICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgb25BbmltYXRpb25Db21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uQ29tcGxldGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGVuZFByb2dyZXNzQ2IgPSBleGVjdXRlQW5pbWF0aW9uRm4oYW5pbWF0aW9uLCBlbGVtZW50LCBldmVudCwgb3B0aW9ucywgZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNhbmNlbGxlZCA9IHJlc3VsdCA9PT0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgb25BbmltYXRpb25Db21wbGV0ZShjYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbnM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHBhY2thZ2VBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBmbk5hbWUpIHtcclxuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGFuaW1hdGlvbnMsIGZuTmFtZSk7XHJcbiAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICB2YXIgYSxiO1xyXG4gICAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ2JlZm9yZVNldENsYXNzJykge1xyXG4gICAgICAgICAgICBhID0gZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyhlbGVtZW50LCAncmVtb3ZlQ2xhc3MnLCBvcHRpb25zLCBhbmltYXRpb25zLCAnYmVmb3JlUmVtb3ZlQ2xhc3MnKTtcclxuICAgICAgICAgICAgYiA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2JlZm9yZUFkZENsYXNzJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGZuTmFtZSA9PT0gJ3NldENsYXNzJykge1xyXG4gICAgICAgICAgICBhID0gZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyhlbGVtZW50LCAncmVtb3ZlQ2xhc3MnLCBvcHRpb25zLCBhbmltYXRpb25zLCAncmVtb3ZlQ2xhc3MnKTtcclxuICAgICAgICAgICAgYiA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2FkZENsYXNzJyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGEpIHtcclxuICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMuY29uY2F0KGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGIpIHtcclxuICAgICAgICAgICAgb3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMuY29uY2F0KGIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIFRPRE8obWF0c2tvKTogYWRkIGRvY3VtZW50YXRpb25cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3RhcnRBbmltYXRpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgIHZhciBydW5uZXJzID0gW107XHJcbiAgICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZm9yRWFjaChvcGVyYXRpb25zLCBmdW5jdGlvbihhbmltYXRlRm4pIHtcclxuICAgICAgICAgICAgICBydW5uZXJzLnB1c2goYW5pbWF0ZUZuKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBydW5uZXJzLmxlbmd0aCA/ICQkQW5pbWF0ZVJ1bm5lci5hbGwocnVubmVycywgY2FsbGJhY2spIDogY2FsbGJhY2soKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZW5kRm4ocmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGZvckVhY2gocnVubmVycywgZnVuY3Rpb24ocnVubmVyKSB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0ID8gcnVubmVyLmNhbmNlbCgpIDogcnVubmVyLmVuZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBsb29rdXBBbmltYXRpb25zKGNsYXNzZXMpIHtcclxuICAgICAgY2xhc3NlcyA9IGlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlcy5zcGxpdCgnICcpO1xyXG4gICAgICB2YXIgbWF0Y2hlcyA9IFtdLCBmbGFnTWFwID0ge307XHJcbiAgICAgIGZvciAodmFyIGk9MDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIga2xhc3MgPSBjbGFzc2VzW2ldLFxyXG4gICAgICAgICAgICBhbmltYXRpb25GYWN0b3J5ID0gJGFuaW1hdGVQcm92aWRlci4kJHJlZ2lzdGVyZWRBbmltYXRpb25zW2tsYXNzXTtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uRmFjdG9yeSAmJiAhZmxhZ01hcFtrbGFzc10pIHtcclxuICAgICAgICAgIG1hdGNoZXMucHVzaCgkaW5qZWN0b3IuZ2V0KGFuaW1hdGlvbkZhY3RvcnkpKTtcclxuICAgICAgICAgIGZsYWdNYXBba2xhc3NdID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICB9XHJcbiAgfV07XHJcbn1dO1xyXG5cclxudmFyICQkQW5pbWF0ZUpzRHJpdmVyUHJvdmlkZXIgPSBbJyQkYW5pbWF0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkJGFuaW1hdGlvblByb3ZpZGVyKSB7XHJcbiAgJCRhbmltYXRpb25Qcm92aWRlci5kcml2ZXJzLnB1c2goJyQkYW5pbWF0ZUpzRHJpdmVyJyk7XHJcbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVKcycsICckJEFuaW1hdGVSdW5uZXInLCBmdW5jdGlvbigkJGFuaW1hdGVKcywgJCRBbmltYXRlUnVubmVyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gaW5pdERyaXZlckZuKGFuaW1hdGlvbkRldGFpbHMpIHtcclxuICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuZnJvbSAmJiBhbmltYXRpb25EZXRhaWxzLnRvKSB7XHJcbiAgICAgICAgdmFyIGZyb21BbmltYXRpb24gPSBwcmVwYXJlQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMuZnJvbSk7XHJcbiAgICAgICAgdmFyIHRvQW5pbWF0aW9uID0gcHJlcGFyZUFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzLnRvKTtcclxuICAgICAgICBpZiAoIWZyb21BbmltYXRpb24gJiYgIXRvQW5pbWF0aW9uKSByZXR1cm47XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25SdW5uZXJzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAoZnJvbUFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaChmcm9tQW5pbWF0aW9uLnN0YXJ0KCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodG9BbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2godG9BbmltYXRpb24uc3RhcnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQkQW5pbWF0ZVJ1bm5lci5hbGwoYW5pbWF0aW9uUnVubmVycywgZG9uZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcih7XHJcbiAgICAgICAgICAgICAgZW5kOiBlbmRGbkZhY3RvcnkoKSxcclxuICAgICAgICAgICAgICBjYW5jZWw6IGVuZEZuRmFjdG9yeSgpXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGVuZEZuRmFjdG9yeSgpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvblJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xyXG4gICAgICAgICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IHdlIGNhbm5vdCBjYW5jZWwgYW5pbWF0aW9ucyBmb3IgZ3JvdXBzIGp1c3QgeWV0LiAxLjUrXHJcbiAgICAgICAgICAgICAgICAgIHJ1bm5lci5lbmQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHN0YXR1cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBwcmVwYXJlQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHByZXBhcmVBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscykge1xyXG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IG1ha2Ugc3VyZSB0byBjaGVjayBmb3IgZ3JvdXBlZCBhbmltYXRpb25zIGFuZCBkZWxlZ2F0ZSBkb3duIHRvIG5vcm1hbCBhbmltYXRpb25zXHJcbiAgICAgIHZhciBlbGVtZW50ID0gYW5pbWF0aW9uRGV0YWlscy5lbGVtZW50O1xyXG4gICAgICB2YXIgZXZlbnQgPSBhbmltYXRpb25EZXRhaWxzLmV2ZW50O1xyXG4gICAgICB2YXIgb3B0aW9ucyA9IGFuaW1hdGlvbkRldGFpbHMub3B0aW9ucztcclxuICAgICAgdmFyIGNsYXNzZXMgPSBhbmltYXRpb25EZXRhaWxzLmNsYXNzZXM7XHJcbiAgICAgIHJldHVybiAkJGFuaW1hdGVKcyhlbGVtZW50LCBldmVudCwgY2xhc3Nlcywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgfV07XHJcbn1dO1xyXG5cclxudmFyIE5HX0FOSU1BVEVfQVRUUl9OQU1FID0gJ2RhdGEtbmctYW5pbWF0ZSc7XHJcbnZhciBOR19BTklNQVRFX1BJTl9EQVRBID0gJyRuZ0FuaW1hdGVQaW4nO1xyXG52YXIgJCRBbmltYXRlUXVldWVQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcclxuICB2YXIgUFJFX0RJR0VTVF9TVEFURSA9IDE7XHJcbiAgdmFyIFJVTk5JTkdfU1RBVEUgPSAyO1xyXG4gIHZhciBPTkVfU1BBQ0UgPSAnICc7XHJcblxyXG4gIHZhciBydWxlcyA9IHRoaXMucnVsZXMgPSB7XHJcbiAgICBza2lwOiBbXSxcclxuICAgIGNhbmNlbDogW10sXHJcbiAgICBqb2luOiBbXVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2VUcnV0aHlDc3NDbGFzc01hcChjbGFzc1N0cmluZykge1xyXG4gICAgaWYgKCFjbGFzc1N0cmluZykge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIga2V5cyA9IGNsYXNzU3RyaW5nLnNwbGl0KE9ORV9TUEFDRSk7XHJcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbiAgICBmb3JFYWNoKGtleXMsIGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICBtYXBba2V5XSA9IHRydWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBtYXA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYXNNYXRjaGluZ0NsYXNzZXMobmV3Q2xhc3NTdHJpbmcsIGN1cnJlbnRDbGFzc1N0cmluZykge1xyXG4gICAgaWYgKG5ld0NsYXNzU3RyaW5nICYmIGN1cnJlbnRDbGFzc1N0cmluZykge1xyXG4gICAgICB2YXIgY3VycmVudENsYXNzTWFwID0gbWFrZVRydXRoeUNzc0NsYXNzTWFwKGN1cnJlbnRDbGFzc1N0cmluZyk7XHJcbiAgICAgIHJldHVybiBuZXdDbGFzc1N0cmluZy5zcGxpdChPTkVfU1BBQ0UpLnNvbWUoZnVuY3Rpb24oY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDbGFzc01hcFtjbGFzc05hbWVdO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGlzQWxsb3dlZChydWxlVHlwZSwgZWxlbWVudCwgY3VycmVudEFuaW1hdGlvbiwgcHJldmlvdXNBbmltYXRpb24pIHtcclxuICAgIHJldHVybiBydWxlc1tydWxlVHlwZV0uc29tZShmdW5jdGlvbihmbikge1xyXG4gICAgICByZXR1cm4gZm4oZWxlbWVudCwgY3VycmVudEFuaW1hdGlvbiwgcHJldmlvdXNBbmltYXRpb24pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbiwgYW5kKSB7XHJcbiAgICB2YXIgYSA9IChhbmltYXRpb24uYWRkQ2xhc3MgfHwgJycpLmxlbmd0aCA+IDA7XHJcbiAgICB2YXIgYiA9IChhbmltYXRpb24ucmVtb3ZlQ2xhc3MgfHwgJycpLmxlbmd0aCA+IDA7XHJcbiAgICByZXR1cm4gYW5kID8gYSAmJiBiIDogYSB8fCBiO1xyXG4gIH1cclxuXHJcbiAgcnVsZXMuam9pbi5wdXNoKGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xyXG4gICAgLy8gaWYgdGhlIG5ldyBhbmltYXRpb24gaXMgY2xhc3MtYmFzZWQgdGhlbiB3ZSBjYW4ganVzdCB0YWNrIHRoYXQgb25cclxuICAgIHJldHVybiAhbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWwgJiYgaGFzQW5pbWF0aW9uQ2xhc3NlcyhuZXdBbmltYXRpb24pO1xyXG4gIH0pO1xyXG5cclxuICBydWxlcy5za2lwLnB1c2goZnVuY3Rpb24oZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XHJcbiAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIGFuaW1hdGUgYW55dGhpbmcgaWYgbm8gY2xhc3NlcyBhcmUgYmVpbmcgYWRkZWQgYW5kXHJcbiAgICAvLyB0aGVyZSBpcyBubyBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkXHJcbiAgICByZXR1cm4gIW5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmICFoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbik7XHJcbiAgfSk7XHJcblxyXG4gIHJ1bGVzLnNraXAucHVzaChmdW5jdGlvbihlbGVtZW50LCBuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcclxuICAgIC8vIHdoeSBzaG91bGQgd2UgdHJpZ2dlciBhIG5ldyBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiBpZiB0aGUgZWxlbWVudCB3aWxsXHJcbiAgICAvLyBiZSByZW1vdmVkIGZyb20gdGhlIERPTSBhbnl3YXk/XHJcbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5ldmVudCA9PSAnbGVhdmUnICYmIG5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xyXG4gIH0pO1xyXG5cclxuICBydWxlcy5za2lwLnB1c2goZnVuY3Rpb24oZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XHJcbiAgICAvLyBpZiB0aGVyZSBpcyBhbiBvbmdvaW5nIGN1cnJlbnQgYW5pbWF0aW9uIHRoZW4gZG9uJ3QgZXZlbiBib3RoZXIgcnVubmluZyB0aGUgY2xhc3MtYmFzZWQgYW5pbWF0aW9uXHJcbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmIGN1cnJlbnRBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUgJiYgIW5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xyXG4gIH0pO1xyXG5cclxuICBydWxlcy5jYW5jZWwucHVzaChmdW5jdGlvbihlbGVtZW50LCBuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcclxuICAgIC8vIHRoZXJlIGNhbiBuZXZlciBiZSB0d28gc3RydWN0dXJhbCBhbmltYXRpb25zIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZVxyXG4gICAgcmV0dXJuIGN1cnJlbnRBbmltYXRpb24uc3RydWN0dXJhbCAmJiBuZXdBbmltYXRpb24uc3RydWN0dXJhbDtcclxuICB9KTtcclxuXHJcbiAgcnVsZXMuY2FuY2VsLnB1c2goZnVuY3Rpb24oZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XHJcbiAgICAvLyBpZiB0aGUgcHJldmlvdXMgYW5pbWF0aW9uIGlzIGFscmVhZHkgcnVubmluZywgYnV0IHRoZSBuZXcgYW5pbWF0aW9uIHdpbGxcclxuICAgIC8vIGJlIHRyaWdnZXJlZCwgYnV0IHRoZSBuZXcgYW5pbWF0aW9uIGlzIHN0cnVjdHVyYWxcclxuICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uLnN0YXRlID09PSBSVU5OSU5HX1NUQVRFICYmIG5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsO1xyXG4gIH0pO1xyXG5cclxuICBydWxlcy5jYW5jZWwucHVzaChmdW5jdGlvbihlbGVtZW50LCBuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcclxuICAgIC8vIGNhbmNlbCB0aGUgYW5pbWF0aW9uIGlmIGNsYXNzZXMgYWRkZWQgLyByZW1vdmVkIGluIGJvdGggYW5pbWF0aW9uIGNhbmNlbCBlYWNoIG90aGVyIG91dCxcclxuICAgIC8vIGJ1dCBvbmx5IGlmIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBpc24ndCBzdHJ1Y3R1cmFsXHJcblxyXG4gICAgaWYgKGN1cnJlbnRBbmltYXRpb24uc3RydWN0dXJhbCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHZhciBuQSA9IG5ld0FuaW1hdGlvbi5hZGRDbGFzcztcclxuICAgIHZhciBuUiA9IG5ld0FuaW1hdGlvbi5yZW1vdmVDbGFzcztcclxuICAgIHZhciBjQSA9IGN1cnJlbnRBbmltYXRpb24uYWRkQ2xhc3M7XHJcbiAgICB2YXIgY1IgPSBjdXJyZW50QW5pbWF0aW9uLnJlbW92ZUNsYXNzO1xyXG5cclxuICAgIC8vIGVhcmx5IGRldGVjdGlvbiB0byBzYXZlIHRoZSBnbG9iYWwgQ1BVIHNob3J0YWdlIDopXHJcbiAgICBpZiAoKGlzVW5kZWZpbmVkKG5BKSAmJiBpc1VuZGVmaW5lZChuUikpIHx8IChpc1VuZGVmaW5lZChjQSkgJiYgaXNVbmRlZmluZWQoY1IpKSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGhhc01hdGNoaW5nQ2xhc3NlcyhuQSwgY1IpIHx8IGhhc01hdGNoaW5nQ2xhc3NlcyhuUiwgY0EpO1xyXG4gIH0pO1xyXG5cclxuICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRkb2N1bWVudCcsICckJEhhc2hNYXAnLFxyXG4gICAgICAgICAgICAgICAnJCRhbmltYXRpb24nLCAnJCRBbmltYXRlUnVubmVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJCRqcUxpdGUnLCAnJCRmb3JjZVJlZmxvdycsXHJcbiAgICAgICBmdW5jdGlvbigkJHJBRiwgICAkcm9vdFNjb3BlLCAgICRyb290RWxlbWVudCwgICAkZG9jdW1lbnQsICAgJCRIYXNoTWFwLFxyXG4gICAgICAgICAgICAgICAgJCRhbmltYXRpb24sICAgJCRBbmltYXRlUnVubmVyLCAgICR0ZW1wbGF0ZVJlcXVlc3QsICAgJCRqcUxpdGUsICAgJCRmb3JjZVJlZmxvdykge1xyXG5cclxuICAgIHZhciBhY3RpdmVBbmltYXRpb25zTG9va3VwID0gbmV3ICQkSGFzaE1hcCgpO1xyXG4gICAgdmFyIGRpc2FibGVkRWxlbWVudHNMb29rdXAgPSBuZXcgJCRIYXNoTWFwKCk7XHJcbiAgICB2YXIgYW5pbWF0aW9uc0VuYWJsZWQgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBvc3REaWdlc3RUYXNrRmFjdG9yeSgpIHtcclxuICAgICAgdmFyIHBvc3REaWdlc3RDYWxsZWQgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgICAgLy8gd2Ugb25seSBpc3N1ZSBhIGNhbGwgdG8gcG9zdERpZ2VzdCBiZWZvcmVcclxuICAgICAgICAvLyBpdCBoYXMgZmlyc3QgcGFzc2VkLiBUaGlzIHByZXZlbnRzIGFueSBjYWxsYmFja3NcclxuICAgICAgICAvLyBmcm9tIG5vdCBmaXJpbmcgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWRcclxuICAgICAgICAvLyBzaW5jZSBpdCB3aWxsIGJlIG91dCBvZiB0aGUgZGlnZXN0IGN5Y2xlLlxyXG4gICAgICAgIGlmIChwb3N0RGlnZXN0Q2FsbGVkKSB7XHJcbiAgICAgICAgICBmbigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcG9zdERpZ2VzdENhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGZuKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gV2FpdCB1bnRpbCBhbGwgZGlyZWN0aXZlIGFuZCByb3V0ZS1yZWxhdGVkIHRlbXBsYXRlcyBhcmUgZG93bmxvYWRlZCBhbmRcclxuICAgIC8vIGNvbXBpbGVkLiBUaGUgJHRlbXBsYXRlUmVxdWVzdC50b3RhbFBlbmRpbmdSZXF1ZXN0cyB2YXJpYWJsZSBrZWVwcyB0cmFjayBvZlxyXG4gICAgLy8gYWxsIG9mIHRoZSByZW1vdGUgdGVtcGxhdGVzIGJlaW5nIGN1cnJlbnRseSBkb3dubG9hZGVkLiBJZiB0aGVyZSBhcmUgbm9cclxuICAgIC8vIHRlbXBsYXRlcyBjdXJyZW50bHkgZG93bmxvYWRpbmcgdGhlbiB0aGUgd2F0Y2hlciB3aWxsIHN0aWxsIGZpcmUgYW55d2F5LlxyXG4gICAgdmFyIGRlcmVnaXN0ZXJXYXRjaCA9ICRyb290U2NvcGUuJHdhdGNoKFxyXG4gICAgICBmdW5jdGlvbigpIHsgcmV0dXJuICR0ZW1wbGF0ZVJlcXVlc3QudG90YWxQZW5kaW5nUmVxdWVzdHMgPT09IDA7IH0sXHJcbiAgICAgIGZ1bmN0aW9uKGlzRW1wdHkpIHtcclxuICAgICAgICBpZiAoIWlzRW1wdHkpIHJldHVybjtcclxuICAgICAgICBkZXJlZ2lzdGVyV2F0Y2goKTtcclxuXHJcbiAgICAgICAgLy8gTm93IHRoYXQgYWxsIHRlbXBsYXRlcyBoYXZlIGJlZW4gZG93bmxvYWRlZCwgJGFuaW1hdGUgd2lsbCB3YWl0IHVudGlsXHJcbiAgICAgICAgLy8gdGhlIHBvc3QgZGlnZXN0IHF1ZXVlIGlzIGVtcHR5IGJlZm9yZSBlbmFibGluZyBhbmltYXRpb25zLiBCeSBoYXZpbmcgdHdvXHJcbiAgICAgICAgLy8gY2FsbHMgdG8gJHBvc3REaWdlc3QgY2FsbHMgd2UgY2FuIGVuc3VyZSB0aGF0IHRoZSBmbGFnIGlzIGVuYWJsZWQgYXQgdGhlXHJcbiAgICAgICAgLy8gdmVyeSBlbmQgb2YgdGhlIHBvc3QgZGlnZXN0IHF1ZXVlLiBTaW5jZSBhbGwgb2YgdGhlIGFuaW1hdGlvbnMgaW4gJGFuaW1hdGVcclxuICAgICAgICAvLyB1c2UgJHBvc3REaWdlc3QsIGl0J3MgaW1wb3J0YW50IHRoYXQgdGhlIGNvZGUgYmVsb3cgZXhlY3V0ZXMgYXQgdGhlIGVuZC5cclxuICAgICAgICAvLyBUaGlzIGJhc2ljYWxseSBtZWFucyB0aGF0IHRoZSBwYWdlIGlzIGZ1bGx5IGRvd25sb2FkZWQgYW5kIGNvbXBpbGVkIGJlZm9yZVxyXG4gICAgICAgIC8vIGFueSBhbmltYXRpb25zIGFyZSB0cmlnZ2VyZWQuXHJcbiAgICAgICAgJHJvb3RTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gd2UgY2hlY2sgZm9yIG51bGwgZGlyZWN0bHkgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGFwcGxpY2F0aW9uIGFscmVhZHkgY2FsbGVkXHJcbiAgICAgICAgICAgIC8vIC5lbmFibGVkKCkgd2l0aCB3aGF0ZXZlciBhcmd1bWVudHMgdGhhdCBpdCBwcm92aWRlZCBpdCB3aXRoXHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25zRW5hYmxlZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIGFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgdmFyIGNhbGxiYWNrUmVnaXN0cnkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG5cclxuICAgIC8vIHJlbWVtYmVyIHRoYXQgdGhlIGNsYXNzTmFtZUZpbHRlciBpcyBzZXQgZHVyaW5nIHRoZSBwcm92aWRlci9jb25maWdcclxuICAgIC8vIHN0YWdlIHRoZXJlZm9yZSB3ZSBjYW4gb3B0aW1pemUgaGVyZSBhbmQgc2V0dXAgYSBoZWxwZXIgZnVuY3Rpb25cclxuICAgIHZhciBjbGFzc05hbWVGaWx0ZXIgPSAkYW5pbWF0ZVByb3ZpZGVyLmNsYXNzTmFtZUZpbHRlcigpO1xyXG4gICAgdmFyIGlzQW5pbWF0YWJsZUNsYXNzTmFtZSA9ICFjbGFzc05hbWVGaWx0ZXJcclxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfVxyXG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lRmlsdGVyLnRlc3QoY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemVBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGFuaW1hdGlvbikge1xyXG4gICAgICByZXR1cm4gbWVyZ2VBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGFuaW1hdGlvbiwge30pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXHJcbiAgICB2YXIgY29udGFpbnMgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgfHwgZnVuY3Rpb24oYXJnKSB7XHJcbiAgICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxyXG4gICAgICByZXR1cm4gdGhpcyA9PT0gYXJnIHx8ICEhKHRoaXMuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYXJnKSAmIDE2KTtcclxuICAgICAgLy8ganNoaW50IGJpdHdpc2U6IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZmluZENhbGxiYWNrcyhwYXJlbnQsIGVsZW1lbnQsIGV2ZW50KSB7XHJcbiAgICAgIHZhciB0YXJnZXROb2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcclxuICAgICAgdmFyIHRhcmdldFBhcmVudE5vZGUgPSBnZXREb21Ob2RlKHBhcmVudCk7XHJcblxyXG4gICAgICB2YXIgbWF0Y2hlcyA9IFtdO1xyXG4gICAgICB2YXIgZW50cmllcyA9IGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdO1xyXG4gICAgICBpZiAoZW50cmllcykge1xyXG4gICAgICAgIGZvckVhY2goZW50cmllcywgZnVuY3Rpb24oZW50cnkpIHtcclxuICAgICAgICAgIGlmIChjb250YWlucy5jYWxsKGVudHJ5Lm5vZGUsIHRhcmdldE5vZGUpKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChlbnRyeS5jYWxsYmFjayk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50ID09PSAnbGVhdmUnICYmIGNvbnRhaW5zLmNhbGwoZW50cnkubm9kZSwgdGFyZ2V0UGFyZW50Tm9kZSkpIHtcclxuICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGVudHJ5LmNhbGxiYWNrKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmlsdGVyRnJvbVJlZ2lzdHJ5KGxpc3QsIG1hdGNoQ29udGFpbmVyLCBtYXRjaENhbGxiYWNrKSB7XHJcbiAgICAgIHZhciBjb250YWluZXJOb2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKG1hdGNoQ29udGFpbmVyKTtcclxuICAgICAgcmV0dXJuIGxpc3QuZmlsdGVyKGZ1bmN0aW9uKGVudHJ5KSB7XHJcbiAgICAgICAgdmFyIGlzTWF0Y2ggPSBlbnRyeS5ub2RlID09PSBjb250YWluZXJOb2RlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICghbWF0Y2hDYWxsYmFjayB8fCBlbnRyeS5jYWxsYmFjayA9PT0gbWF0Y2hDYWxsYmFjayk7XHJcbiAgICAgICAgcmV0dXJuICFpc01hdGNoO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhbnVwRXZlbnRMaXN0ZW5lcnMocGhhc2UsIGVsZW1lbnQpIHtcclxuICAgICAgaWYgKHBoYXNlID09PSAnY2xvc2UnICYmICFlbGVtZW50WzBdLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYXR0YWNoZWQgdG8gYSBwYXJlbnROb2RlLCBpdCBoYXMgYmVlbiByZW1vdmVkIGJ5XHJcbiAgICAgICAgLy8gdGhlIGRvbU9wZXJhdGlvbiwgYW5kIHdlIGNhbiBzYWZlbHkgcmVtb3ZlIHRoZSBldmVudCBjYWxsYmFja3NcclxuICAgICAgICAkYW5pbWF0ZS5vZmYoZWxlbWVudCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgJGFuaW1hdGUgPSB7XHJcbiAgICAgIG9uOiBmdW5jdGlvbihldmVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGNvbnRhaW5lcik7XHJcbiAgICAgICAgY2FsbGJhY2tSZWdpc3RyeVtldmVudF0gPSBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XSB8fCBbXTtcclxuICAgICAgICBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XS5wdXNoKHtcclxuICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjYWxsYmFjayB3aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NXHJcbiAgICAgICAganFMaXRlKGNvbnRhaW5lcikub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KG5vZGUpO1xyXG5cclxuICAgICAgICAgIGlmICghYW5pbWF0aW9uRGV0YWlscykge1xyXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGFuIGFuaW1hdGlvbiBvbmdvaW5nLCB0aGUgY2FsbGJhY2sgY2FsbGluZyBjb2RlIHdpbGwgcmVtb3ZlXHJcbiAgICAgICAgICAgIC8vIHRoZSBldmVudCBsaXN0ZW5lcnMuIElmIHdlJ2QgcmVtb3ZlIGhlcmUsIHRoZSBjYWxsYmFja3Mgd291bGQgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIGFuaW1hdGlvbiBlbmRzXHJcbiAgICAgICAgICAgICRhbmltYXRlLm9mZihldmVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgIWlzU3RyaW5nKGFyZ3VtZW50c1swXSkpIHtcclxuICAgICAgICAgIGNvbnRhaW5lciA9IGFyZ3VtZW50c1swXTtcclxuICAgICAgICAgIGZvciAodmFyIGV2ZW50VHlwZSBpbiBjYWxsYmFja1JlZ2lzdHJ5KSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRUeXBlXSA9IGZpbHRlckZyb21SZWdpc3RyeShjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50VHlwZV0sIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XTtcclxuICAgICAgICBpZiAoIWVudHJpZXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgY2FsbGJhY2tSZWdpc3RyeVtldmVudF0gPSBhcmd1bWVudHMubGVuZ3RoID09PSAxXHJcbiAgICAgICAgICAgID8gbnVsbFxyXG4gICAgICAgICAgICA6IGZpbHRlckZyb21SZWdpc3RyeShlbnRyaWVzLCBjb250YWluZXIsIGNhbGxiYWNrKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHBpbjogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgIGFzc2VydEFyZyhpc0VsZW1lbnQoZWxlbWVudCksICdlbGVtZW50JywgJ25vdCBhbiBlbGVtZW50Jyk7XHJcbiAgICAgICAgYXNzZXJ0QXJnKGlzRWxlbWVudChwYXJlbnRFbGVtZW50KSwgJ3BhcmVudEVsZW1lbnQnLCAnbm90IGFuIGVsZW1lbnQnKTtcclxuICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9QSU5fREFUQSwgcGFyZW50RWxlbWVudCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgb3B0aW9ucywgZG9tT3BlcmF0aW9uKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24gPSBkb21PcGVyYXRpb247XHJcbiAgICAgICAgcmV0dXJuIHF1ZXVlQW5pbWF0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIHRoaXMgbWV0aG9kIGhhcyBmb3VyIHNpZ25hdHVyZXM6XHJcbiAgICAgIC8vICAoKSAtIGdsb2JhbCBnZXR0ZXJcclxuICAgICAgLy8gIChib29sKSAtIGdsb2JhbCBzZXR0ZXJcclxuICAgICAgLy8gIChlbGVtZW50KSAtIGVsZW1lbnQgZ2V0dGVyXHJcbiAgICAgIC8vICAoZWxlbWVudCwgYm9vbCkgLSBlbGVtZW50IHNldHRlcjxGMzc+XHJcbiAgICAgIGVuYWJsZWQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGJvb2wpIHtcclxuICAgICAgICB2YXIgYXJnQ291bnQgPSBhcmd1bWVudHMubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoYXJnQ291bnQgPT09IDApIHtcclxuICAgICAgICAgIC8vICgpIC0gR2xvYmFsIGdldHRlclxyXG4gICAgICAgICAgYm9vbCA9ICEhYW5pbWF0aW9uc0VuYWJsZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhciBoYXNFbGVtZW50ID0gaXNFbGVtZW50KGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgIGlmICghaGFzRWxlbWVudCkge1xyXG4gICAgICAgICAgICAvLyAoYm9vbCkgLSBHbG9iYWwgc2V0dGVyXHJcbiAgICAgICAgICAgIGJvb2wgPSBhbmltYXRpb25zRW5hYmxlZCA9ICEhZWxlbWVudDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhcmdDb3VudCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIC8vIChlbGVtZW50KSAtIEVsZW1lbnQgZ2V0dGVyXHJcbiAgICAgICAgICAgICAgYm9vbCA9ICFkaXNhYmxlZEVsZW1lbnRzTG9va3VwLmdldChub2RlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyAoZWxlbWVudCwgYm9vbCkgLSBFbGVtZW50IHNldHRlclxyXG4gICAgICAgICAgICAgIGRpc2FibGVkRWxlbWVudHNMb29rdXAucHV0KG5vZGUsICFib29sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJvb2w7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuICRhbmltYXRlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHF1ZXVlQW5pbWF0aW9uKGVsZW1lbnQsIGV2ZW50LCBpbml0aWFsT3B0aW9ucykge1xyXG4gICAgICAvLyB3ZSBhbHdheXMgbWFrZSBhIGNvcHkgb2YgdGhlIG9wdGlvbnMgc2luY2VcclxuICAgICAgLy8gdGhlcmUgc2hvdWxkIG5ldmVyIGJlIGFueSBzaWRlIGVmZmVjdHMgb25cclxuICAgICAgLy8gdGhlIGlucHV0IGRhdGEgd2hlbiBydW5uaW5nIGAkYW5pbWF0ZUNzc2AuXHJcbiAgICAgIHZhciBvcHRpb25zID0gY29weShpbml0aWFsT3B0aW9ucyk7XHJcblxyXG4gICAgICB2YXIgbm9kZSwgcGFyZW50O1xyXG4gICAgICBlbGVtZW50ID0gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xyXG4gICAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0aW9uT3B0aW9ucyhvcHRpb25zKTtcclxuXHJcbiAgICAgIC8vIHdlIGNyZWF0ZSBhIGZha2UgcnVubmVyIHdpdGggYSB3b3JraW5nIHByb21pc2UuXHJcbiAgICAgIC8vIFRoZXNlIG1ldGhvZHMgd2lsbCBiZWNvbWUgYXZhaWxhYmxlIGFmdGVyIHRoZSBkaWdlc3QgaGFzIHBhc3NlZFxyXG4gICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpO1xyXG5cclxuICAgICAgLy8gdGhpcyBpcyB1c2VkIHRvIHRyaWdnZXIgY2FsbGJhY2tzIGluIHBvc3REaWdlc3QgbW9kZVxyXG4gICAgICB2YXIgcnVuSW5OZXh0UG9zdERpZ2VzdE9yTm93ID0gcG9zdERpZ2VzdFRhc2tGYWN0b3J5KCk7XHJcblxyXG4gICAgICBpZiAoaXNBcnJheShvcHRpb25zLmFkZENsYXNzKSkge1xyXG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBvcHRpb25zLmFkZENsYXNzLmpvaW4oJyAnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MgJiYgIWlzU3RyaW5nKG9wdGlvbnMuYWRkQ2xhc3MpKSB7XHJcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0FycmF5KG9wdGlvbnMucmVtb3ZlQ2xhc3MpKSB7XHJcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG9wdGlvbnMucmVtb3ZlQ2xhc3Muam9pbignICcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcyAmJiAhaXNTdHJpbmcob3B0aW9ucy5yZW1vdmVDbGFzcykpIHtcclxuICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSAmJiAhaXNPYmplY3Qob3B0aW9ucy5mcm9tKSkge1xyXG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnRvICYmICFpc09iamVjdChvcHRpb25zLnRvKSkge1xyXG4gICAgICAgIG9wdGlvbnMudG8gPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB0aGVyZSBhcmUgc2l0dWF0aW9ucyB3aGVyZSBhIGRpcmVjdGl2ZSBpc3N1ZXMgYW4gYW5pbWF0aW9uIGZvclxyXG4gICAgICAvLyBhIGpxTGl0ZSB3cmFwcGVyIHRoYXQgY29udGFpbnMgb25seSBjb21tZW50IG5vZGVzLi4uIElmIHRoaXNcclxuICAgICAgLy8gaGFwcGVucyB0aGVuIHRoZXJlIGlzIG5vIHdheSB3ZSBjYW4gcGVyZm9ybSBhbiBhbmltYXRpb25cclxuICAgICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICByZXR1cm4gcnVubmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgY2xhc3NOYW1lID0gW25vZGUuY2xhc3NOYW1lLCBvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzXS5qb2luKCcgJyk7XHJcbiAgICAgIGlmICghaXNBbmltYXRhYmxlQ2xhc3NOYW1lKGNsYXNzTmFtZSkpIHtcclxuICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgIHJldHVybiBydW5uZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBpc1N0cnVjdHVyYWwgPSBbJ2VudGVyJywgJ21vdmUnLCAnbGVhdmUnXS5pbmRleE9mKGV2ZW50KSA+PSAwO1xyXG5cclxuICAgICAgdmFyIGRvY3VtZW50SGlkZGVuID0gJGRvY3VtZW50WzBdLmhpZGRlbjtcclxuXHJcbiAgICAgIC8vIHRoaXMgaXMgYSBoYXJkIGRpc2FibGUgb2YgYWxsIGFuaW1hdGlvbnMgZm9yIHRoZSBhcHBsaWNhdGlvbiBvciBvblxyXG4gICAgICAvLyB0aGUgZWxlbWVudCBpdHNlbGYsIHRoZXJlZm9yZSAgdGhlcmUgaXMgbm8gbmVlZCB0byBjb250aW51ZSBmdXJ0aGVyXHJcbiAgICAgIC8vIHBhc3QgdGhpcyBwb2ludCBpZiBub3QgZW5hYmxlZFxyXG4gICAgICAvLyBBbmltYXRpb25zIGFyZSBhbHNvIGRpc2FibGVkIGlmIHRoZSBkb2N1bWVudCBpcyBjdXJyZW50bHkgaGlkZGVuIChwYWdlIGlzIG5vdCB2aXNpYmxlXHJcbiAgICAgIC8vIHRvIHRoZSB1c2VyKSwgYmVjYXVzZSBicm93c2VycyBzbG93IGRvd24gb3IgZG8gbm90IGZsdXNoIGNhbGxzIHRvIHJlcXVlc3RBbmltYXRpb25GcmFtZVxyXG4gICAgICB2YXIgc2tpcEFuaW1hdGlvbnMgPSAhYW5pbWF0aW9uc0VuYWJsZWQgfHwgZG9jdW1lbnRIaWRkZW4gfHwgZGlzYWJsZWRFbGVtZW50c0xvb2t1cC5nZXQobm9kZSk7XHJcbiAgICAgIHZhciBleGlzdGluZ0FuaW1hdGlvbiA9ICghc2tpcEFuaW1hdGlvbnMgJiYgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSkpIHx8IHt9O1xyXG4gICAgICB2YXIgaGFzRXhpc3RpbmdBbmltYXRpb24gPSAhIWV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlO1xyXG5cclxuICAgICAgLy8gdGhlcmUgaXMgbm8gcG9pbnQgaW4gdHJhdmVyc2luZyB0aGUgc2FtZSBjb2xsZWN0aW9uIG9mIHBhcmVudCBhbmNlc3RvcnMgaWYgYSBmb2xsb3d1cFxyXG4gICAgICAvLyBhbmltYXRpb24gd2lsbCBiZSBydW4gb24gdGhlIHNhbWUgZWxlbWVudCB0aGF0IGFscmVhZHkgZGlkIGFsbCB0aGF0IGNoZWNraW5nIHdvcmtcclxuICAgICAgaWYgKCFza2lwQW5pbWF0aW9ucyAmJiAoIWhhc0V4aXN0aW5nQW5pbWF0aW9uIHx8IGV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlICE9IFBSRV9ESUdFU1RfU1RBVEUpKSB7XHJcbiAgICAgICAgc2tpcEFuaW1hdGlvbnMgPSAhYXJlQW5pbWF0aW9uc0FsbG93ZWQoZWxlbWVudCwgcGFyZW50LCBldmVudCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChza2lwQW5pbWF0aW9ucykge1xyXG4gICAgICAgIC8vIENhbGxiYWNrcyBzaG91bGQgZmlyZSBldmVuIGlmIHRoZSBkb2N1bWVudCBpcyBoaWRkZW4gKHJlZ3Jlc3Npb24gZml4IGZvciBpc3N1ZSAjMTQxMjApXHJcbiAgICAgICAgaWYgKGRvY3VtZW50SGlkZGVuKSBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCAnc3RhcnQnKTtcclxuICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgIGlmIChkb2N1bWVudEhpZGRlbikgbm90aWZ5UHJvZ3Jlc3MocnVubmVyLCBldmVudCwgJ2Nsb3NlJyk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzU3RydWN0dXJhbCkge1xyXG4gICAgICAgIGNsb3NlQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbmV3QW5pbWF0aW9uID0ge1xyXG4gICAgICAgIHN0cnVjdHVyYWw6IGlzU3RydWN0dXJhbCxcclxuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICBhZGRDbGFzczogb3B0aW9ucy5hZGRDbGFzcyxcclxuICAgICAgICByZW1vdmVDbGFzczogb3B0aW9ucy5yZW1vdmVDbGFzcyxcclxuICAgICAgICBjbG9zZTogY2xvc2UsXHJcbiAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcclxuICAgICAgICBydW5uZXI6IHJ1bm5lclxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKGhhc0V4aXN0aW5nQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgdmFyIHNraXBBbmltYXRpb25GbGFnID0gaXNBbGxvd2VkKCdza2lwJywgZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBleGlzdGluZ0FuaW1hdGlvbik7XHJcbiAgICAgICAgaWYgKHNraXBBbmltYXRpb25GbGFnKSB7XHJcbiAgICAgICAgICBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcclxuICAgICAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1lcmdlQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBleGlzdGluZ0FuaW1hdGlvbiwgbmV3QW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQW5pbWF0aW9uLnJ1bm5lcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNhbmNlbEFuaW1hdGlvbkZsYWcgPSBpc0FsbG93ZWQoJ2NhbmNlbCcsIGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgZXhpc3RpbmdBbmltYXRpb24pO1xyXG4gICAgICAgIGlmIChjYW5jZWxBbmltYXRpb25GbGFnKSB7XHJcbiAgICAgICAgICBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcclxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIGVuZCB0aGUgYW5pbWF0aW9uIHJpZ2h0IGF3YXkgYW5kIGl0IGlzIHNhZmVcclxuICAgICAgICAgICAgLy8gdG8gZG8gc28gc2luY2UgdGhlIGFuaW1hdGlvbiBpcyBhbHJlYWR5IHJ1bm5pbmcgYW5kIHRoZVxyXG4gICAgICAgICAgICAvLyBydW5uZXIgY2FsbGJhY2sgY29kZSB3aWxsIHJ1biBpbiBhc3luY1xyXG4gICAgICAgICAgICBleGlzdGluZ0FuaW1hdGlvbi5ydW5uZXIuZW5kKCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0cnVjdHVyYWwpIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSBhbmltYXRpb24gaXMgcXVldWVkIGludG8gYSBkaWdlc3QsIGJ1dFxyXG4gICAgICAgICAgICAvLyBoYXNuJ3Qgc3RhcnRlZCB5ZXQuIFRoZXJlZm9yZSBpdCBpcyBzYWZlIHRvIHJ1biB0aGUgY2xvc2VcclxuICAgICAgICAgICAgLy8gbWV0aG9kIHdoaWNoIHdpbGwgY2FsbCB0aGUgcnVubmVyIG1ldGhvZHMgaW4gYXN5bmMuXHJcbiAgICAgICAgICAgIGV4aXN0aW5nQW5pbWF0aW9uLmNsb3NlKCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgbWVyZ2UgdGhlIG5ldyBhbmltYXRpb24gb3B0aW9ucyBpbnRvIGV4aXN0aW5nIGFuaW1hdGlvbiBvcHRpb25zXHJcbiAgICAgICAgICAgIG1lcmdlQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBleGlzdGluZ0FuaW1hdGlvbiwgbmV3QW5pbWF0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0FuaW1hdGlvbi5ydW5uZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGEgam9pbmVkIGFuaW1hdGlvbiBtZWFucyB0aGF0IHRoaXMgYW5pbWF0aW9uIHdpbGwgdGFrZSBvdmVyIHRoZSBleGlzdGluZyBvbmVcclxuICAgICAgICAgIC8vIHNvIGFuIGV4YW1wbGUgd291bGQgaW52b2x2ZSBhIGxlYXZlIGFuaW1hdGlvbiB0YWtpbmcgb3ZlciBhbiBlbnRlci4gVGhlbiB3aGVuXHJcbiAgICAgICAgICAvLyB0aGUgcG9zdERpZ2VzdCBraWNrcyBpbiB0aGUgZW50ZXIgd2lsbCBiZSBpZ25vcmVkLlxyXG4gICAgICAgICAgdmFyIGpvaW5BbmltYXRpb25GbGFnID0gaXNBbGxvd2VkKCdqb2luJywgZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBleGlzdGluZ0FuaW1hdGlvbik7XHJcbiAgICAgICAgICBpZiAoam9pbkFuaW1hdGlvbkZsYWcpIHtcclxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlID09PSBSVU5OSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgbm9ybWFsaXplQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBuZXdBbmltYXRpb24pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFwcGx5R2VuZXJhdGVkUHJlcGFyYXRpb25DbGFzc2VzKGVsZW1lbnQsIGlzU3RydWN0dXJhbCA/IGV2ZW50IDogbnVsbCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgIGV2ZW50ID0gbmV3QW5pbWF0aW9uLmV2ZW50ID0gZXhpc3RpbmdBbmltYXRpb24uZXZlbnQ7XHJcbiAgICAgICAgICAgICAgb3B0aW9ucyA9IG1lcmdlQW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBleGlzdGluZ0FuaW1hdGlvbiwgbmV3QW5pbWF0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgLy93ZSByZXR1cm4gdGhlIHNhbWUgcnVubmVyIHNpbmNlIG9ubHkgdGhlIG9wdGlvbiB2YWx1ZXMgb2YgdGhpcyBhbmltYXRpb24gd2lsbFxyXG4gICAgICAgICAgICAgIC8vYmUgZmVkIGludG8gdGhlIGBleGlzdGluZ0FuaW1hdGlvbmAuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQW5pbWF0aW9uLnJ1bm5lcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBub3JtYWxpemF0aW9uIGluIHRoaXMgY2FzZSBtZWFucyB0aGF0IGl0IHJlbW92ZXMgcmVkdW5kYW50IENTUyBjbGFzc2VzIHRoYXRcclxuICAgICAgICAvLyBhbHJlYWR5IGV4aXN0IChhZGRDbGFzcykgb3IgZG8gbm90IGV4aXN0IChyZW1vdmVDbGFzcykgb24gdGhlIGVsZW1lbnRcclxuICAgICAgICBub3JtYWxpemVBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIG5ld0FuaW1hdGlvbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHdoZW4gdGhlIG9wdGlvbnMgYXJlIG1lcmdlZCBhbmQgY2xlYW5lZCB1cCB3ZSBtYXkgZW5kIHVwIG5vdCBoYXZpbmcgdG8gZG9cclxuICAgICAgLy8gYW4gYW5pbWF0aW9uIGF0IGFsbCwgdGhlcmVmb3JlIHdlIHNob3VsZCBjaGVjayB0aGlzIGJlZm9yZSBpc3N1aW5nIGEgcG9zdFxyXG4gICAgICAvLyBkaWdlc3QgY2FsbGJhY2suIFN0cnVjdHVyYWwgYW5pbWF0aW9ucyB3aWxsIGFsd2F5cyBydW4gbm8gbWF0dGVyIHdoYXQuXHJcbiAgICAgIHZhciBpc1ZhbGlkQW5pbWF0aW9uID0gbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XHJcbiAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xyXG4gICAgICAgIC8vIGFuaW1hdGUgKGZyb20vdG8pIGNhbiBiZSBxdWlja2x5IGNoZWNrZWQgZmlyc3QsIG90aGVyd2lzZSB3ZSBjaGVjayBpZiBhbnkgY2xhc3NlcyBhcmUgcHJlc2VudFxyXG4gICAgICAgIGlzVmFsaWRBbmltYXRpb24gPSAobmV3QW5pbWF0aW9uLmV2ZW50ID09PSAnYW5pbWF0ZScgJiYgT2JqZWN0LmtleXMobmV3QW5pbWF0aW9uLm9wdGlvbnMudG8gfHwge30pLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xyXG4gICAgICAgIGNsb3NlKCk7XHJcbiAgICAgICAgY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUoZWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gdGhlIGNvdW50ZXIga2VlcHMgdHJhY2sgb2YgY2FuY2VsbGVkIGFuaW1hdGlvbnNcclxuICAgICAgdmFyIGNvdW50ZXIgPSAoZXhpc3RpbmdBbmltYXRpb24uY291bnRlciB8fCAwKSArIDE7XHJcbiAgICAgIG5ld0FuaW1hdGlvbi5jb3VudGVyID0gY291bnRlcjtcclxuXHJcbiAgICAgIG1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUoZWxlbWVudCwgUFJFX0RJR0VTVF9TVEFURSwgbmV3QW5pbWF0aW9uKTtcclxuXHJcbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhbmltYXRpb25EZXRhaWxzID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSk7XHJcbiAgICAgICAgdmFyIGFuaW1hdGlvbkNhbmNlbGxlZCA9ICFhbmltYXRpb25EZXRhaWxzO1xyXG4gICAgICAgIGFuaW1hdGlvbkRldGFpbHMgPSBhbmltYXRpb25EZXRhaWxzIHx8IHt9O1xyXG5cclxuICAgICAgICAvLyBpZiBhZGRDbGFzcy9yZW1vdmVDbGFzcyBpcyBjYWxsZWQgYmVmb3JlIHNvbWV0aGluZyBsaWtlIGVudGVyIHRoZW4gdGhlXHJcbiAgICAgICAgLy8gcmVnaXN0ZXJlZCBwYXJlbnQgZWxlbWVudCBtYXkgbm90IGJlIHByZXNlbnQuIFRoZSBjb2RlIGJlbG93IHdpbGwgZW5zdXJlXHJcbiAgICAgICAgLy8gdGhhdCBhIGZpbmFsIHZhbHVlIGZvciBwYXJlbnQgZWxlbWVudCBpcyBvYnRhaW5lZFxyXG4gICAgICAgIHZhciBwYXJlbnRFbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKSB8fCBbXTtcclxuXHJcbiAgICAgICAgLy8gYW5pbWF0ZS9zdHJ1Y3R1cmFsL2NsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYWxsIGhhdmUgcmVxdWlyZW1lbnRzLiBPdGhlcndpc2UgdGhlcmVcclxuICAgICAgICAvLyBpcyBubyBwb2ludCBpbiBwZXJmb3JtaW5nIGFuIGFuaW1hdGlvbi4gVGhlIHBhcmVudCBub2RlIG11c3QgYWxzbyBiZSBzZXQuXHJcbiAgICAgICAgdmFyIGlzVmFsaWRBbmltYXRpb24gPSBwYXJlbnRFbGVtZW50Lmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoYW5pbWF0aW9uRGV0YWlscy5ldmVudCA9PT0gJ2FuaW1hdGUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbkRldGFpbHMpKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSBwcmV2aW91cyBhbmltYXRpb24gd2FzIGNhbmNlbGxlZFxyXG4gICAgICAgIC8vIGV2ZW4gaWYgdGhlIGZvbGxvdy11cCBhbmltYXRpb24gaXMgdGhlIHNhbWUgZXZlbnRcclxuICAgICAgICBpZiAoYW5pbWF0aW9uQ2FuY2VsbGVkIHx8IGFuaW1hdGlvbkRldGFpbHMuY291bnRlciAhPT0gY291bnRlciB8fCAhaXNWYWxpZEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgLy8gaWYgYW5vdGhlciBhbmltYXRpb24gZGlkIG5vdCB0YWtlIG92ZXIgdGhlbiB3ZSBuZWVkXHJcbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgdGhhdCB0aGUgZG9tT3BlcmF0aW9uIGFuZCBvcHRpb25zIGFyZVxyXG4gICAgICAgICAgLy8gaGFuZGxlZCBhY2NvcmRpbmdseVxyXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICBhcHBseUFuaW1hdGlvbkNsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIGlmIHRoZSBldmVudCBjaGFuZ2VkIGZyb20gc29tZXRoaW5nIGxpa2UgZW50ZXIgdG8gbGVhdmUgdGhlbiB3ZSBkb1xyXG4gICAgICAgICAgLy8gaXQsIG90aGVyd2lzZSBpZiBpdCdzIHRoZSBzYW1lIHRoZW4gdGhlIGVuZCByZXN1bHQgd2lsbCBiZSB0aGUgc2FtZSB0b29cclxuICAgICAgICAgIGlmIChhbmltYXRpb25DYW5jZWxsZWQgfHwgKGlzU3RydWN0dXJhbCAmJiBhbmltYXRpb25EZXRhaWxzLmV2ZW50ICE9PSBldmVudCkpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcclxuICAgICAgICAgICAgcnVubmVyLmVuZCgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIGluIHRoZSBldmVudCB0aGF0IHRoZSBlbGVtZW50IGFuaW1hdGlvbiB3YXMgbm90IGNhbmNlbGxlZCBvciBhIGZvbGxvdy11cCBhbmltYXRpb25cclxuICAgICAgICAgIC8vIGlzbid0IGFsbG93ZWQgdG8gYW5pbWF0ZSBmcm9tIGhlcmUgdGhlbiB3ZSBuZWVkIHRvIGNsZWFyIHRoZSBzdGF0ZSBvZiB0aGUgZWxlbWVudFxyXG4gICAgICAgICAgLy8gc28gdGhhdCBhbnkgZnV0dXJlIGFuaW1hdGlvbnMgd29uJ3QgcmVhZCB0aGUgZXhwaXJlZCBhbmltYXRpb24gZGF0YS5cclxuICAgICAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICBjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZShlbGVtZW50KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGlzIGNvbWJpbmVkIG11bHRpcGxlIGNsYXNzIHRvIGFkZENsYXNzIC8gcmVtb3ZlQ2xhc3MgaW50byBhIHNldENsYXNzIGV2ZW50XHJcbiAgICAgICAgLy8gc28gbG9uZyBhcyBhIHN0cnVjdHVyYWwgZXZlbnQgZGlkIG5vdCB0YWtlIG92ZXIgdGhlIGFuaW1hdGlvblxyXG4gICAgICAgIGV2ZW50ID0gIWFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbCAmJiBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbkRldGFpbHMsIHRydWUpXHJcbiAgICAgICAgICAgID8gJ3NldENsYXNzJ1xyXG4gICAgICAgICAgICA6IGFuaW1hdGlvbkRldGFpbHMuZXZlbnQ7XHJcblxyXG4gICAgICAgIG1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUoZWxlbWVudCwgUlVOTklOR19TVEFURSk7XHJcbiAgICAgICAgdmFyIHJlYWxSdW5uZXIgPSAkJGFuaW1hdGlvbihlbGVtZW50LCBldmVudCwgYW5pbWF0aW9uRGV0YWlscy5vcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcyB3aWxsIHVwZGF0ZSB0aGUgcnVubmVyJ3MgZmxvdy1jb250cm9sIGV2ZW50cyBiYXNlZCBvblxyXG4gICAgICAgIC8vIHRoZSBgcmVhbFJ1bm5lcmAgb2JqZWN0LlxyXG4gICAgICAgIHJ1bm5lci5zZXRIb3N0KHJlYWxSdW5uZXIpO1xyXG4gICAgICAgIG5vdGlmeVByb2dyZXNzKHJ1bm5lciwgZXZlbnQsICdzdGFydCcsIHt9KTtcclxuXHJcbiAgICAgICAgcmVhbFJ1bm5lci5kb25lKGZ1bmN0aW9uKHN0YXR1cykge1xyXG4gICAgICAgICAgY2xvc2UoIXN0YXR1cyk7XHJcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KG5vZGUpO1xyXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMgJiYgYW5pbWF0aW9uRGV0YWlscy5jb3VudGVyID09PSBjb3VudGVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFyRWxlbWVudEFuaW1hdGlvblN0YXRlKGdldERvbU5vZGUoZWxlbWVudCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbm90aWZ5UHJvZ3Jlc3MocnVubmVyLCBldmVudCwgJ2Nsb3NlJywge30pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBydW5uZXI7XHJcblxyXG4gICAgICBmdW5jdGlvbiBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCBwaGFzZSwgZGF0YSkge1xyXG4gICAgICAgIHJ1bkluTmV4dFBvc3REaWdlc3RPck5vdyhmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBmaW5kQ2FsbGJhY2tzKHBhcmVudCwgZWxlbWVudCwgZXZlbnQpO1xyXG4gICAgICAgICAgaWYgKGNhbGxiYWNrcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gZG8gbm90IG9wdGltaXplIHRoaXMgY2FsbCBoZXJlIHRvIFJBRiBiZWNhdXNlXHJcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IGtub3cgaG93IGhlYXZ5IHRoZSBjYWxsYmFjayBjb2RlIGhlcmUgd2lsbFxyXG4gICAgICAgICAgICAvLyBiZSBhbmQgaWYgdGhpcyBjb2RlIGlzIGJ1ZmZlcmVkIHRoZW4gdGhpcyBjYW5cclxuICAgICAgICAgICAgLy8gbGVhZCB0byBhIHBlcmZvcm1hbmNlIHJlZ3Jlc3Npb24uXHJcbiAgICAgICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGZvckVhY2goY2FsbGJhY2tzLCBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZWxlbWVudCwgcGhhc2UsIGRhdGEpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGNsZWFudXBFdmVudExpc3RlbmVycyhwaGFzZSwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2xlYW51cEV2ZW50TGlzdGVuZXJzKHBoYXNlLCBlbGVtZW50KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBydW5uZXIucHJvZ3Jlc3MoZXZlbnQsIHBoYXNlLCBkYXRhKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2xvc2UocmVqZWN0KSB7IC8vIGpzaGludCBpZ25vcmU6bGluZVxyXG4gICAgICAgIGNsZWFyR2VuZXJhdGVkQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBhcHBseUFuaW1hdGlvbkNsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcclxuICAgICAgICBydW5uZXIuY29tcGxldGUoIXJlamVjdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbG9zZUNoaWxkQW5pbWF0aW9ucyhlbGVtZW50KSB7XHJcbiAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcclxuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIE5HX0FOSU1BVEVfQVRUUl9OQU1FICsgJ10nKTtcclxuICAgICAgZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcclxuICAgICAgICB2YXIgc3RhdGUgPSBwYXJzZUludChjaGlsZC5nZXRBdHRyaWJ1dGUoTkdfQU5JTUFURV9BVFRSX05BTUUpKTtcclxuICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KGNoaWxkKTtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscykge1xyXG4gICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFJVTk5JTkdfU1RBVEU6XHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGV0YWlscy5ydW5uZXIuZW5kKCk7XHJcbiAgICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgICAgICAgICBjYXNlIFBSRV9ESUdFU1RfU1RBVEU6XHJcbiAgICAgICAgICAgICAgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5yZW1vdmUoY2hpbGQpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUoZWxlbWVudCkge1xyXG4gICAgICB2YXIgbm9kZSA9IGdldERvbU5vZGUoZWxlbWVudCk7XHJcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKE5HX0FOSU1BVEVfQVRUUl9OQU1FKTtcclxuICAgICAgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5yZW1vdmUobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNNYXRjaGluZ0VsZW1lbnQobm9kZU9yRWxtQSwgbm9kZU9yRWxtQikge1xyXG4gICAgICByZXR1cm4gZ2V0RG9tTm9kZShub2RlT3JFbG1BKSA9PT0gZ2V0RG9tTm9kZShub2RlT3JFbG1CKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZm4gcmV0dXJucyBmYWxzZSBpZiBhbnkgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxyXG4gICAgICogYSkgYW5pbWF0aW9ucyBvbiBhbnkgcGFyZW50IGVsZW1lbnQgYXJlIGRpc2FibGVkLCBhbmQgYW5pbWF0aW9ucyBvbiB0aGUgZWxlbWVudCBhcmVuJ3QgZXhwbGljaXRseSBhbGxvd2VkXHJcbiAgICAgKiBiKSBhIHBhcmVudCBlbGVtZW50IGhhcyBhbiBvbmdvaW5nIHN0cnVjdHVyYWwgYW5pbWF0aW9uLCBhbmQgYW5pbWF0ZUNoaWxkcmVuIGlzIGZhbHNlXHJcbiAgICAgKiBjKSB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiB0aGUgYm9keVxyXG4gICAgICogZCkgdGhlIGVsZW1lbnQgaXMgbm90IGEgY2hpbGQgb2YgdGhlICRyb290RWxlbWVudFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhcmVBbmltYXRpb25zQWxsb3dlZChlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBldmVudCkge1xyXG4gICAgICB2YXIgYm9keUVsZW1lbnQgPSBqcUxpdGUoJGRvY3VtZW50WzBdLmJvZHkpO1xyXG4gICAgICB2YXIgYm9keUVsZW1lbnREZXRlY3RlZCA9IGlzTWF0Y2hpbmdFbGVtZW50KGVsZW1lbnQsIGJvZHlFbGVtZW50KSB8fCBlbGVtZW50WzBdLm5vZGVOYW1lID09PSAnSFRNTCc7XHJcbiAgICAgIHZhciByb290RWxlbWVudERldGVjdGVkID0gaXNNYXRjaGluZ0VsZW1lbnQoZWxlbWVudCwgJHJvb3RFbGVtZW50KTtcclxuICAgICAgdmFyIHBhcmVudEFuaW1hdGlvbkRldGVjdGVkID0gZmFsc2U7XHJcbiAgICAgIHZhciBhbmltYXRlQ2hpbGRyZW47XHJcbiAgICAgIHZhciBlbGVtZW50RGlzYWJsZWQgPSBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLmdldChnZXREb21Ob2RlKGVsZW1lbnQpKTtcclxuXHJcbiAgICAgIHZhciBwYXJlbnRIb3N0ID0ganFMaXRlLmRhdGEoZWxlbWVudFswXSwgTkdfQU5JTUFURV9QSU5fREFUQSk7XHJcbiAgICAgIGlmIChwYXJlbnRIb3N0KSB7XHJcbiAgICAgICAgcGFyZW50RWxlbWVudCA9IHBhcmVudEhvc3Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBhcmVudEVsZW1lbnQgPSBnZXREb21Ob2RlKHBhcmVudEVsZW1lbnQpO1xyXG5cclxuICAgICAgd2hpbGUgKHBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIXJvb3RFbGVtZW50RGV0ZWN0ZWQpIHtcclxuICAgICAgICAgIC8vIGFuZ3VsYXIgZG9lc24ndCB3YW50IHRvIGF0dGVtcHQgdG8gYW5pbWF0ZSBlbGVtZW50cyBvdXRzaWRlIG9mIHRoZSBhcHBsaWNhdGlvblxyXG4gICAgICAgICAgLy8gdGhlcmVmb3JlIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgdGhlIHJvb3RFbGVtZW50IGlzIGFuIGFuY2VzdG9yIG9mIHRoZSBjdXJyZW50IGVsZW1lbnRcclxuICAgICAgICAgIHJvb3RFbGVtZW50RGV0ZWN0ZWQgPSBpc01hdGNoaW5nRWxlbWVudChwYXJlbnRFbGVtZW50LCAkcm9vdEVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSkge1xyXG4gICAgICAgICAgLy8gbm8gcG9pbnQgaW4gaW5zcGVjdGluZyB0aGUgI2RvY3VtZW50IGVsZW1lbnRcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChwYXJlbnRFbGVtZW50KSB8fCB7fTtcclxuICAgICAgICAvLyBlaXRoZXIgYW4gZW50ZXIsIGxlYXZlIG9yIG1vdmUgYW5pbWF0aW9uIHdpbGwgY29tbWVuY2VcclxuICAgICAgICAvLyB0aGVyZWZvcmUgd2UgY2FuJ3QgYWxsb3cgYW55IGFuaW1hdGlvbnMgdG8gdGFrZSBwbGFjZVxyXG4gICAgICAgIC8vIGJ1dCBpZiBhIHBhcmVudCBhbmltYXRpb24gaXMgY2xhc3MtYmFzZWQgdGhlbiB0aGF0J3Mgb2tcclxuICAgICAgICBpZiAoIXBhcmVudEFuaW1hdGlvbkRldGVjdGVkKSB7XHJcbiAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudERpc2FibGVkID0gZGlzYWJsZWRFbGVtZW50c0xvb2t1cC5nZXQocGFyZW50RWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgaWYgKHBhcmVudEVsZW1lbnREaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtZW50RGlzYWJsZWQgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIC8vIGRpc2FibGUgYW5pbWF0aW9ucyBpZiB0aGUgdXNlciBoYXNuJ3QgZXhwbGljaXRseSBlbmFibGVkIGFuaW1hdGlvbnMgb24gdGhlXHJcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgZWxlbWVudFxyXG4gICAgICAgICAgICBlbGVtZW50RGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBlbGVtZW50IGlzIGRpc2FibGVkIHZpYSBwYXJlbnQgZWxlbWVudCwgbm8gbmVlZCB0byBjaGVjayBhbnl0aGluZyBlbHNlXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJlbnRFbGVtZW50RGlzYWJsZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnREaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQgPSBkZXRhaWxzLnN0cnVjdHVyYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoYW5pbWF0ZUNoaWxkcmVuKSB8fCBhbmltYXRlQ2hpbGRyZW4gPT09IHRydWUpIHtcclxuICAgICAgICAgIHZhciB2YWx1ZSA9IGpxTGl0ZS5kYXRhKHBhcmVudEVsZW1lbnQsIE5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSk7XHJcbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBhbmltYXRlQ2hpbGRyZW4gPSB2YWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29udGludWUgdHJhdmVyc2luZyBhdCB0aGlzIHBvaW50XHJcbiAgICAgICAgaWYgKHBhcmVudEFuaW1hdGlvbkRldGVjdGVkICYmIGFuaW1hdGVDaGlsZHJlbiA9PT0gZmFsc2UpIGJyZWFrO1xyXG5cclxuICAgICAgICBpZiAoIWJvZHlFbGVtZW50RGV0ZWN0ZWQpIHtcclxuICAgICAgICAgIC8vIHdlIGFsc28gbmVlZCB0byBlbnN1cmUgdGhhdCB0aGUgZWxlbWVudCBpcyBvciB3aWxsIGJlIGEgcGFydCBvZiB0aGUgYm9keSBlbGVtZW50XHJcbiAgICAgICAgICAvLyBvdGhlcndpc2UgaXQgaXMgcG9pbnRsZXNzIHRvIGV2ZW4gaXNzdWUgYW4gYW5pbWF0aW9uIHRvIGJlIHJlbmRlcmVkXHJcbiAgICAgICAgICBib2R5RWxlbWVudERldGVjdGVkID0gaXNNYXRjaGluZ0VsZW1lbnQocGFyZW50RWxlbWVudCwgYm9keUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJvZHlFbGVtZW50RGV0ZWN0ZWQgJiYgcm9vdEVsZW1lbnREZXRlY3RlZCkge1xyXG4gICAgICAgICAgLy8gSWYgYm90aCBib2R5IGFuZCByb290IGhhdmUgYmVlbiBmb3VuZCwgYW55IG90aGVyIGNoZWNrcyBhcmUgcG9pbnRsZXNzLFxyXG4gICAgICAgICAgLy8gYXMgbm8gYW5pbWF0aW9uIGRhdGEgc2hvdWxkIGxpdmUgb3V0c2lkZSB0aGUgYXBwbGljYXRpb25cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFyb290RWxlbWVudERldGVjdGVkKSB7XHJcbiAgICAgICAgICAvLyBJZiBubyByb290RWxlbWVudCBpcyBkZXRlY3RlZCwgY2hlY2sgaWYgdGhlIHBhcmVudEVsZW1lbnQgaXMgcGlubmVkIHRvIGFub3RoZXIgZWxlbWVudFxyXG4gICAgICAgICAgcGFyZW50SG9zdCA9IGpxTGl0ZS5kYXRhKHBhcmVudEVsZW1lbnQsIE5HX0FOSU1BVEVfUElOX0RBVEEpO1xyXG4gICAgICAgICAgaWYgKHBhcmVudEhvc3QpIHtcclxuICAgICAgICAgICAgLy8gVGhlIHBpbiB0YXJnZXQgZWxlbWVudCBiZWNvbWVzIHRoZSBuZXh0IHBhcmVudCBlbGVtZW50XHJcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBnZXREb21Ob2RlKHBhcmVudEhvc3QpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBhbGxvd0FuaW1hdGlvbiA9ICghcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQgfHwgYW5pbWF0ZUNoaWxkcmVuKSAmJiBlbGVtZW50RGlzYWJsZWQgIT09IHRydWU7XHJcbiAgICAgIHJldHVybiBhbGxvd0FuaW1hdGlvbiAmJiByb290RWxlbWVudERldGVjdGVkICYmIGJvZHlFbGVtZW50RGV0ZWN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFya0VsZW1lbnRBbmltYXRpb25TdGF0ZShlbGVtZW50LCBzdGF0ZSwgZGV0YWlscykge1xyXG4gICAgICBkZXRhaWxzID0gZGV0YWlscyB8fCB7fTtcclxuICAgICAgZGV0YWlscy5zdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xyXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShOR19BTklNQVRFX0FUVFJfTkFNRSwgc3RhdGUpO1xyXG5cclxuICAgICAgdmFyIG9sZFZhbHVlID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSk7XHJcbiAgICAgIHZhciBuZXdWYWx1ZSA9IG9sZFZhbHVlXHJcbiAgICAgICAgICA/IGV4dGVuZChvbGRWYWx1ZSwgZGV0YWlscylcclxuICAgICAgICAgIDogZGV0YWlscztcclxuICAgICAgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5wdXQobm9kZSwgbmV3VmFsdWUpO1xyXG4gICAgfVxyXG4gIH1dO1xyXG59XTtcclxuXHJcbnZhciAkJEFuaW1hdGlvblByb3ZpZGVyID0gWyckYW5pbWF0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJGFuaW1hdGVQcm92aWRlcikge1xyXG4gIHZhciBOR19BTklNQVRFX1JFRl9BVFRSID0gJ25nLWFuaW1hdGUtcmVmJztcclxuXHJcbiAgdmFyIGRyaXZlcnMgPSB0aGlzLmRyaXZlcnMgPSBbXTtcclxuXHJcbiAgdmFyIFJVTk5FUl9TVE9SQUdFX0tFWSA9ICckJGFuaW1hdGlvblJ1bm5lcic7XHJcblxyXG4gIGZ1bmN0aW9uIHNldFJ1bm5lcihlbGVtZW50LCBydW5uZXIpIHtcclxuICAgIGVsZW1lbnQuZGF0YShSVU5ORVJfU1RPUkFHRV9LRVksIHJ1bm5lcik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZW1vdmVSdW5uZXIoZWxlbWVudCkge1xyXG4gICAgZWxlbWVudC5yZW1vdmVEYXRhKFJVTk5FUl9TVE9SQUdFX0tFWSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRSdW5uZXIoZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQuZGF0YShSVU5ORVJfU1RPUkFHRV9LRVkpO1xyXG4gIH1cclxuXHJcbiAgdGhpcy4kZ2V0ID0gWyckJGpxTGl0ZScsICckcm9vdFNjb3BlJywgJyRpbmplY3RvcicsICckJEFuaW1hdGVSdW5uZXInLCAnJCRIYXNoTWFwJywgJyQkckFGU2NoZWR1bGVyJyxcclxuICAgICAgIGZ1bmN0aW9uKCQkanFMaXRlLCAgICRyb290U2NvcGUsICAgJGluamVjdG9yLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkJEhhc2hNYXAsICAgJCRyQUZTY2hlZHVsZXIpIHtcclxuXHJcbiAgICB2YXIgYW5pbWF0aW9uUXVldWUgPSBbXTtcclxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBzb3J0QW5pbWF0aW9ucyhhbmltYXRpb25zKSB7XHJcbiAgICAgIHZhciB0cmVlID0geyBjaGlsZHJlbjogW10gfTtcclxuICAgICAgdmFyIGksIGxvb2t1cCA9IG5ldyAkJEhhc2hNYXAoKTtcclxuXHJcbiAgICAgIC8vIHRoaXMgaXMgZG9uZSBmaXJzdCBiZWZvcmVoYW5kIHNvIHRoYXQgdGhlIGhhc2htYXBcclxuICAgICAgLy8gaXMgZmlsbGVkIHdpdGggYSBsaXN0IG9mIHRoZSBlbGVtZW50cyB0aGF0IHdpbGwgYmUgYW5pbWF0ZWRcclxuICAgICAgZm9yIChpID0gMDsgaSA8IGFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gYW5pbWF0aW9uc1tpXTtcclxuICAgICAgICBsb29rdXAucHV0KGFuaW1hdGlvbi5kb21Ob2RlLCBhbmltYXRpb25zW2ldID0ge1xyXG4gICAgICAgICAgZG9tTm9kZTogYW5pbWF0aW9uLmRvbU5vZGUsXHJcbiAgICAgICAgICBmbjogYW5pbWF0aW9uLmZuLFxyXG4gICAgICAgICAgY2hpbGRyZW46IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhbmltYXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcHJvY2Vzc05vZGUoYW5pbWF0aW9uc1tpXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmbGF0dGVuKHRyZWUpO1xyXG5cclxuICAgICAgZnVuY3Rpb24gcHJvY2Vzc05vZGUoZW50cnkpIHtcclxuICAgICAgICBpZiAoZW50cnkucHJvY2Vzc2VkKSByZXR1cm4gZW50cnk7XHJcbiAgICAgICAgZW50cnkucHJvY2Vzc2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGVsZW1lbnROb2RlID0gZW50cnkuZG9tTm9kZTtcclxuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGVsZW1lbnROb2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgbG9va3VwLnB1dChlbGVtZW50Tm9kZSwgZW50cnkpO1xyXG5cclxuICAgICAgICB2YXIgcGFyZW50RW50cnk7XHJcbiAgICAgICAgd2hpbGUgKHBhcmVudE5vZGUpIHtcclxuICAgICAgICAgIHBhcmVudEVudHJ5ID0gbG9va3VwLmdldChwYXJlbnROb2RlKTtcclxuICAgICAgICAgIGlmIChwYXJlbnRFbnRyeSkge1xyXG4gICAgICAgICAgICBpZiAoIXBhcmVudEVudHJ5LnByb2Nlc3NlZCkge1xyXG4gICAgICAgICAgICAgIHBhcmVudEVudHJ5ID0gcHJvY2Vzc05vZGUocGFyZW50RW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIChwYXJlbnRFbnRyeSB8fCB0cmVlKS5jaGlsZHJlbi5wdXNoKGVudHJ5KTtcclxuICAgICAgICByZXR1cm4gZW50cnk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGZsYXR0ZW4odHJlZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICB2YXIgcXVldWUgPSBbXTtcclxuICAgICAgICB2YXIgaTtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyZWUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHF1ZXVlLnB1c2godHJlZS5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcmVtYWluaW5nTGV2ZWxFbnRyaWVzID0gcXVldWUubGVuZ3RoO1xyXG4gICAgICAgIHZhciBuZXh0TGV2ZWxFbnRyaWVzID0gMDtcclxuICAgICAgICB2YXIgcm93ID0gW107XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdmFyIGVudHJ5ID0gcXVldWVbaV07XHJcbiAgICAgICAgICBpZiAocmVtYWluaW5nTGV2ZWxFbnRyaWVzIDw9IDApIHtcclxuICAgICAgICAgICAgcmVtYWluaW5nTGV2ZWxFbnRyaWVzID0gbmV4dExldmVsRW50cmllcztcclxuICAgICAgICAgICAgbmV4dExldmVsRW50cmllcyA9IDA7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJvdyk7XHJcbiAgICAgICAgICAgIHJvdyA9IFtdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcm93LnB1c2goZW50cnkuZm4pO1xyXG4gICAgICAgICAgZW50cnkuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZEVudHJ5KSB7XHJcbiAgICAgICAgICAgIG5leHRMZXZlbEVudHJpZXMrKztcclxuICAgICAgICAgICAgcXVldWUucHVzaChjaGlsZEVudHJ5KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmVtYWluaW5nTGV2ZWxFbnRyaWVzLS07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocm93Lmxlbmd0aCkge1xyXG4gICAgICAgICAgcmVzdWx0LnB1c2gocm93KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPKG1hdHNrbyk6IGRvY3VtZW50IHRoZSBzaWduYXR1cmUgaW4gYSBiZXR0ZXIgd2F5XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMpIHtcclxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gWydlbnRlcicsICdtb3ZlJywgJ2xlYXZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcclxuXHJcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiBhdCB0aGUgY3VycmVudCBtb21lbnQsIGhvd2V2ZXJcclxuICAgICAgLy8gdGhlc2UgcnVubmVyIG1ldGhvZHMgd2lsbCBnZXQgbGF0ZXIgdXBkYXRlZCB3aXRoIHRoZVxyXG4gICAgICAvLyBtZXRob2RzIGxlYWRpbmcgaW50byB0aGUgZHJpdmVyJ3MgZW5kL2NhbmNlbCBtZXRob2RzXHJcbiAgICAgIC8vIGZvciBub3cgdGhleSBqdXN0IHN0b3AgdGhlIGFuaW1hdGlvbiBmcm9tIHN0YXJ0aW5nXHJcbiAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcclxuICAgICAgICBlbmQ6IGZ1bmN0aW9uKCkgeyBjbG9zZSgpOyB9LFxyXG4gICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7IGNsb3NlKHRydWUpOyB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCFkcml2ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgIGNsb3NlKCk7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2V0UnVubmVyKGVsZW1lbnQsIHJ1bm5lcik7XHJcblxyXG4gICAgICB2YXIgY2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJyksIG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKSk7XHJcbiAgICAgIHZhciB0ZW1wQ2xhc3NlcyA9IG9wdGlvbnMudGVtcENsYXNzZXM7XHJcbiAgICAgIGlmICh0ZW1wQ2xhc3Nlcykge1xyXG4gICAgICAgIGNsYXNzZXMgKz0gJyAnICsgdGVtcENsYXNzZXM7XHJcbiAgICAgICAgb3B0aW9ucy50ZW1wQ2xhc3NlcyA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBwcmVwYXJlQ2xhc3NOYW1lO1xyXG4gICAgICBpZiAoaXNTdHJ1Y3R1cmFsKSB7XHJcbiAgICAgICAgcHJlcGFyZUNsYXNzTmFtZSA9ICduZy0nICsgZXZlbnQgKyBQUkVQQVJFX0NMQVNTX1NVRkZJWDtcclxuICAgICAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbGVtZW50LCBwcmVwYXJlQ2xhc3NOYW1lKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYW5pbWF0aW9uUXVldWUucHVzaCh7XHJcbiAgICAgICAgLy8gdGhpcyBkYXRhIGlzIHVzZWQgYnkgdGhlIHBvc3REaWdlc3QgY29kZSBhbmQgcGFzc2VkIGludG9cclxuICAgICAgICAvLyB0aGUgZHJpdmVyIHN0ZXAgZnVuY3Rpb25cclxuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXHJcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgIHN0cnVjdHVyYWw6IGlzU3RydWN0dXJhbCxcclxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxyXG4gICAgICAgIGJlZm9yZVN0YXJ0OiBiZWZvcmVTdGFydCxcclxuICAgICAgICBjbG9zZTogY2xvc2VcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGhhbmRsZURlc3Ryb3llZEVsZW1lbnQpO1xyXG5cclxuICAgICAgLy8gd2Ugb25seSB3YW50IHRoZXJlIHRvIGJlIG9uZSBmdW5jdGlvbiBjYWxsZWQgd2l0aGluIHRoZSBwb3N0IGRpZ2VzdFxyXG4gICAgICAvLyBibG9jay4gVGhpcyB3YXkgd2UgY2FuIGdyb3VwIGFuaW1hdGlvbnMgZm9yIGFsbCB0aGUgYW5pbWF0aW9ucyB0aGF0XHJcbiAgICAgIC8vIHdlcmUgYXBhcnQgb2YgdGhlIHNhbWUgcG9zdERpZ2VzdCBmbHVzaCBjYWxsLlxyXG4gICAgICBpZiAoYW5pbWF0aW9uUXVldWUubGVuZ3RoID4gMSkgcmV0dXJuIHJ1bm5lcjtcclxuXHJcbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhbmltYXRpb25zID0gW107XHJcbiAgICAgICAgZm9yRWFjaChhbmltYXRpb25RdWV1ZSwgZnVuY3Rpb24oZW50cnkpIHtcclxuICAgICAgICAgIC8vIHRoZSBlbGVtZW50IHdhcyBkZXN0cm95ZWQgZWFybHkgb24gd2hpY2ggcmVtb3ZlZCB0aGUgcnVubmVyXHJcbiAgICAgICAgICAvLyBmb3JtIGl0cyBzdG9yYWdlLiBUaGlzIG1lYW5zIHdlIGNhbid0IGFuaW1hdGUgdGhpcyBlbGVtZW50XHJcbiAgICAgICAgICAvLyBhdCBhbGwgYW5kIGl0IGFscmVhZHkgaGFzIGJlZW4gY2xvc2VkIGR1ZSB0byBkZXN0cnVjdGlvbi5cclxuICAgICAgICAgIGlmIChnZXRSdW5uZXIoZW50cnkuZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGVudHJ5KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVudHJ5LmNsb3NlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIG5vdyBhbnkgZnV0dXJlIGFuaW1hdGlvbnMgd2lsbCBiZSBpbiBhbm90aGVyIHBvc3REaWdlc3RcclxuICAgICAgICBhbmltYXRpb25RdWV1ZS5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICB2YXIgZ3JvdXBlZEFuaW1hdGlvbnMgPSBncm91cEFuaW1hdGlvbnMoYW5pbWF0aW9ucyk7XHJcbiAgICAgICAgdmFyIHRvQmVTb3J0ZWRBbmltYXRpb25zID0gW107XHJcblxyXG4gICAgICAgIGZvckVhY2goZ3JvdXBlZEFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbkVudHJ5KSB7XHJcbiAgICAgICAgICB0b0JlU29ydGVkQW5pbWF0aW9ucy5wdXNoKHtcclxuICAgICAgICAgICAgZG9tTm9kZTogZ2V0RG9tTm9kZShhbmltYXRpb25FbnRyeS5mcm9tID8gYW5pbWF0aW9uRW50cnkuZnJvbS5lbGVtZW50IDogYW5pbWF0aW9uRW50cnkuZWxlbWVudCksXHJcbiAgICAgICAgICAgIGZuOiBmdW5jdGlvbiB0cmlnZ2VyQW5pbWF0aW9uU3RhcnQoKSB7XHJcbiAgICAgICAgICAgICAgLy8gaXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBhcHBseSB0aGUgYG5nLWFuaW1hdGVgIENTUyBjbGFzcyBhbmQgdGhlXHJcbiAgICAgICAgICAgICAgLy8gdGVtcG9yYXJ5IGNsYXNzZXMgYmVmb3JlIHdlIGRvIGFueSBkcml2ZXIgaW52b2tpbmcgc2luY2UgdGhlc2VcclxuICAgICAgICAgICAgICAvLyBDU1MgY2xhc3NlcyBtYXkgYmUgcmVxdWlyZWQgZm9yIHByb3BlciBDU1MgZGV0ZWN0aW9uLlxyXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkVudHJ5LmJlZm9yZVN0YXJ0KCk7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBzdGFydEFuaW1hdGlvbkZuLCBjbG9zZUZuID0gYW5pbWF0aW9uRW50cnkuY2xvc2U7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGluIHRoZSBldmVudCB0aGF0IHRoZSBlbGVtZW50IHdhcyByZW1vdmVkIGJlZm9yZSB0aGUgZGlnZXN0IHJ1bnMgb3JcclxuICAgICAgICAgICAgICAvLyBkdXJpbmcgdGhlIFJBRiBzZXF1ZW5jaW5nIHRoZW4gd2Ugc2hvdWxkIG5vdCB0cmlnZ2VyIHRoZSBhbmltYXRpb24uXHJcbiAgICAgICAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBhbmltYXRpb25FbnRyeS5hbmNob3JzXHJcbiAgICAgICAgICAgICAgICAgID8gKGFuaW1hdGlvbkVudHJ5LmZyb20uZWxlbWVudCB8fCBhbmltYXRpb25FbnRyeS50by5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICA6IGFuaW1hdGlvbkVudHJ5LmVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChnZXRSdW5uZXIodGFyZ2V0RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBpbnZva2VGaXJzdERyaXZlcihhbmltYXRpb25FbnRyeSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgIHN0YXJ0QW5pbWF0aW9uRm4gPSBvcGVyYXRpb24uc3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAoIXN0YXJ0QW5pbWF0aW9uRm4pIHtcclxuICAgICAgICAgICAgICAgIGNsb3NlRm4oKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblJ1bm5lciA9IHN0YXJ0QW5pbWF0aW9uRm4oKTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lci5kb25lKGZ1bmN0aW9uKHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICBjbG9zZUZuKCFzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmltYXRpb25SdW5uZXJzKGFuaW1hdGlvbkVudHJ5LCBhbmltYXRpb25SdW5uZXIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc29ydCBlYWNoIG9mIHRoZSBhbmltYXRpb25zIGluIG9yZGVyIG9mIHBhcmVudCB0byBjaGlsZFxyXG4gICAgICAgIC8vIHJlbGF0aW9uc2hpcHMuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBjaGlsZCBjbGFzc2VzIGFyZSBhcHBsaWVkIGF0IHRoZVxyXG4gICAgICAgIC8vIHJpZ2h0IHRpbWUuXHJcbiAgICAgICAgJCRyQUZTY2hlZHVsZXIoc29ydEFuaW1hdGlvbnModG9CZVNvcnRlZEFuaW1hdGlvbnMpKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gcnVubmVyO1xyXG5cclxuICAgICAgLy8gVE9ETyhtYXRza28pOiBjaGFuZ2UgdG8gcmVmZXJlbmNlIG5vZGVzXHJcbiAgICAgIGZ1bmN0aW9uIGdldEFuY2hvck5vZGVzKG5vZGUpIHtcclxuICAgICAgICB2YXIgU0VMRUNUT1IgPSAnWycgKyBOR19BTklNQVRFX1JFRl9BVFRSICsgJ10nO1xyXG4gICAgICAgIHZhciBpdGVtcyA9IG5vZGUuaGFzQXR0cmlidXRlKE5HX0FOSU1BVEVfUkVGX0FUVFIpXHJcbiAgICAgICAgICAgICAgPyBbbm9kZV1cclxuICAgICAgICAgICAgICA6IG5vZGUucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUik7XHJcbiAgICAgICAgdmFyIGFuY2hvcnMgPSBbXTtcclxuICAgICAgICBmb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICB2YXIgYXR0ciA9IG5vZGUuZ2V0QXR0cmlidXRlKE5HX0FOSU1BVEVfUkVGX0FUVFIpO1xyXG4gICAgICAgICAgaWYgKGF0dHIgJiYgYXR0ci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYW5jaG9ycy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhbmNob3JzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBncm91cEFuaW1hdGlvbnMoYW5pbWF0aW9ucykge1xyXG4gICAgICAgIHZhciBwcmVwYXJlZEFuaW1hdGlvbnMgPSBbXTtcclxuICAgICAgICB2YXIgcmVmTG9va3VwID0ge307XHJcbiAgICAgICAgZm9yRWFjaChhbmltYXRpb25zLCBmdW5jdGlvbihhbmltYXRpb24sIGluZGV4KSB7XHJcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IGFuaW1hdGlvbi5lbGVtZW50O1xyXG4gICAgICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgdmFyIGV2ZW50ID0gYW5pbWF0aW9uLmV2ZW50O1xyXG4gICAgICAgICAgdmFyIGVudGVyT3JNb3ZlID0gWydlbnRlcicsICdtb3ZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcclxuICAgICAgICAgIHZhciBhbmNob3JOb2RlcyA9IGFuaW1hdGlvbi5zdHJ1Y3R1cmFsID8gZ2V0QW5jaG9yTm9kZXMobm9kZSkgOiBbXTtcclxuXHJcbiAgICAgICAgICBpZiAoYW5jaG9yTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbnRlck9yTW92ZSA/ICd0bycgOiAnZnJvbSc7XHJcblxyXG4gICAgICAgICAgICBmb3JFYWNoKGFuY2hvck5vZGVzLCBmdW5jdGlvbihhbmNob3IpIHtcclxuICAgICAgICAgICAgICB2YXIga2V5ID0gYW5jaG9yLmdldEF0dHJpYnV0ZShOR19BTklNQVRFX1JFRl9BVFRSKTtcclxuICAgICAgICAgICAgICByZWZMb29rdXBba2V5XSA9IHJlZkxvb2t1cFtrZXldIHx8IHt9O1xyXG4gICAgICAgICAgICAgIHJlZkxvb2t1cFtrZXldW2RpcmVjdGlvbl0gPSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25JRDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBqcUxpdGUoYW5jaG9yKVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIHVzZWRJbmRpY2VzTG9va3VwID0ge307XHJcbiAgICAgICAgdmFyIGFuY2hvckdyb3VwcyA9IHt9O1xyXG4gICAgICAgIGZvckVhY2gocmVmTG9va3VwLCBmdW5jdGlvbihvcGVyYXRpb25zLCBrZXkpIHtcclxuICAgICAgICAgIHZhciBmcm9tID0gb3BlcmF0aW9ucy5mcm9tO1xyXG4gICAgICAgICAgdmFyIHRvID0gb3BlcmF0aW9ucy50bztcclxuXHJcbiAgICAgICAgICBpZiAoIWZyb20gfHwgIXRvKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgb25lIG9mIHRoZXNlIGlzIHNldCB0aGVyZWZvcmUgd2UgY2FuJ3QgaGF2ZSBhblxyXG4gICAgICAgICAgICAvLyBhbmNob3IgYW5pbWF0aW9uIHNpbmNlIGFsbCB0aHJlZSBwaWVjZXMgYXJlIHJlcXVpcmVkXHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGZyb20gPyBmcm9tLmFuaW1hdGlvbklEIDogdG8uYW5pbWF0aW9uSUQ7XHJcbiAgICAgICAgICAgIHZhciBpbmRleEtleSA9IGluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmICghdXNlZEluZGljZXNMb29rdXBbaW5kZXhLZXldKSB7XHJcbiAgICAgICAgICAgICAgdXNlZEluZGljZXNMb29rdXBbaW5kZXhLZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaChhbmltYXRpb25zW2luZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZhciBmcm9tQW5pbWF0aW9uID0gYW5pbWF0aW9uc1tmcm9tLmFuaW1hdGlvbklEXTtcclxuICAgICAgICAgIHZhciB0b0FuaW1hdGlvbiA9IGFuaW1hdGlvbnNbdG8uYW5pbWF0aW9uSURdO1xyXG4gICAgICAgICAgdmFyIGxvb2t1cEtleSA9IGZyb20uYW5pbWF0aW9uSUQudG9TdHJpbmcoKTtcclxuICAgICAgICAgIGlmICghYW5jaG9yR3JvdXBzW2xvb2t1cEtleV0pIHtcclxuICAgICAgICAgICAgdmFyIGdyb3VwID0gYW5jaG9yR3JvdXBzW2xvb2t1cEtleV0gPSB7XHJcbiAgICAgICAgICAgICAgc3RydWN0dXJhbDogdHJ1ZSxcclxuICAgICAgICAgICAgICBiZWZvcmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmcm9tQW5pbWF0aW9uLmJlZm9yZVN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB0b0FuaW1hdGlvbi5iZWZvcmVTdGFydCgpO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgZnJvbUFuaW1hdGlvbi5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdG9BbmltYXRpb24uY2xvc2UoKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGNsYXNzZXM6IGNzc0NsYXNzZXNJbnRlcnNlY3Rpb24oZnJvbUFuaW1hdGlvbi5jbGFzc2VzLCB0b0FuaW1hdGlvbi5jbGFzc2VzKSxcclxuICAgICAgICAgICAgICBmcm9tOiBmcm9tQW5pbWF0aW9uLFxyXG4gICAgICAgICAgICAgIHRvOiB0b0FuaW1hdGlvbixcclxuICAgICAgICAgICAgICBhbmNob3JzOiBbXSAvLyBUT0RPKG1hdHNrbyk6IGNoYW5nZSB0byByZWZlcmVuY2Ugbm9kZXNcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRoZSBhbmNob3IgYW5pbWF0aW9ucyByZXF1aXJlIHRoYXQgdGhlIGZyb20gYW5kIHRvIGVsZW1lbnRzIGJvdGggaGF2ZSBhdCBsZWFzdFxyXG4gICAgICAgICAgICAvLyBvbmUgc2hhcmVkIENTUyBjbGFzcyB3aGljaCBlZmZlY3RpdmVseSBtYXJyaWVzIHRoZSB0d28gZWxlbWVudHMgdG9nZXRoZXIgdG8gdXNlXHJcbiAgICAgICAgICAgIC8vIHRoZSBzYW1lIGFuaW1hdGlvbiBkcml2ZXIgYW5kIHRvIHByb3Blcmx5IHNlcXVlbmNlIHRoZSBhbmNob3IgYW5pbWF0aW9uLlxyXG4gICAgICAgICAgICBpZiAoZ3JvdXAuY2xhc3Nlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICBwcmVwYXJlZEFuaW1hdGlvbnMucHVzaChncm91cCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2goZnJvbUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2godG9BbmltYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYW5jaG9yR3JvdXBzW2xvb2t1cEtleV0uYW5jaG9ycy5wdXNoKHtcclxuICAgICAgICAgICAgJ291dCc6IGZyb20uZWxlbWVudCwgJ2luJzogdG8uZWxlbWVudFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwcmVwYXJlZEFuaW1hdGlvbnM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNzc0NsYXNzZXNJbnRlcnNlY3Rpb24oYSxiKSB7XHJcbiAgICAgICAgYSA9IGEuc3BsaXQoJyAnKTtcclxuICAgICAgICBiID0gYi5zcGxpdCgnICcpO1xyXG4gICAgICAgIHZhciBtYXRjaGVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdmFyIGFhID0gYVtpXTtcclxuICAgICAgICAgIGlmIChhYS5zdWJzdHJpbmcoMCwzKSA9PT0gJ25nLScpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoYWEgPT09IGJbal0pIHtcclxuICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYWEpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWF0Y2hlcy5qb2luKCcgJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGludm9rZUZpcnN0RHJpdmVyKGFuaW1hdGlvbkRldGFpbHMpIHtcclxuICAgICAgICAvLyB3ZSBsb29wIGluIHJldmVyc2Ugb3JkZXIgc2luY2UgdGhlIG1vcmUgZ2VuZXJhbCBkcml2ZXJzIChsaWtlIENTUyBhbmQgSlMpXHJcbiAgICAgICAgLy8gbWF5IGF0dGVtcHQgbW9yZSBlbGVtZW50cywgYnV0IGN1c3RvbSBkcml2ZXJzIGFyZSBtb3JlIHBhcnRpY3VsYXJcclxuICAgICAgICBmb3IgKHZhciBpID0gZHJpdmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBkcml2ZXJzW2ldO1xyXG4gICAgICAgICAgdmFyIGZhY3RvcnkgPSAkaW5qZWN0b3IuZ2V0KGRyaXZlck5hbWUpO1xyXG4gICAgICAgICAgdmFyIGRyaXZlciA9IGZhY3RvcnkoYW5pbWF0aW9uRGV0YWlscyk7XHJcbiAgICAgICAgICBpZiAoZHJpdmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkcml2ZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBiZWZvcmVTdGFydCgpIHtcclxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKE5HX0FOSU1BVEVfQ0xBU1NOQU1FKTtcclxuICAgICAgICBpZiAodGVtcENsYXNzZXMpIHtcclxuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIHRlbXBDbGFzc2VzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXBhcmVDbGFzc05hbWUpIHtcclxuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHByZXBhcmVDbGFzc05hbWUpO1xyXG4gICAgICAgICAgcHJlcGFyZUNsYXNzTmFtZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiB1cGRhdGVBbmltYXRpb25SdW5uZXJzKGFuaW1hdGlvbiwgbmV3UnVubmVyKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdGlvbi5mcm9tICYmIGFuaW1hdGlvbi50bykge1xyXG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi5mcm9tLmVsZW1lbnQpO1xyXG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi50by5lbGVtZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZShlbGVtZW50KSB7XHJcbiAgICAgICAgICB2YXIgcnVubmVyID0gZ2V0UnVubmVyKGVsZW1lbnQpO1xyXG4gICAgICAgICAgaWYgKHJ1bm5lcikgcnVubmVyLnNldEhvc3QobmV3UnVubmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZURlc3Ryb3llZEVsZW1lbnQoKSB7XHJcbiAgICAgICAgdmFyIHJ1bm5lciA9IGdldFJ1bm5lcihlbGVtZW50KTtcclxuICAgICAgICBpZiAocnVubmVyICYmIChldmVudCAhPT0gJ2xlYXZlJyB8fCAhb3B0aW9ucy4kJGRvbU9wZXJhdGlvbkZpcmVkKSkge1xyXG4gICAgICAgICAgcnVubmVyLmVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gY2xvc2UocmVqZWN0ZWQpIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXHJcbiAgICAgICAgZWxlbWVudC5vZmYoJyRkZXN0cm95JywgaGFuZGxlRGVzdHJveWVkRWxlbWVudCk7XHJcbiAgICAgICAgcmVtb3ZlUnVubmVyKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICBhcHBseUFuaW1hdGlvbkNsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKHRlbXBDbGFzc2VzKSB7XHJcbiAgICAgICAgICAkJGpxTGl0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCB0ZW1wQ2xhc3Nlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfQ0xBU1NOQU1FKTtcclxuICAgICAgICBydW5uZXIuY29tcGxldGUoIXJlamVjdGVkKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XTtcclxufV07XHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZ0FuaW1hdGVTd2FwXHJcbiAqIEByZXN0cmljdCBBXHJcbiAqIEBzY29wZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogbmdBbmltYXRlU3dhcCBpcyBhIGFuaW1hdGlvbi1vcmllbnRlZCBkaXJlY3RpdmUgdGhhdCBhbGxvd3MgZm9yIHRoZSBjb250YWluZXIgdG9cclxuICogYmUgcmVtb3ZlZCBhbmQgZW50ZXJlZCBpbiB3aGVuZXZlciB0aGUgYXNzb2NpYXRlZCBleHByZXNzaW9uIGNoYW5nZXMuIEFcclxuICogY29tbW9uIHVzZWNhc2UgZm9yIHRoaXMgZGlyZWN0aXZlIGlzIGEgcm90YXRpbmcgYmFubmVyIG9yIHNsaWRlciBjb21wb25lbnQgd2hpY2hcclxuICogY29udGFpbnMgb25lIGltYWdlIGJlaW5nIHByZXNlbnQgYXQgYSB0aW1lLiBXaGVuIHRoZSBhY3RpdmUgaW1hZ2UgY2hhbmdlc1xyXG4gKiB0aGVuIHRoZSBvbGQgaW1hZ2Ugd2lsbCBwZXJmb3JtIGEgYGxlYXZlYCBhbmltYXRpb24gYW5kIHRoZSBuZXcgZWxlbWVudFxyXG4gKiB3aWxsIGJlIGluc2VydGVkIHZpYSBhbiBgZW50ZXJgIGFuaW1hdGlvbi5cclxuICpcclxuICogQGFuaW1hdGlvbnNcclxuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxyXG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNlbnRlciBlbnRlcn0gIHwgd2hlbiB0aGUgbmV3IGVsZW1lbnQgaXMgaW5zZXJ0ZWQgdG8gdGhlIERPTSAgfFxyXG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNsZWF2ZSBsZWF2ZX0gIHwgd2hlbiB0aGUgb2xkIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gfFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdBbmltYXRlU3dhcC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ0FuaW1hdGVTd2FwRXhhbXBsZVwiXHJcbiAqICAgICAgICAgIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIlxyXG4gKiAgICAgICAgICBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCI+XHJcbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICogICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIiBuZy1jb250cm9sbGVyPVwiQXBwQ3RybFwiPlxyXG4gKiAgICAgICA8ZGl2IG5nLWFuaW1hdGUtc3dhcD1cIm51bWJlclwiIGNsYXNzPVwiY2VsbCBzd2FwLWFuaW1hdGlvblwiIG5nLWNsYXNzPVwiY29sb3JDbGFzcyhudW1iZXIpXCI+XHJcbiAqICAgICAgICAge3sgbnVtYmVyIH19XHJcbiAqICAgICAgIDwvZGl2PlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgPC9maWxlPlxyXG4gKiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cclxuICogICAgIGFuZ3VsYXIubW9kdWxlKCduZ0FuaW1hdGVTd2FwRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pXHJcbiAqICAgICAgIC5jb250cm9sbGVyKCdBcHBDdHJsJywgWyckc2NvcGUnLCAnJGludGVydmFsJywgZnVuY3Rpb24oJHNjb3BlLCAkaW50ZXJ2YWwpIHtcclxuICogICAgICAgICAkc2NvcGUubnVtYmVyID0gMDtcclxuICogICAgICAgICAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAqICAgICAgICAgICAkc2NvcGUubnVtYmVyKys7XHJcbiAqICAgICAgICAgfSwgMTAwMCk7XHJcbiAqXHJcbiAqICAgICAgICAgdmFyIGNvbG9ycyA9IFsncmVkJywnYmx1ZScsJ2dyZWVuJywneWVsbG93Jywnb3JhbmdlJ107XHJcbiAqICAgICAgICAgJHNjb3BlLmNvbG9yQ2xhc3MgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuICogICAgICAgICAgIHJldHVybiBjb2xvcnNbbnVtYmVyICUgY29sb3JzLmxlbmd0aF07XHJcbiAqICAgICAgICAgfTtcclxuICogICAgICAgfV0pO1xyXG4gKiAgIDwvZmlsZT5cclxuICogIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxyXG4gKiAgLmNvbnRhaW5lciB7XHJcbiAqICAgIGhlaWdodDoyNTBweDtcclxuICogICAgd2lkdGg6MjUwcHg7XHJcbiAqICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xyXG4gKiAgICBvdmVyZmxvdzpoaWRkZW47XHJcbiAqICAgIGJvcmRlcjoycHggc29saWQgYmxhY2s7XHJcbiAqICB9XHJcbiAqICAuY29udGFpbmVyIC5jZWxsIHtcclxuICogICAgZm9udC1zaXplOjE1MHB4O1xyXG4gKiAgICB0ZXh0LWFsaWduOmNlbnRlcjtcclxuICogICAgbGluZS1oZWlnaHQ6MjUwcHg7XHJcbiAqICAgIHBvc2l0aW9uOmFic29sdXRlO1xyXG4gKiAgICB0b3A6MDtcclxuICogICAgbGVmdDowO1xyXG4gKiAgICByaWdodDowO1xyXG4gKiAgICBib3JkZXItYm90dG9tOjJweCBzb2xpZCBibGFjaztcclxuICogIH1cclxuICogIC5zd2FwLWFuaW1hdGlvbi5uZy1lbnRlciwgLnN3YXAtYW5pbWF0aW9uLm5nLWxlYXZlIHtcclxuICogICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XHJcbiAqICB9XHJcbiAqICAuc3dhcC1hbmltYXRpb24ubmctZW50ZXIge1xyXG4gKiAgICB0b3A6LTI1MHB4O1xyXG4gKiAgfVxyXG4gKiAgLnN3YXAtYW5pbWF0aW9uLm5nLWVudGVyLWFjdGl2ZSB7XHJcbiAqICAgIHRvcDowcHg7XHJcbiAqICB9XHJcbiAqICAuc3dhcC1hbmltYXRpb24ubmctbGVhdmUge1xyXG4gKiAgICB0b3A6MHB4O1xyXG4gKiAgfVxyXG4gKiAgLnN3YXAtYW5pbWF0aW9uLm5nLWxlYXZlLWFjdGl2ZSB7XHJcbiAqICAgIHRvcDoyNTBweDtcclxuICogIH1cclxuICogIC5yZWQgeyBiYWNrZ3JvdW5kOnJlZDsgfVxyXG4gKiAgLmdyZWVuIHsgYmFja2dyb3VuZDpncmVlbjsgfVxyXG4gKiAgLmJsdWUgeyBiYWNrZ3JvdW5kOmJsdWU7IH1cclxuICogIC55ZWxsb3cgeyBiYWNrZ3JvdW5kOnllbGxvdzsgfVxyXG4gKiAgLm9yYW5nZSB7IGJhY2tncm91bmQ6b3JhbmdlOyB9XHJcbiAqICA8L2ZpbGU+XHJcbiAqIDwvZXhhbXBsZT5cclxuICovXHJcbnZhciBuZ0FuaW1hdGVTd2FwRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJGFuaW1hdGUsICRyb290U2NvcGUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcclxuICAgIHRlcm1pbmFsOiB0cnVlLFxyXG4gICAgcHJpb3JpdHk6IDYwMCwgLy8gd2UgdXNlIDYwMCBoZXJlIHRvIGVuc3VyZSB0aGF0IHRoZSBkaXJlY3RpdmUgaXMgY2F1Z2h0IGJlZm9yZSBvdGhlcnNcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGN0cmwsICR0cmFuc2NsdWRlKSB7XHJcbiAgICAgIHZhciBwcmV2aW91c0VsZW1lbnQsIHByZXZpb3VzU2NvcGU7XHJcbiAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnMubmdBbmltYXRlU3dhcCB8fCBhdHRyc1snZm9yJ10sIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xyXG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZpb3VzU2NvcGUpIHtcclxuICAgICAgICAgIHByZXZpb3VzU2NvcGUuJGRlc3Ryb3koKTtcclxuICAgICAgICAgIHByZXZpb3VzU2NvcGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcclxuICAgICAgICAgIHByZXZpb3VzU2NvcGUgPSBzY29wZS4kbmV3KCk7XHJcbiAgICAgICAgICAkdHJhbnNjbHVkZShwcmV2aW91c1Njb3BlLCBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGVsZW1lbnQsIG51bGwsICRlbGVtZW50KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufV07XHJcblxyXG4vKipcclxuICogQG5nZG9jIG1vZHVsZVxyXG4gKiBAbmFtZSBuZ0FuaW1hdGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFRoZSBgbmdBbmltYXRlYCBtb2R1bGUgcHJvdmlkZXMgc3VwcG9ydCBmb3IgQ1NTLWJhc2VkIGFuaW1hdGlvbnMgKGtleWZyYW1lcyBhbmQgdHJhbnNpdGlvbnMpIGFzIHdlbGwgYXMgSmF2YVNjcmlwdC1iYXNlZCBhbmltYXRpb25zIHZpYVxyXG4gKiBjYWxsYmFjayBob29rcy4gQW5pbWF0aW9ucyBhcmUgbm90IGVuYWJsZWQgYnkgZGVmYXVsdCwgaG93ZXZlciwgYnkgaW5jbHVkaW5nIGBuZ0FuaW1hdGVgIHRoZSBhbmltYXRpb24gaG9va3MgYXJlIGVuYWJsZWQgZm9yIGFuIEFuZ3VsYXIgYXBwLlxyXG4gKlxyXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nQW5pbWF0ZVwiPjwvZGl2PlxyXG4gKlxyXG4gKiAjIFVzYWdlXHJcbiAqIFNpbXBseSBwdXQsIHRoZXJlIGFyZSB0d28gd2F5cyB0byBtYWtlIHVzZSBvZiBhbmltYXRpb25zIHdoZW4gbmdBbmltYXRlIGlzIHVzZWQ6IGJ5IHVzaW5nICoqQ1NTKiogYW5kICoqSmF2YVNjcmlwdCoqLiBUaGUgZm9ybWVyIHdvcmtzIHB1cmVseSBiYXNlZFxyXG4gKiB1c2luZyBDU1MgKGJ5IHVzaW5nIG1hdGNoaW5nIENTUyBzZWxlY3RvcnMvc3R5bGVzKSBhbmQgdGhlIGxhdHRlciB0cmlnZ2VycyBhbmltYXRpb25zIHRoYXQgYXJlIHJlZ2lzdGVyZWQgdmlhIGBtb2R1bGUuYW5pbWF0aW9uKClgLiBGb3JcclxuICogYm90aCBDU1MgYW5kIEpTIGFuaW1hdGlvbnMgdGhlIHNvbGUgcmVxdWlyZW1lbnQgaXMgdG8gaGF2ZSBhIG1hdGNoaW5nIGBDU1MgY2xhc3NgIHRoYXQgZXhpc3RzIGJvdGggaW4gdGhlIHJlZ2lzdGVyZWQgYW5pbWF0aW9uIGFuZCB3aXRoaW5cclxuICogdGhlIEhUTUwgZWxlbWVudCB0aGF0IHRoZSBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgb24uXHJcbiAqXHJcbiAqICMjIERpcmVjdGl2ZSBTdXBwb3J0XHJcbiAqIFRoZSBmb2xsb3dpbmcgZGlyZWN0aXZlcyBhcmUgXCJhbmltYXRpb24gYXdhcmVcIjpcclxuICpcclxuICogfCBEaXJlY3RpdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZCBBbmltYXRpb25zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxyXG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQjYW5pbWF0aW9ucyBuZ1JlcGVhdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIsIGxlYXZlIGFuZCBtb3ZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogfCB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3I2FuaW1hdGlvbnMgbmdWaWV3fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUjYW5pbWF0aW9ucyBuZ0luY2x1ZGV9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdTd2l0Y2gjYW5pbWF0aW9ucyBuZ1N3aXRjaH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSWYjYW5pbWF0aW9ucyBuZ0lmfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzI2FuaW1hdGlvbnMgbmdDbGFzc30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhZGQgYW5kIHJlbW92ZSAodGhlIENTUyBjbGFzcyhlcykgcHJlc2VudCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdTaG93I2FuaW1hdGlvbnMgbmdTaG93fSAmIHtAbGluayBuZy5kaXJlY3RpdmU6bmdIaWRlI2FuaW1hdGlvbnMgbmdIaWRlfSAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKHRoZSBuZy1oaWRlIGNsYXNzIHZhbHVlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0jYW5pbWF0aW9uLWhvb2tzIGZvcm19ICYge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsI2FuaW1hdGlvbi1ob29rcyBuZ01vZGVsfSAgICB8IGFkZCBhbmQgcmVtb3ZlIChkaXJ0eSwgcHJpc3RpbmUsIHZhbGlkLCBpbnZhbGlkICYgYWxsIG90aGVyIHZhbGlkYXRpb25zKSB8XHJcbiAqIHwge0BsaW5rIG1vZHVsZTpuZ01lc3NhZ2VzI2FuaW1hdGlvbnMgbmdNZXNzYWdlc30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhZGQgYW5kIHJlbW92ZSAobmctYWN0aXZlICYgbmctaW5hY3RpdmUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gKiB8IHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyNhbmltYXRpb25zIG5nTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICpcclxuICogKE1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGJ5IHZpc2l0aW5nIGVhY2ggdGhlIGRvY3VtZW50YXRpb24gYXNzb2NpYXRlZCB3aXRoIGVhY2ggZGlyZWN0aXZlLilcclxuICpcclxuICogIyMgQ1NTLWJhc2VkIEFuaW1hdGlvbnNcclxuICpcclxuICogQ1NTLWJhc2VkIGFuaW1hdGlvbnMgd2l0aCBuZ0FuaW1hdGUgYXJlIHVuaXF1ZSBzaW5jZSB0aGV5IHJlcXVpcmUgbm8gSmF2YVNjcmlwdCBjb2RlIGF0IGFsbC4gQnkgdXNpbmcgYSBDU1MgY2xhc3MgdGhhdCB3ZSByZWZlcmVuY2UgYmV0d2VlbiBvdXIgSFRNTFxyXG4gKiBhbmQgQ1NTIGNvZGUgd2UgY2FuIGNyZWF0ZSBhbiBhbmltYXRpb24gdGhhdCB3aWxsIGJlIHBpY2tlZCB1cCBieSBBbmd1bGFyIHdoZW4gYW4gdGhlIHVuZGVybHlpbmcgZGlyZWN0aXZlIHBlcmZvcm1zIGFuIG9wZXJhdGlvbi5cclxuICpcclxuICogVGhlIGV4YW1wbGUgYmVsb3cgc2hvd3MgaG93IGFuIGBlbnRlcmAgYW5pbWF0aW9uIGNhbiBiZSBtYWRlIHBvc3NpYmxlIG9uIGFuIGVsZW1lbnQgdXNpbmcgYG5nLWlmYDpcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8ZGl2IG5nLWlmPVwiYm9vbFwiIGNsYXNzPVwiZmFkZVwiPlxyXG4gKiAgICBGYWRlIG1lIGluIG91dFxyXG4gKiA8L2Rpdj5cclxuICogPGJ1dHRvbiBuZy1jbGljaz1cImJvb2w9dHJ1ZVwiPkZhZGUgSW4hPC9idXR0b24+XHJcbiAqIDxidXR0b24gbmctY2xpY2s9XCJib29sPWZhbHNlXCI+RmFkZSBPdXQhPC9idXR0b24+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3RpY2UgdGhlIENTUyBjbGFzcyAqKmZhZGUqKj8gV2UgY2FuIG5vdyBjcmVhdGUgdGhlIENTUyB0cmFuc2l0aW9uIGNvZGUgdGhhdCByZWZlcmVuY2VzIHRoaXMgY2xhc3M6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAvJiM0MjsgVGhlIHN0YXJ0aW5nIENTUyBzdHlsZXMgZm9yIHRoZSBlbnRlciBhbmltYXRpb24gJiM0MjsvXHJcbiAqIC5mYWRlLm5nLWVudGVyIHtcclxuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcclxuICogICBvcGFjaXR5OjA7XHJcbiAqIH1cclxuICpcclxuICogLyYjNDI7IFRoZSBmaW5pc2hpbmcgQ1NTIHN0eWxlcyBmb3IgdGhlIGVudGVyIGFuaW1hdGlvbiAmIzQyOy9cclxuICogLmZhZGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcclxuICogICBvcGFjaXR5OjE7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFRoZSBrZXkgdGhpbmcgdG8gcmVtZW1iZXIgaGVyZSBpcyB0aGF0LCBkZXBlbmRpbmcgb24gdGhlIGFuaW1hdGlvbiBldmVudCAod2hpY2ggZWFjaCBvZiB0aGUgZGlyZWN0aXZlcyBhYm92ZSB0cmlnZ2VyIGRlcGVuZGluZyBvbiB3aGF0J3MgZ29pbmcgb24pIHR3b1xyXG4gKiBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50OyBpbiB0aGUgZXhhbXBsZSBhYm92ZSB3ZSBoYXZlIGAubmctZW50ZXJgIGFuZCBgLm5nLWVudGVyLWFjdGl2ZWAuIEZvciBDU1MgdHJhbnNpdGlvbnMsIHRoZSB0cmFuc2l0aW9uXHJcbiAqIGNvZGUgKiptdXN0KiogYmUgZGVmaW5lZCB3aXRoaW4gdGhlIHN0YXJ0aW5nIENTUyBjbGFzcyAoaW4gdGhpcyBjYXNlIGAubmctZW50ZXJgKS4gVGhlIGRlc3RpbmF0aW9uIGNsYXNzIGlzIHdoYXQgdGhlIHRyYW5zaXRpb24gd2lsbCBhbmltYXRlIHRvd2FyZHMuXHJcbiAqXHJcbiAqIElmIGZvciBleGFtcGxlIHdlIHdhbnRlZCB0byBjcmVhdGUgYW5pbWF0aW9ucyBmb3IgYGxlYXZlYCBhbmQgYG1vdmVgIChuZ1JlcGVhdCB0cmlnZ2VycyBtb3ZlKSB0aGVuIHdlIGNhbiBkbyBzbyB1c2luZyB0aGUgc2FtZSBDU1MgbmFtaW5nIGNvbnZlbnRpb25zOlxyXG4gKlxyXG4gKiBgYGBjc3NcclxuICogLyYjNDI7IG5vdyB0aGUgZWxlbWVudCB3aWxsIGZhZGUgb3V0IGJlZm9yZSBpdCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSAmIzQyOy9cclxuICogLmZhZGUubmctbGVhdmUge1xyXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gKiAgIG9wYWNpdHk6MTtcclxuICogfVxyXG4gKiAuZmFkZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xyXG4gKiAgIG9wYWNpdHk6MDtcclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogV2UgY2FuIGFsc28gbWFrZSB1c2Ugb2YgKipDU1MgS2V5ZnJhbWVzKiogYnkgcmVmZXJlbmNpbmcgdGhlIGtleWZyYW1lIGFuaW1hdGlvbiB3aXRoaW4gdGhlIHN0YXJ0aW5nIENTUyBjbGFzczpcclxuICpcclxuICogYGBgY3NzXHJcbiAqIC8mIzQyOyB0aGVyZSBpcyBubyBuZWVkIHRvIGRlZmluZSBhbnl0aGluZyBpbnNpZGUgb2YgdGhlIGRlc3RpbmF0aW9uXHJcbiAqIENTUyBjbGFzcyBzaW5jZSB0aGUga2V5ZnJhbWUgd2lsbCB0YWtlIGNoYXJnZSBvZiB0aGUgYW5pbWF0aW9uICYjNDI7L1xyXG4gKiAuZmFkZS5uZy1sZWF2ZSB7XHJcbiAqICAgYW5pbWF0aW9uOiBteV9mYWRlX2FuaW1hdGlvbiAwLjVzIGxpbmVhcjtcclxuICogICAtd2Via2l0LWFuaW1hdGlvbjogbXlfZmFkZV9hbmltYXRpb24gMC41cyBsaW5lYXI7XHJcbiAqIH1cclxuICpcclxuICogQGtleWZyYW1lcyBteV9mYWRlX2FuaW1hdGlvbiB7XHJcbiAqICAgZnJvbSB7IG9wYWNpdHk6MTsgfVxyXG4gKiAgIHRvIHsgb3BhY2l0eTowOyB9XHJcbiAqIH1cclxuICpcclxuICogQC13ZWJraXQta2V5ZnJhbWVzIG15X2ZhZGVfYW5pbWF0aW9uIHtcclxuICogICBmcm9tIHsgb3BhY2l0eToxOyB9XHJcbiAqICAgdG8geyBvcGFjaXR5OjA7IH1cclxuICogfVxyXG4gKiBgYGBcclxuICpcclxuICogRmVlbCBmcmVlIGFsc28gbWl4IHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgdG9nZXRoZXIgYXMgd2VsbCBhcyBhbnkgb3RoZXIgQ1NTIGNsYXNzZXMgb24gdGhlIHNhbWUgZWxlbWVudC5cclxuICpcclxuICogIyMjIENTUyBDbGFzcy1iYXNlZCBBbmltYXRpb25zXHJcbiAqXHJcbiAqIENsYXNzLWJhc2VkIGFuaW1hdGlvbnMgKGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHZpYSBgbmdDbGFzc2AsIGBuZ1Nob3dgLCBgbmdIaWRlYCBhbmQgc29tZSBvdGhlciBkaXJlY3RpdmVzKSBoYXZlIGEgc2xpZ2h0bHkgZGlmZmVyZW50XHJcbiAqIG5hbWluZyBjb252ZW50aW9uLiBDbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSBiYXNpYyBlbm91Z2ggdGhhdCBhIHN0YW5kYXJkIHRyYW5zaXRpb24gb3Iga2V5ZnJhbWUgY2FuIGJlIHJlZmVyZW5jZWQgb24gdGhlIGNsYXNzIGJlaW5nIGFkZGVkXHJcbiAqIGFuZCByZW1vdmVkLlxyXG4gKlxyXG4gKiBGb3IgZXhhbXBsZSBpZiB3ZSB3YW50ZWQgdG8gZG8gYSBDU1MgYW5pbWF0aW9uIGZvciBgbmdIaWRlYCB0aGVuIHdlIHBsYWNlIGFuIGFuaW1hdGlvbiBvbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3M6XHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGRpdiBuZy1zaG93PVwiYm9vbFwiIGNsYXNzPVwiZmFkZVwiPlxyXG4gKiAgIFNob3cgYW5kIGhpZGUgbWVcclxuICogPC9kaXY+XHJcbiAqIDxidXR0b24gbmctY2xpY2s9XCJib29sPSFib29sXCI+VG9nZ2xlPC9idXR0b24+XHJcbiAqXHJcbiAqIDxzdHlsZT5cclxuICogLmZhZGUubmctaGlkZSB7XHJcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XHJcbiAqICAgb3BhY2l0eTowO1xyXG4gKiB9XHJcbiAqIDwvc3R5bGU+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBBbGwgdGhhdCBpcyBnb2luZyBvbiBoZXJlIHdpdGggbmdTaG93L25nSGlkZSBiZWhpbmQgdGhlIHNjZW5lcyBpcyB0aGUgYC5uZy1oaWRlYCBjbGFzcyBpcyBhZGRlZC9yZW1vdmVkICh3aGVuIHRoZSBoaWRkZW4gc3RhdGUgaXMgdmFsaWQpLiBTaW5jZVxyXG4gKiBuZ1Nob3cgYW5kIG5nSGlkZSBhcmUgYW5pbWF0aW9uIGF3YXJlIHRoZW4gd2UgY2FuIG1hdGNoIHVwIGEgdHJhbnNpdGlvbiBhbmQgbmdBbmltYXRlIGhhbmRsZXMgdGhlIHJlc3QuXHJcbiAqXHJcbiAqIEluIGFkZGl0aW9uIHRoZSBhZGRpdGlvbiBhbmQgcmVtb3ZhbCBvZiB0aGUgQ1NTIGNsYXNzLCBuZ0FuaW1hdGUgYWxzbyBwcm92aWRlcyB0d28gaGVscGVyIG1ldGhvZHMgdGhhdCB3ZSBjYW4gdXNlIHRvIGZ1cnRoZXIgZGVjb3JhdGUgdGhlIGFuaW1hdGlvblxyXG4gKiB3aXRoIENTUyBzdHlsZXMuXHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGRpdiBuZy1jbGFzcz1cIntvbjpvbk9mZn1cIiBjbGFzcz1cImhpZ2hsaWdodFwiPlxyXG4gKiAgIEhpZ2hsaWdodCB0aGlzIGJveFxyXG4gKiA8L2Rpdj5cclxuICogPGJ1dHRvbiBuZy1jbGljaz1cIm9uT2ZmPSFvbk9mZlwiPlRvZ2dsZTwvYnV0dG9uPlxyXG4gKlxyXG4gKiA8c3R5bGU+XHJcbiAqIC5oaWdobGlnaHQge1xyXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gKiB9XHJcbiAqIC5oaWdobGlnaHQub24tYWRkIHtcclxuICogICBiYWNrZ3JvdW5kOndoaXRlO1xyXG4gKiB9XHJcbiAqIC5oaWdobGlnaHQub24ge1xyXG4gKiAgIGJhY2tncm91bmQ6eWVsbG93O1xyXG4gKiB9XHJcbiAqIC5oaWdobGlnaHQub24tcmVtb3ZlIHtcclxuICogICBiYWNrZ3JvdW5kOmJsYWNrO1xyXG4gKiB9XHJcbiAqIDwvc3R5bGU+XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBXZSBjYW4gYWxzbyBtYWtlIHVzZSBvZiBDU1Mga2V5ZnJhbWVzIGJ5IHBsYWNpbmcgdGhlbSB3aXRoaW4gdGhlIENTUyBjbGFzc2VzLlxyXG4gKlxyXG4gKlxyXG4gKiAjIyMgQ1NTIFN0YWdnZXJpbmcgQW5pbWF0aW9uc1xyXG4gKiBBIFN0YWdnZXJpbmcgYW5pbWF0aW9uIGlzIGEgY29sbGVjdGlvbiBvZiBhbmltYXRpb25zIHRoYXQgYXJlIGlzc3VlZCB3aXRoIGEgc2xpZ2h0IGRlbGF5IGluIGJldHdlZW4gZWFjaCBzdWNjZXNzaXZlIG9wZXJhdGlvbiByZXN1bHRpbmcgaW4gYVxyXG4gKiBjdXJ0YWluLWxpa2UgZWZmZWN0LiBUaGUgbmdBbmltYXRlIG1vZHVsZSAodmVyc2lvbnMgPj0xLjIpIHN1cHBvcnRzIHN0YWdnZXJpbmcgYW5pbWF0aW9ucyBhbmQgdGhlIHN0YWdnZXIgZWZmZWN0IGNhbiBiZVxyXG4gKiBwZXJmb3JtZWQgYnkgY3JlYXRpbmcgYSAqKm5nLUVWRU5ULXN0YWdnZXIqKiBDU1MgY2xhc3MgYW5kIGF0dGFjaGluZyB0aGF0IGNsYXNzIHRvIHRoZSBiYXNlIENTUyBjbGFzcyB1c2VkIGZvclxyXG4gKiB0aGUgYW5pbWF0aW9uLiBUaGUgc3R5bGUgcHJvcGVydHkgZXhwZWN0ZWQgd2l0aGluIHRoZSBzdGFnZ2VyIGNsYXNzIGNhbiBlaXRoZXIgYmUgYSAqKnRyYW5zaXRpb24tZGVsYXkqKiBvciBhblxyXG4gKiAqKmFuaW1hdGlvbi1kZWxheSoqIHByb3BlcnR5IChvciBib3RoIGlmIHlvdXIgYW5pbWF0aW9uIGNvbnRhaW5zIGJvdGggdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lIGFuaW1hdGlvbnMpLlxyXG4gKlxyXG4gKiBgYGBjc3NcclxuICogLm15LWFuaW1hdGlvbi5uZy1lbnRlciB7XHJcbiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gY29kZSAmIzQyOy9cclxuICogICB0cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsO1xyXG4gKiAgIG9wYWNpdHk6MDtcclxuICogfVxyXG4gKiAubXktYW5pbWF0aW9uLm5nLWVudGVyLXN0YWdnZXIge1xyXG4gKiAgIC8mIzQyOyB0aGlzIHdpbGwgaGF2ZSBhIDEwMG1zIGRlbGF5IGJldHdlZW4gZWFjaCBzdWNjZXNzaXZlIGxlYXZlIGFuaW1hdGlvbiAmIzQyOy9cclxuICogICB0cmFuc2l0aW9uLWRlbGF5OiAwLjFzO1xyXG4gKlxyXG4gKiAgIC8mIzQyOyBBcyBvZiAxLjQuNCwgdGhpcyBtdXN0IGFsd2F5cyBiZSBzZXQ6IGl0IHNpZ25hbHMgbmdBbmltYXRlXHJcbiAqICAgICB0byBub3QgYWNjaWRlbnRhbGx5IGluaGVyaXQgYSBkZWxheSBwcm9wZXJ0eSBmcm9tIGFub3RoZXIgQ1NTIGNsYXNzICYjNDI7L1xyXG4gKiAgIHRyYW5zaXRpb24tZHVyYXRpb246IDBzO1xyXG4gKiB9XHJcbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcclxuICogICAvJiM0Mjsgc3RhbmRhcmQgdHJhbnNpdGlvbiBzdHlsZXMgJiM0MjsvXHJcbiAqICAgb3BhY2l0eToxO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBTdGFnZ2VyaW5nIGFuaW1hdGlvbnMgd29yayBieSBkZWZhdWx0IGluIG5nUmVwZWF0IChzbyBsb25nIGFzIHRoZSBDU1MgY2xhc3MgaXMgZGVmaW5lZCkuIE91dHNpZGUgb2YgbmdSZXBlYXQsIHRvIHVzZSBzdGFnZ2VyaW5nIGFuaW1hdGlvbnNcclxuICogb24geW91ciBvd24sIHRoZXkgY2FuIGJlIHRyaWdnZXJlZCBieSBmaXJpbmcgbXVsdGlwbGUgY2FsbHMgdG8gdGhlIHNhbWUgZXZlbnQgb24gJGFuaW1hdGUuIEhvd2V2ZXIsIHRoZSByZXN0cmljdGlvbnMgc3Vycm91bmRpbmcgdGhpc1xyXG4gKiBhcmUgdGhhdCBlYWNoIG9mIHRoZSBlbGVtZW50cyBtdXN0IGhhdmUgdGhlIHNhbWUgQ1NTIGNsYXNzTmFtZSB2YWx1ZSBhcyB3ZWxsIGFzIHRoZSBzYW1lIHBhcmVudCBlbGVtZW50LiBBIHN0YWdnZXIgb3BlcmF0aW9uXHJcbiAqIHdpbGwgYWxzbyBiZSByZXNldCBpZiBvbmUgb3IgbW9yZSBhbmltYXRpb24gZnJhbWVzIGhhdmUgcGFzc2VkIHNpbmNlIHRoZSBtdWx0aXBsZSBjYWxscyB0byBgJGFuaW1hdGVgIHdlcmUgZmlyZWQuXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgY29kZSB3aWxsIGlzc3VlIHRoZSAqKm5nLWxlYXZlLXN0YWdnZXIqKiBldmVudCBvbiB0aGUgZWxlbWVudCBwcm92aWRlZDpcclxuICpcclxuICogYGBganNcclxuICogdmFyIGtpZHMgPSBwYXJlbnQuY2hpbGRyZW4oKTtcclxuICpcclxuICogJGFuaW1hdGUubGVhdmUoa2lkc1swXSk7IC8vc3RhZ2dlciBpbmRleD0wXHJcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMV0pOyAvL3N0YWdnZXIgaW5kZXg9MVxyXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzJdKTsgLy9zdGFnZ2VyIGluZGV4PTJcclxuICogJGFuaW1hdGUubGVhdmUoa2lkc1szXSk7IC8vc3RhZ2dlciBpbmRleD0zXHJcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbNF0pOyAvL3N0YWdnZXIgaW5kZXg9NFxyXG4gKlxyXG4gKiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gKiAgIC8vc3RhZ2dlciBoYXMgcmVzZXQgaXRzZWxmXHJcbiAqICAgJGFuaW1hdGUubGVhdmUoa2lkc1s1XSk7IC8vc3RhZ2dlciBpbmRleD0wXHJcbiAqICAgJGFuaW1hdGUubGVhdmUoa2lkc1s2XSk7IC8vc3RhZ2dlciBpbmRleD0xXHJcbiAqXHJcbiAqICAgJHNjb3BlLiRkaWdlc3QoKTtcclxuICogfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBTdGFnZ2VyIGFuaW1hdGlvbnMgYXJlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCB3aXRoaW4gQ1NTLWRlZmluZWQgYW5pbWF0aW9ucy5cclxuICpcclxuICogIyMjIFRoZSBgbmctYW5pbWF0ZWAgQ1NTIGNsYXNzXHJcbiAqXHJcbiAqIFdoZW4gbmdBbmltYXRlIGlzIGFuaW1hdGluZyBhbiBlbGVtZW50IGl0IHdpbGwgYXBwbHkgdGhlIGBuZy1hbmltYXRlYCBDU1MgY2xhc3MgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLlxyXG4gKiBUaGlzIGlzIGEgdGVtcG9yYXJ5IENTUyBjbGFzcyBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBvdmVyIChmb3IgYm90aCBKYXZhU2NyaXB0IGFuZCBDU1MtYmFzZWQgYW5pbWF0aW9ucykuXHJcbiAqXHJcbiAqIFRoZXJlZm9yZSwgYW5pbWF0aW9ucyBjYW4gYmUgYXBwbGllZCB0byBhbiBlbGVtZW50IHVzaW5nIHRoaXMgdGVtcG9yYXJ5IGNsYXNzIGRpcmVjdGx5IHZpYSBDU1MuXHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAuemlwcGVyLm5nLWFuaW1hdGUge1xyXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gKiB9XHJcbiAqIC56aXBwZXIubmctZW50ZXIge1xyXG4gKiAgIG9wYWNpdHk6MDtcclxuICogfVxyXG4gKiAuemlwcGVyLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XHJcbiAqICAgb3BhY2l0eToxO1xyXG4gKiB9XHJcbiAqIC56aXBwZXIubmctbGVhdmUge1xyXG4gKiAgIG9wYWNpdHk6MTtcclxuICogfVxyXG4gKiAuemlwcGVyLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XHJcbiAqICAgb3BhY2l0eTowO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiAoTm90ZSB0aGF0IHRoZSBgbmctYW5pbWF0ZWAgQ1NTIGNsYXNzIGlzIHJlc2VydmVkIGFuZCBpdCBjYW5ub3QgYmUgYXBwbGllZCBvbiBhbiBlbGVtZW50IGRpcmVjdGx5IHNpbmNlIG5nQW5pbWF0ZSB3aWxsIGFsd2F5cyByZW1vdmVcclxuICogdGhlIENTUyBjbGFzcyBvbmNlIGFuIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLilcclxuICpcclxuICpcclxuICogIyMjIFRoZSBgbmctW2V2ZW50XS1wcmVwYXJlYCBjbGFzc1xyXG4gKlxyXG4gKiBUaGlzIGlzIGEgc3BlY2lhbCBjbGFzcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHByZXZlbnQgdW53YW50ZWQgZmxpY2tlcmluZyAvIGZsYXNoIG9mIGNvbnRlbnQgYmVmb3JlXHJcbiAqIHRoZSBhY3R1YWwgYW5pbWF0aW9uIHN0YXJ0cy4gVGhlIGNsYXNzIGlzIGFkZGVkIGFzIHNvb24gYXMgYW4gYW5pbWF0aW9uIGlzIGluaXRpYWxpemVkLCBidXQgcmVtb3ZlZFxyXG4gKiBiZWZvcmUgdGhlIGFjdHVhbCBhbmltYXRpb24gc3RhcnRzIChhZnRlciB3YWl0aW5nIGZvciBhICRkaWdlc3QpLlxyXG4gKiBJdCBpcyBhbHNvIG9ubHkgYWRkZWQgZm9yICpzdHJ1Y3R1cmFsKiBhbmltYXRpb25zIChgZW50ZXJgLCBgbW92ZWAsIGFuZCBgbGVhdmVgKS5cclxuICpcclxuICogSW4gcHJhY3RpY2UsIGZsaWNrZXJpbmcgY2FuIGFwcGVhciB3aGVuIG5lc3RpbmcgZWxlbWVudHMgd2l0aCBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgc3VjaCBhcyBgbmdJZmBcclxuICogaW50byBlbGVtZW50cyB0aGF0IGhhdmUgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBzdWNoIGFzIGBuZ0NsYXNzYC5cclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8ZGl2IG5nLWNsYXNzPVwie3JlZDogbXlQcm9wfVwiPlxyXG4gKiAgIDxkaXYgbmctY2xhc3M9XCJ7Ymx1ZTogbXlQcm9wfVwiPlxyXG4gKiAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2VcIiBuZy1pZj1cIm15UHJvcFwiPjwvZGl2PlxyXG4gKiAgIDwvZGl2PlxyXG4gKiA8L2Rpdj5cclxuICogYGBgXHJcbiAqXHJcbiAqIEl0IGlzIHBvc3NpYmxlIHRoYXQgZHVyaW5nIHRoZSBgZW50ZXJgIGFuaW1hdGlvbiwgdGhlIGAubWVzc2FnZWAgZGl2IHdpbGwgYmUgYnJpZWZseSB2aXNpYmxlIGJlZm9yZSBpdCBzdGFydHMgYW5pbWF0aW5nLlxyXG4gKiBJbiB0aGF0IGNhc2UsIHlvdSBjYW4gYWRkIHN0eWxlcyB0byB0aGUgQ1NTIHRoYXQgbWFrZSBzdXJlIHRoZSBlbGVtZW50IHN0YXlzIGhpZGRlbiBiZWZvcmUgdGhlIGFuaW1hdGlvbiBzdGFydHM6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAubWVzc2FnZS5uZy1lbnRlci1wcmVwYXJlIHtcclxuICogICBvcGFjaXR5OiAwO1xyXG4gKiB9XHJcbiAqXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiAjIyBKYXZhU2NyaXB0LWJhc2VkIEFuaW1hdGlvbnNcclxuICpcclxuICogbmdBbmltYXRlIGFsc28gYWxsb3dzIGZvciBhbmltYXRpb25zIHRvIGJlIGNvbnN1bWVkIGJ5IEphdmFTY3JpcHQgY29kZS4gVGhlIGFwcHJvYWNoIGlzIHNpbWlsYXIgdG8gQ1NTLWJhc2VkIGFuaW1hdGlvbnMgKHdoZXJlIHRoZXJlIGlzIGEgc2hhcmVkXHJcbiAqIENTUyBjbGFzcyB0aGF0IGlzIHJlZmVyZW5jZWQgaW4gb3VyIEhUTUwgY29kZSkgYnV0IGluIGFkZGl0aW9uIHdlIG5lZWQgdG8gcmVnaXN0ZXIgdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIG9uIHRoZSBtb2R1bGUuIEJ5IG1ha2luZyB1c2Ugb2YgdGhlXHJcbiAqIGBtb2R1bGUuYW5pbWF0aW9uKClgIG1vZHVsZSBmdW5jdGlvbiB3ZSBjYW4gcmVnaXN0ZXIgdGhlIGFuaW1hdGlvbi5cclxuICpcclxuICogTGV0J3Mgc2VlIGFuIGV4YW1wbGUgb2YgYSBlbnRlci9sZWF2ZSBhbmltYXRpb24gdXNpbmcgYG5nUmVwZWF0YDpcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIml0ZW0gaW4gaXRlbXNcIiBjbGFzcz1cInNsaWRlXCI+XHJcbiAqICAge3sgaXRlbSB9fVxyXG4gKiA8L2Rpdj5cclxuICogYGBgXHJcbiAqXHJcbiAqIFNlZSB0aGUgKipzbGlkZSoqIENTUyBjbGFzcz8gTGV0J3MgdXNlIHRoYXQgY2xhc3MgdG8gZGVmaW5lIGFuIGFuaW1hdGlvbiB0aGF0IHdlJ2xsIHN0cnVjdHVyZSBpbiBvdXIgbW9kdWxlIGNvZGUgYnkgdXNpbmcgYG1vZHVsZS5hbmltYXRpb25gOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5zbGlkZScsIFtmdW5jdGlvbigpIHtcclxuICogICByZXR1cm4ge1xyXG4gKiAgICAgLy8gbWFrZSBub3RlIHRoYXQgb3RoZXIgZXZlbnRzIChsaWtlIGFkZENsYXNzL3JlbW92ZUNsYXNzKVxyXG4gKiAgICAgLy8gaGF2ZSBkaWZmZXJlbnQgZnVuY3Rpb24gaW5wdXQgcGFyYW1ldGVyc1xyXG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xyXG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuZmFkZUluKDEwMDAsIGRvbmVGbik7XHJcbiAqXHJcbiAqICAgICAgIC8vIHJlbWVtYmVyIHRvIGNhbGwgZG9uZUZuIHNvIHRoYXQgYW5ndWxhclxyXG4gKiAgICAgICAvLyBrbm93cyB0aGF0IHRoZSBhbmltYXRpb24gaGFzIGNvbmNsdWRlZFxyXG4gKiAgICAgfSxcclxuICpcclxuICogICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xyXG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuZmFkZUluKDEwMDAsIGRvbmVGbik7XHJcbiAqICAgICB9LFxyXG4gKlxyXG4gKiAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xyXG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuZmFkZU91dCgxMDAwLCBkb25lRm4pO1xyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICogfV0pO1xyXG4gKiBgYGBcclxuICpcclxuICogVGhlIG5pY2UgdGhpbmcgYWJvdXQgSlMtYmFzZWQgYW5pbWF0aW9ucyBpcyB0aGF0IHdlIGNhbiBpbmplY3Qgb3RoZXIgc2VydmljZXMgYW5kIG1ha2UgdXNlIG9mIGFkdmFuY2VkIGFuaW1hdGlvbiBsaWJyYXJpZXMgc3VjaCBhc1xyXG4gKiBncmVlbnNvY2suanMgYW5kIHZlbG9jaXR5LmpzLlxyXG4gKlxyXG4gKiBJZiBvdXIgYW5pbWF0aW9uIGNvZGUgY2xhc3MtYmFzZWQgKG1lYW5pbmcgdGhhdCBzb21ldGhpbmcgbGlrZSBgbmdDbGFzc2AsIGBuZ0hpZGVgIGFuZCBgbmdTaG93YCB0cmlnZ2VycyBpdCkgdGhlbiB3ZSBjYW4gc3RpbGwgZGVmaW5lXHJcbiAqIG91ciBhbmltYXRpb25zIGluc2lkZSBvZiB0aGUgc2FtZSByZWdpc3RlcmVkIGFuaW1hdGlvbiwgaG93ZXZlciwgdGhlIGZ1bmN0aW9uIGlucHV0IGFyZ3VtZW50cyBhcmUgYSBiaXQgZGlmZmVyZW50OlxyXG4gKlxyXG4gKiBgYGBodG1sXHJcbiAqIDxkaXYgbmctY2xhc3M9XCJjb2xvclwiIGNsYXNzPVwiY29sb3JmdWxcIj5cclxuICogICB0aGlzIGJveCBpcyBtb29keVxyXG4gKiA8L2Rpdj5cclxuICogPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9yPSdyZWQnXCI+Q2hhbmdlIHRvIHJlZDwvYnV0dG9uPlxyXG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3I9J2JsdWUnXCI+Q2hhbmdlIHRvIGJsdWU8L2J1dHRvbj5cclxuICogPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9yPSdncmVlbidcIj5DaGFuZ2UgdG8gZ3JlZW48L2J1dHRvbj5cclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLmNvbG9yZnVsJywgW2Z1bmN0aW9uKCkge1xyXG4gKiAgIHJldHVybiB7XHJcbiAqICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lRm4pIHtcclxuICogICAgICAgLy8gZG8gc29tZSBjb29sIGFuaW1hdGlvbiBhbmQgY2FsbCB0aGUgZG9uZUZuXHJcbiAqICAgICB9LFxyXG4gKiAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZUZuKSB7XHJcbiAqICAgICAgIC8vIGRvIHNvbWUgY29vbCBhbmltYXRpb24gYW5kIGNhbGwgdGhlIGRvbmVGblxyXG4gKiAgICAgfSxcclxuICogICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGRlZENsYXNzLCByZW1vdmVkQ2xhc3MsIGRvbmVGbikge1xyXG4gKiAgICAgICAvLyBkbyBzb21lIGNvb2wgYW5pbWF0aW9uIGFuZCBjYWxsIHRoZSBkb25lRm5cclxuICogICAgIH1cclxuICogICB9XHJcbiAqIH1dKTtcclxuICogYGBgXHJcbiAqXHJcbiAqICMjIENTUyArIEpTIEFuaW1hdGlvbnMgVG9nZXRoZXJcclxuICpcclxuICogQW5ndWxhckpTIDEuNCBhbmQgaGlnaGVyIGhhcyB0YWtlbiBzdGVwcyB0byBtYWtlIHRoZSBhbWFsZ2FtYXRpb24gb2YgQ1NTIGFuZCBKUyBhbmltYXRpb25zIG1vcmUgZmxleGlibGUuIEhvd2V2ZXIsIHVubGlrZSBlYXJsaWVyIHZlcnNpb25zIG9mIEFuZ3VsYXIsXHJcbiAqIGRlZmluaW5nIENTUyBhbmQgSlMgYW5pbWF0aW9ucyB0byB3b3JrIG9mZiBvZiB0aGUgc2FtZSBDU1MgY2xhc3Mgd2lsbCBub3Qgd29yayBhbnltb3JlLiBUaGVyZWZvcmUgdGhlIGV4YW1wbGUgYmVsb3cgd2lsbCBvbmx5IHJlc3VsdCBpbiAqKkpTIGFuaW1hdGlvbnMgdGFraW5nXHJcbiAqIGNoYXJnZSBvZiB0aGUgYW5pbWF0aW9uKio6XHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGRpdiBuZy1pZj1cImJvb2xcIiBjbGFzcz1cInNsaWRlXCI+XHJcbiAqICAgU2xpZGUgaW4gYW5kIG91dFxyXG4gKiA8L2Rpdj5cclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgW2Z1bmN0aW9uKCkge1xyXG4gKiAgIHJldHVybiB7XHJcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XHJcbiAqICAgICAgIGpRdWVyeShlbGVtZW50KS5zbGlkZUluKDEwMDAsIGRvbmVGbik7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBgYGBjc3NcclxuICogLnNsaWRlLm5nLWVudGVyIHtcclxuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcclxuICogICB0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTAwcHgpO1xyXG4gKiB9XHJcbiAqIC5zbGlkZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xyXG4gKiAgIHRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBEb2VzIHRoaXMgbWVhbiB0aGF0IENTUyBhbmQgSlMgYW5pbWF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcj8gRG8gSlMtYmFzZWQgYW5pbWF0aW9ucyBhbHdheXMgaGF2ZSBoaWdoZXIgcHJpb3JpdHk/IFdlIGNhbiBtYWtlIHVwIGZvciB0aGVcclxuICogbGFjayBvZiBDU1MgYW5pbWF0aW9ucyBieSB1c2luZyB0aGUgYCRhbmltYXRlQ3NzYCBzZXJ2aWNlIHRvIHRyaWdnZXIgb3VyIG93biB0d2Vha2VkLW91dCwgQ1NTLWJhc2VkIGFuaW1hdGlvbnMgZGlyZWN0bHkgZnJvbVxyXG4gKiBvdXIgb3duIEpTLWJhc2VkIGFuaW1hdGlvbiBjb2RlOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5zbGlkZScsIFsnJGFuaW1hdGVDc3MnLCBmdW5jdGlvbigkYW5pbWF0ZUNzcykge1xyXG4gKiAgIHJldHVybiB7XHJcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4qICAgICAgICAvLyB0aGlzIHdpbGwgdHJpZ2dlciBgLnNsaWRlLm5nLWVudGVyYCBhbmQgYC5zbGlkZS5uZy1lbnRlci1hY3RpdmVgLlxyXG4gKiAgICAgICByZXR1cm4gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xyXG4gKiAgICAgICAgIGV2ZW50OiAnZW50ZXInLFxyXG4gKiAgICAgICAgIHN0cnVjdHVyYWw6IHRydWVcclxuICogICAgICAgfSk7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiB9XSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGUgbmljZSB0aGluZyBoZXJlIGlzIHRoYXQgd2UgY2FuIHNhdmUgYmFuZHdpZHRoIGJ5IHN0aWNraW5nIHRvIG91ciBDU1MtYmFzZWQgYW5pbWF0aW9uIGNvZGUgYW5kIHdlIGRvbid0IG5lZWQgdG8gcmVseSBvbiBhIDNyZC1wYXJ0eSBhbmltYXRpb24gZnJhbWV3b3JrLlxyXG4gKlxyXG4gKiBUaGUgYCRhbmltYXRlQ3NzYCBzZXJ2aWNlIGlzIHZlcnkgcG93ZXJmdWwgc2luY2Ugd2UgY2FuIGZlZWQgaW4gYWxsIGtpbmRzIG9mIGV4dHJhIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIGV2YWx1YXRlZCBhbmQgZmVkIGludG8gYSBDU1MgdHJhbnNpdGlvbiBvclxyXG4gKiBrZXlmcmFtZSBhbmltYXRpb24uIEZvciBleGFtcGxlIGlmIHdlIHdhbnRlZCB0byBhbmltYXRlIHRoZSBoZWlnaHQgb2YgYW4gZWxlbWVudCB3aGlsZSBhZGRpbmcgYW5kIHJlbW92aW5nIGNsYXNzZXMgdGhlbiB3ZSBjYW4gZG8gc28gYnkgcHJvdmlkaW5nIHRoYXRcclxuICogZGF0YSBpbnRvIGAkYW5pbWF0ZUNzc2AgZGlyZWN0bHk6XHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XHJcbiAqICAgcmV0dXJuIHtcclxuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAqICAgICAgIHJldHVybiAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XHJcbiAqICAgICAgICAgZXZlbnQ6ICdlbnRlcicsXHJcbiAqICAgICAgICAgc3RydWN0dXJhbDogdHJ1ZSxcclxuICogICAgICAgICBhZGRDbGFzczogJ21hcm9vbi1zZXR0aW5nJyxcclxuICogICAgICAgICBmcm9tOiB7IGhlaWdodDowIH0sXHJcbiAqICAgICAgICAgdG86IHsgaGVpZ2h0OiAyMDAgfVxyXG4gKiAgICAgICB9KTtcclxuICogICAgIH1cclxuICogICB9XHJcbiAqIH1dKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIE5vdyB3ZSBjYW4gZmlsbCBpbiB0aGUgcmVzdCB2aWEgb3VyIHRyYW5zaXRpb24gQ1NTIGNvZGU6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAvJiM0MjsgdGhlIHRyYW5zaXRpb24gdGVsbHMgbmdBbmltYXRlIHRvIG1ha2UgdGhlIGFuaW1hdGlvbiBoYXBwZW4gJiM0MjsvXHJcbiAqIC5zbGlkZS5uZy1lbnRlciB7IHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsOyB9XHJcbiAqXHJcbiAqIC8mIzQyOyB0aGlzIGV4dHJhIENTUyBjbGFzcyB3aWxsIGJlIGFic29yYmVkIGludG8gdGhlIHRyYW5zaXRpb25cclxuICogc2luY2UgdGhlICRhbmltYXRlQ3NzIGNvZGUgaXMgYWRkaW5nIHRoZSBjbGFzcyAmIzQyOy9cclxuICogLm1hcm9vbi1zZXR0aW5nIHsgYmFja2dyb3VuZDpyZWQ7IH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEFuZCBgJGFuaW1hdGVDc3NgIHdpbGwgZmlndXJlIG91dCB0aGUgcmVzdC4gSnVzdCBtYWtlIHN1cmUgdG8gaGF2ZSB0aGUgYGRvbmUoKWAgY2FsbGJhY2sgZmlyZSB0aGUgYGRvbmVGbmAgZnVuY3Rpb24gdG8gc2lnbmFsIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBvdmVyLlxyXG4gKlxyXG4gKiBUbyBsZWFybiBtb3JlIGFib3V0IHdoYXQncyBwb3NzaWJsZSBiZSBzdXJlIHRvIHZpc2l0IHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzICRhbmltYXRlQ3NzIHNlcnZpY2V9LlxyXG4gKlxyXG4gKiAjIyBBbmltYXRpb24gQW5jaG9yaW5nICh2aWEgYG5nLWFuaW1hdGUtcmVmYClcclxuICpcclxuICogbmdBbmltYXRlIGluIEFuZ3VsYXJKUyAxLjQgY29tZXMgcGFja2VkIHdpdGggdGhlIGFiaWxpdHkgdG8gY3Jvc3MtYW5pbWF0ZSBlbGVtZW50cyBiZXR3ZWVuXHJcbiAqIHN0cnVjdHVyYWwgYXJlYXMgb2YgYW4gYXBwbGljYXRpb24gKGxpa2Ugdmlld3MpIGJ5IHBhaXJpbmcgdXAgZWxlbWVudHMgdXNpbmcgYW4gYXR0cmlidXRlXHJcbiAqIGNhbGxlZCBgbmctYW5pbWF0ZS1yZWZgLlxyXG4gKlxyXG4gKiBMZXQncyBzYXkgZm9yIGV4YW1wbGUgd2UgaGF2ZSB0d28gdmlld3MgdGhhdCBhcmUgbWFuYWdlZCBieSBgbmctdmlld2AgYW5kIHdlIHdhbnQgdG8gc2hvd1xyXG4gKiB0aGF0IHRoZXJlIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gdHdvIGNvbXBvbmVudHMgc2l0dWF0ZWQgaW4gd2l0aGluIHRoZXNlIHZpZXdzLiBCeSB1c2luZyB0aGVcclxuICogYG5nLWFuaW1hdGUtcmVmYCBhdHRyaWJ1dGUgd2UgY2FuIGlkZW50aWZ5IHRoYXQgdGhlIHR3byBjb21wb25lbnRzIGFyZSBwYWlyZWQgdG9nZXRoZXIgYW5kIHdlXHJcbiAqIGNhbiB0aGVuIGF0dGFjaCBhbiBhbmltYXRpb24sIHdoaWNoIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB2aWV3IGNoYW5nZXMuXHJcbiAqXHJcbiAqIFNheSBmb3IgZXhhbXBsZSB3ZSBoYXZlIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUgY29kZTpcclxuICpcclxuICogYGBgaHRtbFxyXG4gKiA8IS0tIGluZGV4Lmh0bWwgLS0+XHJcbiAqIDxkaXYgbmctdmlldyBjbGFzcz1cInZpZXctYW5pbWF0aW9uXCI+XHJcbiAqIDwvZGl2PlxyXG4gKlxyXG4gKiA8IS0tIGhvbWUuaHRtbCAtLT5cclxuICogPGEgaHJlZj1cIiMvYmFubmVyLXBhZ2VcIj5cclxuICogICA8aW1nIHNyYz1cIi4vYmFubmVyLmpwZ1wiIGNsYXNzPVwiYmFubmVyXCIgbmctYW5pbWF0ZS1yZWY9XCJiYW5uZXJcIj5cclxuICogPC9hPlxyXG4gKlxyXG4gKiA8IS0tIGJhbm5lci1wYWdlLmh0bWwgLS0+XHJcbiAqIDxpbWcgc3JjPVwiLi9iYW5uZXIuanBnXCIgY2xhc3M9XCJiYW5uZXJcIiBuZy1hbmltYXRlLXJlZj1cImJhbm5lclwiPlxyXG4gKiBgYGBcclxuICpcclxuICogTm93LCB3aGVuIHRoZSB2aWV3IGNoYW5nZXMgKG9uY2UgdGhlIGxpbmsgaXMgY2xpY2tlZCksIG5nQW5pbWF0ZSB3aWxsIGV4YW1pbmUgdGhlXHJcbiAqIEhUTUwgY29udGVudHMgdG8gc2VlIGlmIHRoZXJlIGlzIGEgbWF0Y2ggcmVmZXJlbmNlIGJldHdlZW4gYW55IGNvbXBvbmVudHMgaW4gdGhlIHZpZXdcclxuICogdGhhdCBpcyBsZWF2aW5nIGFuZCB0aGUgdmlldyB0aGF0IGlzIGVudGVyaW5nLiBJdCB3aWxsIHNjYW4gYm90aCB0aGUgdmlldyB3aGljaCBpcyBiZWluZ1xyXG4gKiByZW1vdmVkIChsZWF2ZSkgYW5kIGluc2VydGVkIChlbnRlcikgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbnkgcGFpcmVkIERPTSBlbGVtZW50cyB0aGF0XHJcbiAqIGNvbnRhaW4gYSBtYXRjaGluZyByZWYgdmFsdWUuXHJcbiAqXHJcbiAqIFRoZSB0d28gaW1hZ2VzIG1hdGNoIHNpbmNlIHRoZXkgc2hhcmUgdGhlIHNhbWUgcmVmIHZhbHVlLiBuZ0FuaW1hdGUgd2lsbCBub3cgY3JlYXRlIGFcclxuICogdHJhbnNwb3J0IGVsZW1lbnQgKHdoaWNoIGlzIGEgY2xvbmUgb2YgdGhlIGZpcnN0IGltYWdlIGVsZW1lbnQpIGFuZCBpdCB3aWxsIHRoZW4gYXR0ZW1wdFxyXG4gKiB0byBhbmltYXRlIHRvIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2Vjb25kIGltYWdlIGVsZW1lbnQgaW4gdGhlIG5leHQgdmlldy4gRm9yIHRoZSBhbmltYXRpb24gdG9cclxuICogd29yayBhIHNwZWNpYWwgQ1NTIGNsYXNzIGNhbGxlZCBgbmctYW5jaG9yYCB3aWxsIGJlIGFkZGVkIHRvIHRoZSB0cmFuc3BvcnRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBXZSBjYW4gbm93IGF0dGFjaCBhIHRyYW5zaXRpb24gb250byB0aGUgYC5iYW5uZXIubmctYW5jaG9yYCBDU1MgY2xhc3MgYW5kIHRoZW5cclxuICogbmdBbmltYXRlIHdpbGwgaGFuZGxlIHRoZSBlbnRpcmUgdHJhbnNpdGlvbiBmb3IgdXMgYXMgd2VsbCBhcyB0aGUgYWRkaXRpb24gYW5kIHJlbW92YWwgb2ZcclxuICogYW55IGNoYW5nZXMgb2YgQ1NTIGNsYXNzZXMgYmV0d2VlbiB0aGUgZWxlbWVudHM6XHJcbiAqXHJcbiAqIGBgYGNzc1xyXG4gKiAuYmFubmVyLm5nLWFuY2hvciB7XHJcbiAqICAgLyYjNDI7IHRoaXMgYW5pbWF0aW9uIHdpbGwgbGFzdCBmb3IgMSBzZWNvbmQgc2luY2UgdGhlcmUgYXJlXHJcbiAqICAgICAgICAgIHR3byBwaGFzZXMgdG8gdGhlIGFuaW1hdGlvbiAoYW4gYGluYCBhbmQgYW4gYG91dGAgcGhhc2UpICYjNDI7L1xyXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBXZSBhbHNvICoqbXVzdCoqIGluY2x1ZGUgYW5pbWF0aW9ucyBmb3IgdGhlIHZpZXdzIHRoYXQgYXJlIGJlaW5nIGVudGVyZWQgYW5kIHJlbW92ZWRcclxuICogKG90aGVyd2lzZSBhbmNob3Jpbmcgd291bGRuJ3QgYmUgcG9zc2libGUgc2luY2UgdGhlIG5ldyB2aWV3IHdvdWxkIGJlIGluc2VydGVkIHJpZ2h0IGF3YXkpLlxyXG4gKlxyXG4gKiBgYGBjc3NcclxuICogLnZpZXctYW5pbWF0aW9uLm5nLWVudGVyLCAudmlldy1hbmltYXRpb24ubmctbGVhdmUge1xyXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gKiAgIHBvc2l0aW9uOmZpeGVkO1xyXG4gKiAgIGxlZnQ6MDtcclxuICogICB0b3A6MDtcclxuICogICB3aWR0aDoxMDAlO1xyXG4gKiB9XHJcbiAqIC52aWV3LWFuaW1hdGlvbi5uZy1lbnRlciB7XHJcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSk7XHJcbiAqIH1cclxuICogLnZpZXctYW5pbWF0aW9uLm5nLWxlYXZlLFxyXG4gKiAudmlldy1hbmltYXRpb24ubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcclxuICogICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7XHJcbiAqIH1cclxuICogLnZpZXctYW5pbWF0aW9uLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XHJcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpO1xyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBOb3cgd2UgY2FuIGp1bXAgYmFjayB0byB0aGUgYW5jaG9yIGFuaW1hdGlvbi4gV2hlbiB0aGUgYW5pbWF0aW9uIGhhcHBlbnMsIHRoZXJlIGFyZSB0d28gc3RhZ2VzIHRoYXQgb2NjdXI6XHJcbiAqIGFuIGBvdXRgIGFuZCBhbiBgaW5gIHN0YWdlLiBUaGUgYG91dGAgc3RhZ2UgaGFwcGVucyBmaXJzdCBhbmQgdGhhdCBpcyB3aGVuIHRoZSBlbGVtZW50IGlzIGFuaW1hdGVkIGF3YXlcclxuICogZnJvbSBpdHMgb3JpZ2luLiBPbmNlIHRoYXQgYW5pbWF0aW9uIGlzIG92ZXIgdGhlbiB0aGUgYGluYCBzdGFnZSBvY2N1cnMgd2hpY2ggYW5pbWF0ZXMgdGhlXHJcbiAqIGVsZW1lbnQgdG8gaXRzIGRlc3RpbmF0aW9uLiBUaGUgcmVhc29uIHdoeSB0aGVyZSBhcmUgdHdvIGFuaW1hdGlvbnMgaXMgdG8gZ2l2ZSBlbm91Z2ggdGltZVxyXG4gKiBmb3IgdGhlIGVudGVyIGFuaW1hdGlvbiBvbiB0aGUgbmV3IGVsZW1lbnQgdG8gYmUgcmVhZHkuXHJcbiAqXHJcbiAqIFRoZSBleGFtcGxlIGFib3ZlIHNldHMgdXAgYSB0cmFuc2l0aW9uIGZvciBib3RoIHRoZSBpbiBhbmQgb3V0IHBoYXNlcywgYnV0IHdlIGNhbiBhbHNvIHRhcmdldCB0aGUgb3V0IG9yXHJcbiAqIGluIHBoYXNlcyBkaXJlY3RseSB2aWEgYG5nLWFuY2hvci1vdXRgIGFuZCBgbmctYW5jaG9yLWluYC5cclxuICpcclxuICogYGBgY3NzXHJcbiAqIC5iYW5uZXIubmctYW5jaG9yLW91dCB7XHJcbiAqICAgdHJhbnNpdGlvbjogMC41cyBsaW5lYXIgYWxsO1xyXG4gKlxyXG4gKiAgIC8mIzQyOyB0aGUgc2NhbGUgd2lsbCBiZSBhcHBsaWVkIGR1cmluZyB0aGUgb3V0IGFuaW1hdGlvbixcclxuICogICAgICAgICAgYnV0IHdpbGwgYmUgYW5pbWF0ZWQgYXdheSB3aGVuIHRoZSBpbiBhbmltYXRpb24gcnVucyAmIzQyOy9cclxuICogICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XHJcbiAqIH1cclxuICpcclxuICogLmJhbm5lci5uZy1hbmNob3ItaW4ge1xyXG4gKiAgIHRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqICMjIyBBbmNob3JpbmcgRGVtb1xyXG4gKlxyXG4gIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvcmluZ0V4YW1wbGVcIlxyXG4gICAgICAgICAgIG5hbWU9XCJhbmNob3JpbmdFeGFtcGxlXCJcclxuICAgICAgICAgICBpZD1cImFuY2hvcmluZ0V4YW1wbGVcIlxyXG4gICAgICAgICAgIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanM7YW5ndWxhci1yb3V0ZS5qc1wiXHJcbiAgICAgICAgICAgYW5pbWF0aW9ucz1cInRydWVcIj5cclxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICAgIDxhIGhyZWY9XCIjL1wiPkhvbWU8L2E+XHJcbiAgICAgIDxociAvPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidmlldy1jb250YWluZXJcIj5cclxuICAgICAgICA8ZGl2IG5nLXZpZXcgY2xhc3M9XCJ2aWV3XCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxyXG4gICAgICBhbmd1bGFyLm1vZHVsZSgnYW5jaG9yaW5nRXhhbXBsZScsIFsnbmdBbmltYXRlJywgJ25nUm91dGUnXSlcclxuICAgICAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xyXG4gICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignLycsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdob21lLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXIgYXMgaG9tZSdcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignL3Byb2ZpbGUvOmlkJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Byb2ZpbGUuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQcm9maWxlQ29udHJvbGxlciBhcyBwcm9maWxlJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfV0pXHJcbiAgICAgICAgLnJ1bihbJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgICAkcm9vdFNjb3BlLnJlY29yZHMgPSBbXHJcbiAgICAgICAgICAgIHsgaWQ6MSwgdGl0bGU6IFwiTWlzcyBCZXVsYWggUm9vYlwiIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6MiwgdGl0bGU6IFwiVHJlbnQgTW9yaXNzZXR0ZVwiIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6MywgdGl0bGU6IFwiTWlzcyBBdmEgUG91cm9zXCIgfSxcclxuICAgICAgICAgICAgeyBpZDo0LCB0aXRsZTogXCJSb2QgUG91cm9zXCIgfSxcclxuICAgICAgICAgICAgeyBpZDo1LCB0aXRsZTogXCJBYmR1bCBSaWNlXCIgfSxcclxuICAgICAgICAgICAgeyBpZDo2LCB0aXRsZTogXCJMYXVyaWUgUnV0aGVyZm9yZCBTci5cIiB9LFxyXG4gICAgICAgICAgICB7IGlkOjcsIHRpdGxlOiBcIk5ha2lhIE1jTGF1Z2hsaW5cIiB9LFxyXG4gICAgICAgICAgICB7IGlkOjgsIHRpdGxlOiBcIkpvcmRvbiBCbGFuZGEgRFZNXCIgfSxcclxuICAgICAgICAgICAgeyBpZDo5LCB0aXRsZTogXCJSaG9kYSBIYW5kXCIgfSxcclxuICAgICAgICAgICAgeyBpZDoxMCwgdGl0bGU6IFwiQWxleGFuZHJlYSBTYXVlclwiIH1cclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfV0pXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0hvbWVDb250cm9sbGVyJywgW2Z1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy9lbXB0eVxyXG4gICAgICAgIH1dKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdQcm9maWxlQ29udHJvbGxlcicsIFsnJHJvb3RTY29wZScsICckcm91dGVQYXJhbXMnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMpIHtcclxuICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KCRyb3V0ZVBhcmFtcy5pZCwgMTApO1xyXG4gICAgICAgICAgdmFyIHJlY29yZCA9ICRyb290U2NvcGUucmVjb3Jkc1tpbmRleCAtIDFdO1xyXG5cclxuICAgICAgICAgIHRoaXMudGl0bGUgPSByZWNvcmQudGl0bGU7XHJcbiAgICAgICAgICB0aGlzLmlkID0gcmVjb3JkLmlkO1xyXG4gICAgICAgIH1dKTtcclxuICAgIDwvZmlsZT5cclxuICAgIDxmaWxlIG5hbWU9XCJob21lLmh0bWxcIj5cclxuICAgICAgPGgyPldlbGNvbWUgdG8gdGhlIGhvbWUgcGFnZTwvaDE+XHJcbiAgICAgIDxwPlBsZWFzZSBjbGljayBvbiBhbiBlbGVtZW50PC9wPlxyXG4gICAgICA8YSBjbGFzcz1cInJlY29yZFwiXHJcbiAgICAgICAgIG5nLWhyZWY9XCIjL3Byb2ZpbGUve3sgcmVjb3JkLmlkIH19XCJcclxuICAgICAgICAgbmctYW5pbWF0ZS1yZWY9XCJ7eyByZWNvcmQuaWQgfX1cIlxyXG4gICAgICAgICBuZy1yZXBlYXQ9XCJyZWNvcmQgaW4gcmVjb3Jkc1wiPlxyXG4gICAgICAgIHt7IHJlY29yZC50aXRsZSB9fVxyXG4gICAgICA8L2E+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwicHJvZmlsZS5odG1sXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9maWxlIHJlY29yZFwiIG5nLWFuaW1hdGUtcmVmPVwie3sgcHJvZmlsZS5pZCB9fVwiPlxyXG4gICAgICAgIHt7IHByb2ZpbGUudGl0bGUgfX1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cclxuICAgICAgLnJlY29yZCB7XHJcbiAgICAgICAgZGlzcGxheTpibG9jaztcclxuICAgICAgICBmb250LXNpemU6MjBweDtcclxuICAgICAgfVxyXG4gICAgICAucHJvZmlsZSB7XHJcbiAgICAgICAgYmFja2dyb3VuZDpibGFjaztcclxuICAgICAgICBjb2xvcjp3aGl0ZTtcclxuICAgICAgICBmb250LXNpemU6MTAwcHg7XHJcbiAgICAgIH1cclxuICAgICAgLnZpZXctY29udGFpbmVyIHtcclxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcclxuICAgICAgfVxyXG4gICAgICAudmlldy1jb250YWluZXIgPiAudmlldy5uZy1hbmltYXRlIHtcclxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcclxuICAgICAgICB0b3A6MDtcclxuICAgICAgICBsZWZ0OjA7XHJcbiAgICAgICAgd2lkdGg6MTAwJTtcclxuICAgICAgICBtaW4taGVpZ2h0OjUwMHB4O1xyXG4gICAgICB9XHJcbiAgICAgIC52aWV3Lm5nLWVudGVyLCAudmlldy5uZy1sZWF2ZSxcclxuICAgICAgLnJlY29yZC5uZy1hbmNob3Ige1xyXG4gICAgICAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gICAgICB9XHJcbiAgICAgIC52aWV3Lm5nLWVudGVyIHtcclxuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKTtcclxuICAgICAgfVxyXG4gICAgICAudmlldy5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUsIC52aWV3Lm5nLWxlYXZlIHtcclxuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7XHJcbiAgICAgIH1cclxuICAgICAgLnZpZXcubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcclxuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSk7XHJcbiAgICAgIH1cclxuICAgICAgLnJlY29yZC5uZy1hbmNob3Itb3V0IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOnJlZDtcclxuICAgICAgfVxyXG4gICAgPC9maWxlPlxyXG4gIDwvZXhhbXBsZT5cclxuICpcclxuICogIyMjIEhvdyBpcyB0aGUgZWxlbWVudCB0cmFuc3BvcnRlZD9cclxuICpcclxuICogV2hlbiBhbiBhbmNob3IgYW5pbWF0aW9uIG9jY3VycywgbmdBbmltYXRlIHdpbGwgY2xvbmUgdGhlIHN0YXJ0aW5nIGVsZW1lbnQgYW5kIHBvc2l0aW9uIGl0IGV4YWN0bHkgd2hlcmUgdGhlIHN0YXJ0aW5nXHJcbiAqIGVsZW1lbnQgaXMgbG9jYXRlZCBvbiBzY3JlZW4gdmlhIGFic29sdXRlIHBvc2l0aW9uaW5nLiBUaGUgY2xvbmVkIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5zaWRlIG9mIHRoZSByb290IGVsZW1lbnRcclxuICogb2YgdGhlIGFwcGxpY2F0aW9uICh3aGVyZSBuZy1hcHAgd2FzIGRlZmluZWQpIGFuZCBhbGwgb2YgdGhlIENTUyBjbGFzc2VzIG9mIHRoZSBzdGFydGluZyBlbGVtZW50IHdpbGwgYmUgYXBwbGllZC4gVGhlXHJcbiAqIGVsZW1lbnQgd2lsbCB0aGVuIGFuaW1hdGUgaW50byB0aGUgYG91dGAgYW5kIGBpbmAgYW5pbWF0aW9ucyBhbmQgd2lsbCBldmVudHVhbGx5IHJlYWNoIHRoZSBjb29yZGluYXRlcyBhbmQgbWF0Y2hcclxuICogdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnQuIER1cmluZyB0aGUgZW50aXJlIGFuaW1hdGlvbiBhIENTUyBjbGFzcyBvZiBgLm5nLWFuaW1hdGUtc2hpbWAgd2lsbCBiZSBhcHBsaWVkXHJcbiAqIHRvIGJvdGggdGhlIHN0YXJ0aW5nIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBpbiBvcmRlciB0byBoaWRlIHRoZW0gZnJvbSBiZWluZyB2aXNpYmxlICh0aGUgQ1NTIHN0eWxpbmcgZm9yIHRoZSBjbGFzc1xyXG4gKiBpczogYHZpc2liaWxpdHk6aGlkZGVuYCkuIE9uY2UgdGhlIGFuY2hvciByZWFjaGVzIGl0cyBkZXN0aW5hdGlvbiB0aGVuIGl0IHdpbGwgYmUgcmVtb3ZlZCBhbmQgdGhlIGRlc3RpbmF0aW9uIGVsZW1lbnRcclxuICogd2lsbCBiZWNvbWUgdmlzaWJsZSBzaW5jZSB0aGUgc2hpbSBjbGFzcyB3aWxsIGJlIHJlbW92ZWQuXHJcbiAqXHJcbiAqICMjIyBIb3cgaXMgdGhlIG1vcnBoaW5nIGhhbmRsZWQ/XHJcbiAqXHJcbiAqIENTUyBBbmNob3JpbmcgcmVsaWVzIG9uIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgYW5kIHRoZSBpbnRlcm5hbCBjb2RlIGlzIGludGVsbGlnZW50IGVub3VnaCB0byBmaWd1cmUgb3V0XHJcbiAqIHdoYXQgQ1NTIGNsYXNzZXMgZGlmZmVyIGJldHdlZW4gdGhlIHN0YXJ0aW5nIGVsZW1lbnQgYW5kIHRoZSBkZXN0aW5hdGlvbiBlbGVtZW50LiBUaGVzZSBkaWZmZXJlbnQgQ1NTIGNsYXNzZXNcclxuICogd2lsbCBiZSBhZGRlZC9yZW1vdmVkIG9uIHRoZSBhbmNob3IgZWxlbWVudCBhbmQgYSB0cmFuc2l0aW9uIHdpbGwgYmUgYXBwbGllZCAodGhlIHRyYW5zaXRpb24gdGhhdCBpcyBwcm92aWRlZFxyXG4gKiBpbiB0aGUgYW5jaG9yIGNsYXNzKS4gTG9uZyBzdG9yeSBzaG9ydCwgbmdBbmltYXRlIHdpbGwgZmlndXJlIG91dCB3aGF0IGNsYXNzZXMgdG8gYWRkIGFuZCByZW1vdmUgd2hpY2ggd2lsbFxyXG4gKiBtYWtlIHRoZSB0cmFuc2l0aW9uIG9mIHRoZSBlbGVtZW50IGFzIHNtb290aCBhbmQgYXV0b21hdGljIGFzIHBvc3NpYmxlLiBCZSBzdXJlIHRvIHVzZSBzaW1wbGUgQ1NTIGNsYXNzZXMgdGhhdFxyXG4gKiBkbyBub3QgcmVseSBvbiBET00gbmVzdGluZyBzdHJ1Y3R1cmUgc28gdGhhdCB0aGUgYW5jaG9yIGVsZW1lbnQgYXBwZWFycyB0aGUgc2FtZSBhcyB0aGUgc3RhcnRpbmcgZWxlbWVudCAoc2luY2VcclxuICogdGhlIGNsb25lZCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgb2Ygcm9vdCBlbGVtZW50IHdoaWNoIGlzIGxpa2VseSBjbG9zZSB0byB0aGUgYm9keSBlbGVtZW50KS5cclxuICpcclxuICogTm90ZSB0aGF0IGlmIHRoZSByb290IGVsZW1lbnQgaXMgb24gdGhlIGA8aHRtbD5gIGVsZW1lbnQgdGhlbiB0aGUgY2xvbmVkIG5vZGUgd2lsbCBiZSBwbGFjZWQgaW5zaWRlIG9mIGJvZHkuXHJcbiAqXHJcbiAqXHJcbiAqICMjIFVzaW5nICRhbmltYXRlIGluIHlvdXIgZGlyZWN0aXZlIGNvZGVcclxuICpcclxuICogU28gZmFyIHdlJ3ZlIGV4cGxvcmVkIGhvdyB0byBmZWVkIGluIGFuaW1hdGlvbnMgaW50byBhbiBBbmd1bGFyIGFwcGxpY2F0aW9uLCBidXQgaG93IGRvIHdlIHRyaWdnZXIgYW5pbWF0aW9ucyB3aXRoaW4gb3VyIG93biBkaXJlY3RpdmVzIGluIG91ciBhcHBsaWNhdGlvbj9cclxuICogQnkgaW5qZWN0aW5nIHRoZSBgJGFuaW1hdGVgIHNlcnZpY2UgaW50byBvdXIgZGlyZWN0aXZlIGNvZGUsIHdlIGNhbiB0cmlnZ2VyIHN0cnVjdHVyYWwgYW5kIGNsYXNzLWJhc2VkIGhvb2tzIHdoaWNoIGNhbiB0aGVuIGJlIGNvbnN1bWVkIGJ5IGFuaW1hdGlvbnMuIExldCdzXHJcbiAqIGltYWdpbmUgd2UgaGF2ZSBhIGdyZWV0aW5nIGJveCB0aGF0IHNob3dzIGFuZCBoaWRlcyBpdHNlbGYgd2hlbiB0aGUgZGF0YSBjaGFuZ2VzXHJcbiAqXHJcbiAqIGBgYGh0bWxcclxuICogPGdyZWV0aW5nLWJveCBhY3RpdmU9XCJvbk9yT2ZmXCI+SGkgdGhlcmU8L2dyZWV0aW5nLWJveD5cclxuICogYGBgXHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIG5nTW9kdWxlLmRpcmVjdGl2ZSgnZ3JlZXRpbmdCb3gnLCBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcclxuICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAqICAgICBhdHRycy4kb2JzZXJ2ZSgnYWN0aXZlJywgZnVuY3Rpb24odmFsdWUpIHtcclxuICogICAgICAgdmFsdWUgPyAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCAnb24nKSA6ICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdvbicpO1xyXG4gKiAgICAgfSk7XHJcbiAqICAgfSk7XHJcbiAqIH1dKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIE5vdyB0aGUgYG9uYCBDU1MgY2xhc3MgaXMgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGdyZWV0aW5nIGJveCBjb21wb25lbnQuIE5vdyBpZiB3ZSBhZGQgYSBDU1MgY2xhc3Mgb24gdG9wIG9mIHRoZSBncmVldGluZyBib3ggZWxlbWVudFxyXG4gKiBpbiBvdXIgSFRNTCBjb2RlIHRoZW4gd2UgY2FuIHRyaWdnZXIgYSBDU1Mgb3IgSlMgYW5pbWF0aW9uIHRvIGhhcHBlbi5cclxuICpcclxuICogYGBgY3NzXHJcbiAqIC8mIzQyOyBub3JtYWxseSB3ZSB3b3VsZCBjcmVhdGUgYSBDU1MgY2xhc3MgdG8gcmVmZXJlbmNlIG9uIHRoZSBlbGVtZW50ICYjNDI7L1xyXG4gKiBncmVldGluZy1ib3gub24geyB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsgYmFja2dyb3VuZDpncmVlbjsgY29sb3I6d2hpdGU7IH1cclxuICogYGBgXHJcbiAqXHJcbiAqIFRoZSBgJGFuaW1hdGVgIHNlcnZpY2UgY29udGFpbnMgYSB2YXJpZXR5IG9mIG90aGVyIG1ldGhvZHMgbGlrZSBgZW50ZXJgLCBgbGVhdmVgLCBgYW5pbWF0ZWAgYW5kIGBzZXRDbGFzc2AuIFRvIGxlYXJuIG1vcmUgYWJvdXQgd2hhdCdzXHJcbiAqIHBvc3NpYmxlIGJlIHN1cmUgdG8gdmlzaXQgdGhlIHtAbGluayBuZy4kYW5pbWF0ZSAkYW5pbWF0ZSBzZXJ2aWNlIEFQSSBwYWdlfS5cclxuICpcclxuICpcclxuICogIyMgQ2FsbGJhY2tzIGFuZCBQcm9taXNlc1xyXG4gKlxyXG4gKiBXaGVuIGAkYW5pbWF0ZWAgaXMgY2FsbGVkIGl0IHJldHVybnMgYSBwcm9taXNlIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FwdHVyZSB3aGVuIHRoZSBhbmltYXRpb24gaGFzIGVuZGVkLiBUaGVyZWZvcmUgaWYgd2Ugd2VyZSB0byB0cmlnZ2VyXHJcbiAqIGFuIGFuaW1hdGlvbiAod2l0aGluIG91ciBkaXJlY3RpdmUgY29kZSkgdGhlbiB3ZSBjYW4gY29udGludWUgcGVyZm9ybWluZyBkaXJlY3RpdmUgYW5kIHNjb3BlIHJlbGF0ZWQgYWN0aXZpdGllcyBhZnRlciB0aGUgYW5pbWF0aW9uIGhhc1xyXG4gKiBlbmRlZCBieSBjaGFpbmluZyBvbnRvIHRoZSByZXR1cm5lZCBwcm9taXNlIHRoYXQgYW5pbWF0aW9uIG1ldGhvZCByZXR1cm5zLlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiAvLyBzb21ld2hlcmUgd2l0aGluIHRoZSBkZXB0aHMgb2YgdGhlIGRpcmVjdGl2ZVxyXG4gKiAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBwYXJlbnQpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAqICAgLy90aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWRcclxuICogfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiAoTm90ZSB0aGF0IGVhcmxpZXIgdmVyc2lvbnMgb2YgQW5ndWxhciBwcmlvciB0byB2MS40IHJlcXVpcmVkIHRoZSBwcm9taXNlIGNvZGUgdG8gYmUgd3JhcHBlZCB1c2luZyBgJHNjb3BlLiRhcHBseSguLi4pYC4gVGhpcyBpcyBub3QgdGhlIGNhc2VcclxuICogYW55bW9yZS4pXHJcbiAqXHJcbiAqIEluIGFkZGl0aW9uIHRvIHRoZSBhbmltYXRpb24gcHJvbWlzZSwgd2UgY2FuIGFsc28gbWFrZSB1c2Ugb2YgYW5pbWF0aW9uLXJlbGF0ZWQgY2FsbGJhY2tzIHdpdGhpbiBvdXIgZGlyZWN0aXZlcyBhbmQgY29udHJvbGxlciBjb2RlIGJ5IHJlZ2lzdGVyaW5nXHJcbiAqIGFuIGV2ZW50IGxpc3RlbmVyIHVzaW5nIHRoZSBgJGFuaW1hdGVgIHNlcnZpY2UuIExldCdzIHNheSBmb3IgZXhhbXBsZSB0aGF0IGFuIGFuaW1hdGlvbiB3YXMgdHJpZ2dlcmVkIG9uIG91ciB2aWV3XHJcbiAqIHJvdXRpbmcgY29udHJvbGxlciB0byBob29rIGludG8gdGhhdDpcclxuICpcclxuICogYGBganNcclxuICogbmdNb2R1bGUuY29udHJvbGxlcignSG9tZVBhZ2VDb250cm9sbGVyJywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XHJcbiAqICAgJGFuaW1hdGUub24oJ2VudGVyJywgbmdWaWV3RWxlbWVudCwgZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gKiAgICAgLy8gdGhlIGFuaW1hdGlvbiBmb3IgdGhpcyByb3V0ZSBoYXMgY29tcGxldGVkXHJcbiAqICAgfV0pO1xyXG4gKiB9XSlcclxuICogYGBgXHJcbiAqXHJcbiAqIChOb3RlIHRoYXQgeW91IHdpbGwgbmVlZCB0byB0cmlnZ2VyIGEgZGlnZXN0IHdpdGhpbiB0aGUgY2FsbGJhY2sgdG8gZ2V0IGFuZ3VsYXIgdG8gbm90aWNlIGFueSBzY29wZS1yZWxhdGVkIGNoYW5nZXMuKVxyXG4gKi9cclxuXHJcbnZhciBjb3B5O1xyXG52YXIgZXh0ZW5kO1xyXG52YXIgZm9yRWFjaDtcclxudmFyIGlzQXJyYXk7XHJcbnZhciBpc0RlZmluZWQ7XHJcbnZhciBpc0VsZW1lbnQ7XHJcbnZhciBpc0Z1bmN0aW9uO1xyXG52YXIgaXNPYmplY3Q7XHJcbnZhciBpc1N0cmluZztcclxudmFyIGlzVW5kZWZpbmVkO1xyXG52YXIganFMaXRlO1xyXG52YXIgbm9vcDtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgc2VydmljZVxyXG4gKiBAbmFtZSAkYW5pbWF0ZVxyXG4gKiBAa2luZCBvYmplY3RcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBuZ0FuaW1hdGUgYCRhbmltYXRlYCBzZXJ2aWNlIGRvY3VtZW50YXRpb24gaXMgdGhlIHNhbWUgZm9yIHRoZSBjb3JlIGAkYW5pbWF0ZWAgc2VydmljZS5cclxuICpcclxuICogQ2xpY2sgaGVyZSB7QGxpbmsgbmcuJGFuaW1hdGUgdG8gbGVhcm4gbW9yZSBhYm91dCBhbmltYXRpb25zIHdpdGggYCRhbmltYXRlYH0uXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnbmdBbmltYXRlJywgW10sIGZ1bmN0aW9uIGluaXRBbmd1bGFySGVscGVycygpIHtcclxuICAvLyBBY2Nlc3MgaGVscGVycyBmcm9tIGFuZ3VsYXIgY29yZS5cclxuICAvLyBEbyBpdCBpbnNpZGUgYSBgY29uZmlnYCBibG9jayB0byBlbnN1cmUgYHdpbmRvdy5hbmd1bGFyYCBpcyBhdmFpbGFibGUuXHJcbiAgbm9vcCAgICAgICAgPSBhbmd1bGFyLm5vb3A7XHJcbiAgY29weSAgICAgICAgPSBhbmd1bGFyLmNvcHk7XHJcbiAgZXh0ZW5kICAgICAgPSBhbmd1bGFyLmV4dGVuZDtcclxuICBqcUxpdGUgICAgICA9IGFuZ3VsYXIuZWxlbWVudDtcclxuICBmb3JFYWNoICAgICA9IGFuZ3VsYXIuZm9yRWFjaDtcclxuICBpc0FycmF5ICAgICA9IGFuZ3VsYXIuaXNBcnJheTtcclxuICBpc1N0cmluZyAgICA9IGFuZ3VsYXIuaXNTdHJpbmc7XHJcbiAgaXNPYmplY3QgICAgPSBhbmd1bGFyLmlzT2JqZWN0O1xyXG4gIGlzVW5kZWZpbmVkID0gYW5ndWxhci5pc1VuZGVmaW5lZDtcclxuICBpc0RlZmluZWQgICA9IGFuZ3VsYXIuaXNEZWZpbmVkO1xyXG4gIGlzRnVuY3Rpb24gID0gYW5ndWxhci5pc0Z1bmN0aW9uO1xyXG4gIGlzRWxlbWVudCAgID0gYW5ndWxhci5pc0VsZW1lbnQ7XHJcbn0pXHJcbiAgLmRpcmVjdGl2ZSgnbmdBbmltYXRlU3dhcCcsIG5nQW5pbWF0ZVN3YXBEaXJlY3RpdmUpXHJcblxyXG4gIC5kaXJlY3RpdmUoJ25nQW5pbWF0ZUNoaWxkcmVuJywgJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUpXHJcbiAgLmZhY3RvcnkoJyQkckFGU2NoZWR1bGVyJywgJCRyQUZTY2hlZHVsZXJGYWN0b3J5KVxyXG5cclxuICAucHJvdmlkZXIoJyQkYW5pbWF0ZVF1ZXVlJywgJCRBbmltYXRlUXVldWVQcm92aWRlcilcclxuICAucHJvdmlkZXIoJyQkYW5pbWF0aW9uJywgJCRBbmltYXRpb25Qcm92aWRlcilcclxuXHJcbiAgLnByb3ZpZGVyKCckYW5pbWF0ZUNzcycsICRBbmltYXRlQ3NzUHJvdmlkZXIpXHJcbiAgLnByb3ZpZGVyKCckJGFuaW1hdGVDc3NEcml2ZXInLCAkJEFuaW1hdGVDc3NEcml2ZXJQcm92aWRlcilcclxuXHJcbiAgLnByb3ZpZGVyKCckJGFuaW1hdGVKcycsICQkQW5pbWF0ZUpzUHJvdmlkZXIpXHJcbiAgLnByb3ZpZGVyKCckJGFuaW1hdGVKc0RyaXZlcicsICQkQW5pbWF0ZUpzRHJpdmVyUHJvdmlkZXIpO1xyXG5cclxuXHJcbn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaUlpd2ljMjkxY21ObGN5STZXeUpoYm1kMWJHRnlMV0Z1YVcxaGRHVXVhbk1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYSEpjYmlBcUlFQnNhV05sYm5ObElFRnVaM1ZzWVhKS1V5QjJNUzQxTGpoY2NseHVJQ29nS0dNcElESXdNVEF0TWpBeE5pQkhiMjluYkdVc0lFbHVZeTRnYUhSMGNEb3ZMMkZ1WjNWc1lYSnFjeTV2Y21kY2NseHVJQ29nVEdsalpXNXpaVG9nVFVsVVhISmNiaUFxTDF4eVhHNG9ablZ1WTNScGIyNG9kMmx1Wkc5M0xDQmhibWQxYkdGeUtTQjdKM1Z6WlNCemRISnBZM1FuTzF4eVhHNWNjbHh1ZG1GeUlFVk1SVTFGVGxSZlRrOUVSU0E5SURFN1hISmNiblpoY2lCRFQwMU5SVTVVWDA1UFJFVWdQU0E0TzF4eVhHNWNjbHh1ZG1GeUlFRkVSRjlEVEVGVFUxOVRWVVpHU1ZnZ1BTQW5MV0ZrWkNjN1hISmNiblpoY2lCU1JVMVBWa1ZmUTB4QlUxTmZVMVZHUmtsWUlEMGdKeTF5WlcxdmRtVW5PMXh5WEc1MllYSWdSVlpGVGxSZlEweEJVMU5mVUZKRlJrbFlJRDBnSjI1bkxTYzdYSEpjYm5aaGNpQkJRMVJKVmtWZlEweEJVMU5mVTFWR1JrbFlJRDBnSnkxaFkzUnBkbVVuTzF4eVhHNTJZWElnVUZKRlVFRlNSVjlEVEVGVFUxOVRWVVpHU1ZnZ1BTQW5MWEJ5WlhCaGNtVW5PMXh5WEc1Y2NseHVkbUZ5SUU1SFgwRk9TVTFCVkVWZlEweEJVMU5PUVUxRklEMGdKMjVuTFdGdWFXMWhkR1VuTzF4eVhHNTJZWElnVGtkZlFVNUpUVUZVUlY5RFNFbE1SRkpGVGw5RVFWUkJJRDBnSnlRa2JtZEJibWx0WVhSbFEyaHBiR1J5Wlc0bk8xeHlYRzVjY2x4dUx5OGdSR1YwWldOMElIQnliM0JsY2lCMGNtRnVjMmwwYVc5dVpXNWtMMkZ1YVcxaGRHbHZibVZ1WkNCbGRtVnVkQ0J1WVcxbGN5NWNjbHh1ZG1GeUlFTlRVMTlRVWtWR1NWZ2dQU0FuSnl3Z1ZGSkJUbE5KVkVsUFRsOVFVazlRTENCVVVrRk9VMGxVU1U5T1JVNUVYMFZXUlU1VUxDQkJUa2xOUVZSSlQwNWZVRkpQVUN3Z1FVNUpUVUZVU1U5T1JVNUVYMFZXUlU1VU8xeHlYRzVjY2x4dUx5OGdTV1lnZFc1d2NtVm1hWGhsWkNCbGRtVnVkSE1nWVhKbElHNXZkQ0J6ZFhCd2IzSjBaV1FnWW5WMElIZGxZbXRwZEMxd2NtVm1hWGhsWkNCaGNtVXNJSFZ6WlNCMGFHVWdiR0YwZEdWeUxseHlYRzR2THlCUGRHaGxjbmRwYzJVc0lHcDFjM1FnZFhObElGY3pReUJ1WVcxbGN5d2dZbkp2ZDNObGNuTWdibTkwSUhOMWNIQnZjblJwYm1jZ2RHaGxiU0JoZENCaGJHd2dkMmxzYkNCcWRYTjBJR2xuYm05eVpTQjBhR1Z0TGx4eVhHNHZMeUJPYjNSbE9pQkRhSEp2YldVZ2FXMXdiR1Z0Wlc1MGN5QmdkMmx1Wkc5M0xtOXVkMlZpYTJsMFlXNXBiV0YwYVc5dVpXNWtZQ0JoYm1RZ1pHOWxjMjRuZENCcGJYQnNaVzFsYm5RZ1lIZHBibVJ2ZHk1dmJtRnVhVzFoZEdsdmJtVnVaR0JjY2x4dUx5OGdZblYwSUdGMElIUm9aU0J6WVcxbElIUnBiV1VnWkdsemNHRjBZMmhsY3lCMGFHVWdZR0Z1YVcxaGRHbHZibVZ1WkdBZ1pYWmxiblFnWVc1a0lHNXZkQ0JnZDJWaWEybDBRVzVwYldGMGFXOXVSVzVrWUM1Y2NseHVMeThnVW1WbmFYTjBaWElnWW05MGFDQmxkbVZ1ZEhNZ2FXNGdZMkZ6WlNCZ2QybHVaRzkzTG05dVlXNXBiV0YwYVc5dVpXNWtZQ0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJR0psWTJGMWMyVWdiMllnZEdoaGRDeGNjbHh1THk4Z1pHOGdkR2hsSUhOaGJXVWdabTl5SUdCMGNtRnVjMmwwYVc5dVpXNWtZQ0JoY3lCVFlXWmhjbWtnYVhNZ2JHbHJaV3g1SUhSdklHVjRhR2xpYVhRZ2MybHRhV3hoY2lCaVpXaGhkbWx2Y2k1Y2NseHVMeThnUVd4emJ5d2dkR2hsSUc5dWJIa2diVzlrWlhKdUlHSnliM2R6WlhJZ2RHaGhkQ0IxYzJWeklIWmxibVJ2Y2lCd2NtVm1hWGhsY3lCbWIzSWdkSEpoYm5OcGRHbHZibk12YTJWNVpuSmhiV1Z6SUdseklIZGxZbXRwZEZ4eVhHNHZMeUIwYUdWeVpXWnZjbVVnZEdobGNtVWdhWE1nYm04Z2NtVmhjMjl1SUhSdklIUmxjM1FnWVc1NWJXOXlaU0JtYjNJZ2IzUm9aWElnZG1WdVpHOXlJSEJ5WldacGVHVnpPbHh5WEc0dkx5Qm9kSFJ3T2k4dlkyRnVhWFZ6WlM1amIyMHZJM05sWVhKamFEMTBjbUZ1YzJsMGFXOXVYSEpjYm1sbUlDZ29kMmx1Wkc5M0xtOXVkSEpoYm5OcGRHbHZibVZ1WkNBOVBUMGdkbTlwWkNBd0tTQW1KaUFvZDJsdVpHOTNMbTl1ZDJWaWEybDBkSEpoYm5OcGRHbHZibVZ1WkNBaFBUMGdkbTlwWkNBd0tTa2dlMXh5WEc0Z0lFTlRVMTlRVWtWR1NWZ2dQU0FuTFhkbFltdHBkQzBuTzF4eVhHNGdJRlJTUVU1VFNWUkpUMDVmVUZKUFVDQTlJQ2RYWldKcmFYUlVjbUZ1YzJsMGFXOXVKenRjY2x4dUlDQlVVa0ZPVTBsVVNVOU9SVTVFWDBWV1JVNVVJRDBnSjNkbFltdHBkRlJ5WVc1emFYUnBiMjVGYm1RZ2RISmhibk5wZEdsdmJtVnVaQ2M3WEhKY2JuMGdaV3h6WlNCN1hISmNiaUFnVkZKQlRsTkpWRWxQVGw5UVVrOVFJRDBnSjNSeVlXNXphWFJwYjI0bk8xeHlYRzRnSUZSU1FVNVRTVlJKVDA1RlRrUmZSVlpGVGxRZ1BTQW5kSEpoYm5OcGRHbHZibVZ1WkNjN1hISmNibjFjY2x4dVhISmNibWxtSUNnb2QybHVaRzkzTG05dVlXNXBiV0YwYVc5dVpXNWtJRDA5UFNCMmIybGtJREFwSUNZbUlDaDNhVzVrYjNjdWIyNTNaV0pyYVhSaGJtbHRZWFJwYjI1bGJtUWdJVDA5SUhadmFXUWdNQ2twSUh0Y2NseHVJQ0JEVTFOZlVGSkZSa2xZSUQwZ0p5MTNaV0pyYVhRdEp6dGNjbHh1SUNCQlRrbE5RVlJKVDA1ZlVGSlBVQ0E5SUNkWFpXSnJhWFJCYm1sdFlYUnBiMjRuTzF4eVhHNGdJRUZPU1UxQlZFbFBUa1ZPUkY5RlZrVk9WQ0E5SUNkM1pXSnJhWFJCYm1sdFlYUnBiMjVGYm1RZ1lXNXBiV0YwYVc5dVpXNWtKenRjY2x4dWZTQmxiSE5sSUh0Y2NseHVJQ0JCVGtsTlFWUkpUMDVmVUZKUFVDQTlJQ2RoYm1sdFlYUnBiMjRuTzF4eVhHNGdJRUZPU1UxQlZFbFBUa1ZPUkY5RlZrVk9WQ0E5SUNkaGJtbHRZWFJwYjI1bGJtUW5PMXh5WEc1OVhISmNibHh5WEc1MllYSWdSRlZTUVZSSlQwNWZTMFZaSUQwZ0owUjFjbUYwYVc5dUp6dGNjbHh1ZG1GeUlGQlNUMUJGVWxSWlgwdEZXU0E5SUNkUWNtOXdaWEowZVNjN1hISmNiblpoY2lCRVJVeEJXVjlMUlZrZ1BTQW5SR1ZzWVhrbk8xeHlYRzUyWVhJZ1ZFbE5TVTVIWDB0RldTQTlJQ2RVYVcxcGJtZEdkVzVqZEdsdmJpYzdYSEpjYm5aaGNpQkJUa2xOUVZSSlQwNWZTVlJGVWtGVVNVOU9YME5QVlU1VVgwdEZXU0E5SUNkSmRHVnlZWFJwYjI1RGIzVnVkQ2M3WEhKY2JuWmhjaUJCVGtsTlFWUkpUMDVmVUV4QldWTlVRVlJGWDB0RldTQTlJQ2RRYkdGNVUzUmhkR1VuTzF4eVhHNTJZWElnVTBGR1JWOUdRVk5VWDBaUFVsZEJVa1JmUkZWU1FWUkpUMDVmVmtGTVZVVWdQU0E1T1RrNU8xeHlYRzVjY2x4dWRtRnlJRUZPU1UxQlZFbFBUbDlFUlV4QldWOVFVazlRSUQwZ1FVNUpUVUZVU1U5T1gxQlNUMUFnS3lCRVJVeEJXVjlMUlZrN1hISmNiblpoY2lCQlRrbE5RVlJKVDA1ZlJGVlNRVlJKVDA1ZlVGSlBVQ0E5SUVGT1NVMUJWRWxQVGw5UVVrOVFJQ3NnUkZWU1FWUkpUMDVmUzBWWk8xeHlYRzUyWVhJZ1ZGSkJUbE5KVkVsUFRsOUVSVXhCV1Y5UVVrOVFJRDBnVkZKQlRsTkpWRWxQVGw5UVVrOVFJQ3NnUkVWTVFWbGZTMFZaTzF4eVhHNTJZWElnVkZKQlRsTkpWRWxQVGw5RVZWSkJWRWxQVGw5UVVrOVFJRDBnVkZKQlRsTkpWRWxQVGw5UVVrOVFJQ3NnUkZWU1FWUkpUMDVmUzBWWk8xeHlYRzVjY2x4dWRtRnlJRzVuVFdsdVJYSnlJRDBnWVc1bmRXeGhjaTRrSkcxcGJrVnljaWduYm1jbktUdGNjbHh1Wm5WdVkzUnBiMjRnWVhOelpYSjBRWEpuS0dGeVp5d2dibUZ0WlN3Z2NtVmhjMjl1S1NCN1hISmNiaUFnYVdZZ0tDRmhjbWNwSUh0Y2NseHVJQ0FnSUhSb2NtOTNJRzVuVFdsdVJYSnlLQ2RoY21WeEp5d2dYQ0pCY21kMWJXVnVkQ0FuZXpCOUp5QnBjeUI3TVgxY0lpd2dLRzVoYldVZ2ZId2dKejhuS1N3Z0tISmxZWE52YmlCOGZDQmNJbkpsY1hWcGNtVmtYQ0lwS1R0Y2NseHVJQ0I5WEhKY2JpQWdjbVYwZFhKdUlHRnlaenRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z2JXVnlaMlZEYkdGemMyVnpLR0VzWWlrZ2UxeHlYRzRnSUdsbUlDZ2hZU0FtSmlBaFlpa2djbVYwZFhKdUlDY25PMXh5WEc0Z0lHbG1JQ2doWVNrZ2NtVjBkWEp1SUdJN1hISmNiaUFnYVdZZ0tDRmlLU0J5WlhSMWNtNGdZVHRjY2x4dUlDQnBaaUFvYVhOQmNuSmhlU2hoS1NrZ1lTQTlJR0V1YW05cGJpZ25JQ2NwTzF4eVhHNGdJR2xtSUNocGMwRnljbUY1S0dJcEtTQmlJRDBnWWk1cWIybHVLQ2NnSnlrN1hISmNiaUFnY21WMGRYSnVJR0VnS3lBbklDY2dLeUJpTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQndZV05yWVdkbFUzUjViR1Z6S0c5d2RHbHZibk1wSUh0Y2NseHVJQ0IyWVhJZ2MzUjViR1Z6SUQwZ2UzMDdYSEpjYmlBZ2FXWWdLRzl3ZEdsdmJuTWdKaVlnS0c5d2RHbHZibk11ZEc4Z2ZId2diM0IwYVc5dWN5NW1jbTl0S1NrZ2UxeHlYRzRnSUNBZ2MzUjViR1Z6TG5SdklEMGdiM0IwYVc5dWN5NTBienRjY2x4dUlDQWdJSE4wZVd4bGN5NW1jbTl0SUQwZ2IzQjBhVzl1Y3k1bWNtOXRPMXh5WEc0Z0lIMWNjbHh1SUNCeVpYUjFjbTRnYzNSNWJHVnpPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCd1pXNWtRMnhoYzNObGN5aGpiR0Z6YzJWekxDQm1hWGdzSUdselVISmxabWw0S1NCN1hISmNiaUFnZG1GeUlHTnNZWE56VG1GdFpTQTlJQ2NuTzF4eVhHNGdJR05zWVhOelpYTWdQU0JwYzBGeWNtRjVLR05zWVhOelpYTXBYSEpjYmlBZ0lDQWdJRDhnWTJ4aGMzTmxjMXh5WEc0Z0lDQWdJQ0E2SUdOc1lYTnpaWE1nSmlZZ2FYTlRkSEpwYm1jb1kyeGhjM05sY3lrZ0ppWWdZMnhoYzNObGN5NXNaVzVuZEdoY2NseHVJQ0FnSUNBZ0lDQWdJRDhnWTJ4aGMzTmxjeTV6Y0d4cGRDZ3ZYRnh6S3k4cFhISmNiaUFnSUNBZ0lDQWdJQ0E2SUZ0ZE8xeHlYRzRnSUdadmNrVmhZMmdvWTJ4aGMzTmxjeXdnWm5WdVkzUnBiMjRvYTJ4aGMzTXNJR2twSUh0Y2NseHVJQ0FnSUdsbUlDaHJiR0Z6Y3lBbUppQnJiR0Z6Y3k1c1pXNW5kR2dnUGlBd0tTQjdYSEpjYmlBZ0lDQWdJR05zWVhOelRtRnRaU0FyUFNBb2FTQStJREFwSUQ4Z0p5QW5JRG9nSnljN1hISmNiaUFnSUNBZ0lHTnNZWE56VG1GdFpTQXJQU0JwYzFCeVpXWnBlQ0EvSUdacGVDQXJJR3RzWVhOelhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUd0c1lYTnpJQ3NnWm1sNE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgwcE8xeHlYRzRnSUhKbGRIVnliaUJqYkdGemMwNWhiV1U3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlISmxiVzkyWlVaeWIyMUJjbkpoZVNoaGNuSXNJSFpoYkNrZ2UxeHlYRzRnSUhaaGNpQnBibVJsZUNBOUlHRnljaTVwYm1SbGVFOW1LSFpoYkNrN1hISmNiaUFnYVdZZ0tIWmhiQ0ErUFNBd0tTQjdYSEpjYmlBZ0lDQmhjbkl1YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUhOMGNtbHdRMjl0YldWdWRITkdjbTl0Uld4bGJXVnVkQ2hsYkdWdFpXNTBLU0I3WEhKY2JpQWdhV1lnS0dWc1pXMWxiblFnYVc1emRHRnVZMlZ2WmlCcWNVeHBkR1VwSUh0Y2NseHVJQ0FnSUhOM2FYUmphQ0FvWld4bGJXVnVkQzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnWTJGelpTQXdPbHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsYkdWdFpXNTBPMXh5WEc1Y2NseHVJQ0FnSUNBZ1kyRnpaU0F4T2x4eVhHNGdJQ0FnSUNBZ0lDOHZJSFJvWlhKbElHbHpJRzV2SUhCdmFXNTBJRzltSUhOMGNtbHdjR2x1WnlCaGJubDBhR2x1WnlCcFppQjBhR1VnWld4bGJXVnVkRnh5WEc0Z0lDQWdJQ0FnSUM4dklHbHpJSFJvWlNCdmJteDVJR1ZzWlcxbGJuUWdkMmwwYUdsdUlIUm9aU0JxY1V4cGRHVWdkM0poY0hCbGNpNWNjbHh1SUNBZ0lDQWdJQ0F2THlBb2FYUW5jeUJwYlhCdmNuUmhiblFnZEdoaGRDQjNaU0J5WlhSaGFXNGdkR2hsSUdWc1pXMWxiblFnYVc1emRHRnVZMlV1S1Z4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdFpXNTBXekJkTG01dlpHVlVlWEJsSUQwOVBTQkZURVZOUlU1VVgwNVBSRVVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxiR1Z0Wlc1ME8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dVhISmNiaUFnSUNBZ0lHUmxabUYxYkhRNlhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHcHhUR2wwWlNobGVIUnlZV04wUld4bGJXVnVkRTV2WkdVb1pXeGxiV1Z1ZENrcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2FXWWdLR1ZzWlcxbGJuUXVibTlrWlZSNWNHVWdQVDA5SUVWTVJVMUZUbFJmVGs5RVJTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHcHhUR2wwWlNobGJHVnRaVzUwS1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHVjRkSEpoWTNSRmJHVnRaVzUwVG05a1pTaGxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ2FXWWdLQ0ZsYkdWdFpXNTBXekJkS1NCeVpYUjFjbTRnWld4bGJXVnVkRHRjY2x4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1ZzWlcxbGJuUXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUhaaGNpQmxiRzBnUFNCbGJHVnRaVzUwVzJsZE8xeHlYRzRnSUNBZ2FXWWdLR1ZzYlM1dWIyUmxWSGx3WlNBOVBTQkZURVZOUlU1VVgwNVBSRVVwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUdWc2JUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJQ1FrWVdSa1EyeGhjM01vSkNScWNVeHBkR1VzSUdWc1pXMWxiblFzSUdOc1lYTnpUbUZ0WlNrZ2UxeHlYRzRnSUdadmNrVmhZMmdvWld4bGJXVnVkQ3dnWm5WdVkzUnBiMjRvWld4dEtTQjdYSEpjYmlBZ0lDQWtKR3B4VEdsMFpTNWhaR1JEYkdGemN5aGxiRzBzSUdOc1lYTnpUbUZ0WlNrN1hISmNiaUFnZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJQ1FrY21WdGIzWmxRMnhoYzNNb0pDUnFjVXhwZEdVc0lHVnNaVzFsYm5Rc0lHTnNZWE56VG1GdFpTa2dlMXh5WEc0Z0lHWnZja1ZoWTJnb1pXeGxiV1Z1ZEN3Z1puVnVZM1JwYjI0b1pXeHRLU0I3WEhKY2JpQWdJQ0FrSkdweFRHbDBaUzV5WlcxdmRtVkRiR0Z6Y3lobGJHMHNJR05zWVhOelRtRnRaU2s3WEhKY2JpQWdmU2s3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHRndjR3g1UVc1cGJXRjBhVzl1UTJ4aGMzTmxjMFpoWTNSdmNua29KQ1JxY1V4cGRHVXBJSHRjY2x4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVZV1JrUTJ4aGMzTXBJSHRjY2x4dUlDQWdJQ0FnSkNSaFpHUkRiR0Z6Y3lna0pHcHhUR2wwWlN3Z1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3k1aFpHUkRiR0Z6Y3lrN1hISmNiaUFnSUNBZ0lHOXdkR2x2Ym5NdVlXUmtRMnhoYzNNZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWNtVnRiM1psUTJ4aGMzTXBJSHRjY2x4dUlDQWdJQ0FnSkNSeVpXMXZkbVZEYkdGemN5Z2tKR3B4VEdsMFpTd2daV3hsYldWdWRDd2diM0IwYVc5dWN5NXlaVzF2ZG1WRGJHRnpjeWs3WEhKY2JpQWdJQ0FnSUc5d2RHbHZibk11Y21WdGIzWmxRMnhoYzNNZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDA3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlIQnlaWEJoY21WQmJtbHRZWFJwYjI1UGNIUnBiMjV6S0c5d2RHbHZibk1wSUh0Y2NseHVJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNjbHh1SUNCcFppQW9JVzl3ZEdsdmJuTXVKQ1J3Y21Wd1lYSmxaQ2tnZTF4eVhHNGdJQ0FnZG1GeUlHUnZiVTl3WlhKaGRHbHZiaUE5SUc5d2RHbHZibk11Wkc5dFQzQmxjbUYwYVc5dUlIeDhJRzV2YjNBN1hISmNiaUFnSUNCdmNIUnBiMjV6TG1SdmJVOXdaWEpoZEdsdmJpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNCdmNIUnBiMjV6TGlRa1pHOXRUM0JsY21GMGFXOXVSbWx5WldRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNCa2IyMVBjR1Z5WVhScGIyNG9LVHRjY2x4dUlDQWdJQ0FnWkc5dFQzQmxjbUYwYVc5dUlEMGdibTl2Y0R0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCdmNIUnBiMjV6TGlRa2NISmxjR0Z5WldRZ1BTQjBjblZsTzF4eVhHNGdJSDFjY2x4dUlDQnlaWFIxY200Z2IzQjBhVzl1Y3p0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdZWEJ3YkhsQmJtbHRZWFJwYjI1VGRIbHNaWE1vWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWtnZTF4eVhHNGdJR0Z3Y0d4NVFXNXBiV0YwYVc5dVJuSnZiVk4wZVd4bGN5aGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektUdGNjbHh1SUNCaGNIQnNlVUZ1YVcxaGRHbHZibFJ2VTNSNWJHVnpLR1ZzWlcxbGJuUXNJRzl3ZEdsdmJuTXBPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCaGNIQnNlVUZ1YVcxaGRHbHZia1p5YjIxVGRIbHNaWE1vWld4bGJXVnVkQ3dnYjNCMGFXOXVjeWtnZTF4eVhHNGdJR2xtSUNodmNIUnBiMjV6TG1aeWIyMHBJSHRjY2x4dUlDQWdJR1ZzWlcxbGJuUXVZM056S0c5d2RHbHZibk11Wm5KdmJTazdYSEpjYmlBZ0lDQnZjSFJwYjI1ekxtWnliMjBnUFNCdWRXeHNPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWVhCd2JIbEJibWx0WVhScGIyNVViMU4wZVd4bGN5aGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektTQjdYSEpjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVkRzhwSUh0Y2NseHVJQ0FnSUdWc1pXMWxiblF1WTNOektHOXdkR2x2Ym5NdWRHOHBPMXh5WEc0Z0lDQWdiM0IwYVc5dWN5NTBieUE5SUc1MWJHdzdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJ0WlhKblpVRnVhVzFoZEdsdmJrUmxkR0ZwYkhNb1pXeGxiV1Z1ZEN3Z2IyeGtRVzVwYldGMGFXOXVMQ0J1WlhkQmJtbHRZWFJwYjI0cElIdGNjbHh1SUNCMllYSWdkR0Z5WjJWMElEMGdiMnhrUVc1cGJXRjBhVzl1TG05d2RHbHZibk1nZkh3Z2UzMDdYSEpjYmlBZ2RtRnlJRzVsZDA5d2RHbHZibk1nUFNCdVpYZEJibWx0WVhScGIyNHViM0IwYVc5dWN5QjhmQ0I3ZlR0Y2NseHVYSEpjYmlBZ2RtRnlJSFJ2UVdSa0lEMGdLSFJoY21kbGRDNWhaR1JEYkdGemN5QjhmQ0FuSnlrZ0t5QW5JQ2NnS3lBb2JtVjNUM0IwYVc5dWN5NWhaR1JEYkdGemN5QjhmQ0FuSnlrN1hISmNiaUFnZG1GeUlIUnZVbVZ0YjNabElEMGdLSFJoY21kbGRDNXlaVzF2ZG1WRGJHRnpjeUI4ZkNBbkp5a2dLeUFuSUNjZ0t5QW9ibVYzVDNCMGFXOXVjeTV5WlcxdmRtVkRiR0Z6Y3lCOGZDQW5KeWs3WEhKY2JpQWdkbUZ5SUdOc1lYTnpaWE1nUFNCeVpYTnZiSFpsUld4bGJXVnVkRU5zWVhOelpYTW9aV3hsYldWdWRDNWhkSFJ5S0NkamJHRnpjeWNwTENCMGIwRmtaQ3dnZEc5U1pXMXZkbVVwTzF4eVhHNWNjbHh1SUNCcFppQW9ibVYzVDNCMGFXOXVjeTV3Y21Wd1lYSmhkR2x2YmtOc1lYTnpaWE1wSUh0Y2NseHVJQ0FnSUhSaGNtZGxkQzV3Y21Wd1lYSmhkR2x2YmtOc1lYTnpaWE1nUFNCamIyNWpZWFJYYVhSb1UzQmhZMlVvYm1WM1QzQjBhVzl1Y3k1d2NtVndZWEpoZEdsdmJrTnNZWE56WlhNc0lIUmhjbWRsZEM1d2NtVndZWEpoZEdsdmJrTnNZWE56WlhNcE8xeHlYRzRnSUNBZ1pHVnNaWFJsSUc1bGQwOXdkR2x2Ym5NdWNISmxjR0Z5WVhScGIyNURiR0Z6YzJWek8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5OGdibTl2Y0NCcGN5QmlZWE5wWTJGc2JIa2dkMmhsYmlCMGFHVnlaU0JwY3lCdWJ5QmpZV3hzWW1GamF6c2diM1JvWlhKM2FYTmxJSE52YldWMGFHbHVaeUJvWVhNZ1ltVmxiaUJ6WlhSY2NseHVJQ0IyWVhJZ2NtVmhiRVJ2YlU5d1pYSmhkR2x2YmlBOUlIUmhjbWRsZEM1a2IyMVBjR1Z5WVhScGIyNGdJVDA5SUc1dmIzQWdQeUIwWVhKblpYUXVaRzl0VDNCbGNtRjBhVzl1SURvZ2JuVnNiRHRjY2x4dVhISmNiaUFnWlhoMFpXNWtLSFJoY21kbGRDd2dibVYzVDNCMGFXOXVjeWs3WEhKY2JseHlYRzRnSUM4dklGUlBSRThvYldGMGMydHZJRzl5SUhOeVpXVnlZVzExS1RvZ2NISnZjR1Z5SUdacGVDQnBjeUIwYnlCdFlXbHVkR0ZwYmlCaGJHd2dZVzVwYldGMGFXOXVJR05oYkd4aVlXTnJJR2x1SUdGeWNtRjVJR0Z1WkNCallXeHNJR0YwSUd4aGMzUXNZblYwSUc1dmR5QnZibXg1SUd4bFlYWmxJR2hoY3lCMGFHVWdZMkZzYkdKaFkyc2djMjhnYm04Z2FYTnpkV1VnZDJsMGFDQjBhR2x6TGx4eVhHNGdJR2xtSUNoeVpXRnNSRzl0VDNCbGNtRjBhVzl1S1NCN1hISmNiaUFnSUNCMFlYSm5aWFF1Wkc5dFQzQmxjbUYwYVc5dUlEMGdjbVZoYkVSdmJVOXdaWEpoZEdsdmJqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHbG1JQ2hqYkdGemMyVnpMbUZrWkVOc1lYTnpLU0I3WEhKY2JpQWdJQ0IwWVhKblpYUXVZV1JrUTJ4aGMzTWdQU0JqYkdGemMyVnpMbUZrWkVOc1lYTnpPMXh5WEc0Z0lIMGdaV3h6WlNCN1hISmNiaUFnSUNCMFlYSm5aWFF1WVdSa1EyeGhjM01nUFNCdWRXeHNPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdhV1lnS0dOc1lYTnpaWE11Y21WdGIzWmxRMnhoYzNNcElIdGNjbHh1SUNBZ0lIUmhjbWRsZEM1eVpXMXZkbVZEYkdGemN5QTlJR05zWVhOelpYTXVjbVZ0YjNabFEyeGhjM003WEhKY2JpQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lIUmhjbWRsZEM1eVpXMXZkbVZEYkdGemN5QTlJRzUxYkd3N1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCdmJHUkJibWx0WVhScGIyNHVZV1JrUTJ4aGMzTWdQU0IwWVhKblpYUXVZV1JrUTJ4aGMzTTdYSEpjYmlBZ2IyeGtRVzVwYldGMGFXOXVMbkpsYlc5MlpVTnNZWE56SUQwZ2RHRnlaMlYwTG5KbGJXOTJaVU5zWVhOek8xeHlYRzVjY2x4dUlDQnlaWFIxY200Z2RHRnlaMlYwTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnlaWE52YkhabFJXeGxiV1Z1ZEVOc1lYTnpaWE1vWlhocGMzUnBibWNzSUhSdlFXUmtMQ0IwYjFKbGJXOTJaU2tnZTF4eVhHNGdJSFpoY2lCQlJFUmZRMHhCVTFNZ1BTQXhPMXh5WEc0Z0lIWmhjaUJTUlUxUFZrVmZRMHhCVTFNZ1BTQXRNVHRjY2x4dVhISmNiaUFnZG1GeUlHWnNZV2R6SUQwZ2UzMDdYSEpjYmlBZ1pYaHBjM1JwYm1jZ1BTQnpjR3hwZEVOc1lYTnpaWE5VYjB4dmIydDFjQ2hsZUdsemRHbHVaeWs3WEhKY2JseHlYRzRnSUhSdlFXUmtJRDBnYzNCc2FYUkRiR0Z6YzJWelZHOU1iMjlyZFhBb2RHOUJaR1FwTzF4eVhHNGdJR1p2Y2tWaFkyZ29kRzlCWkdRc0lHWjFibU4wYVc5dUtIWmhiSFZsTENCclpYa3BJSHRjY2x4dUlDQWdJR1pzWVdkelcydGxlVjBnUFNCQlJFUmZRMHhCVTFNN1hISmNiaUFnZlNrN1hISmNibHh5WEc0Z0lIUnZVbVZ0YjNabElEMGdjM0JzYVhSRGJHRnpjMlZ6Vkc5TWIyOXJkWEFvZEc5U1pXMXZkbVVwTzF4eVhHNGdJR1p2Y2tWaFkyZ29kRzlTWlcxdmRtVXNJR1oxYm1OMGFXOXVLSFpoYkhWbExDQnJaWGtwSUh0Y2NseHVJQ0FnSUdac1lXZHpXMnRsZVYwZ1BTQm1iR0ZuYzF0clpYbGRJRDA5UFNCQlJFUmZRMHhCVTFNZ1B5QnVkV3hzSURvZ1VrVk5UMVpGWDBOTVFWTlRPMXh5WEc0Z0lIMHBPMXh5WEc1Y2NseHVJQ0IyWVhJZ1kyeGhjM05sY3lBOUlIdGNjbHh1SUNBZ0lHRmtaRU5zWVhOek9pQW5KeXhjY2x4dUlDQWdJSEpsYlc5MlpVTnNZWE56T2lBbkoxeHlYRzRnSUgwN1hISmNibHh5WEc0Z0lHWnZja1ZoWTJnb1pteGhaM01zSUdaMWJtTjBhVzl1S0haaGJDd2dhMnhoYzNNcElIdGNjbHh1SUNBZ0lIWmhjaUJ3Y205d0xDQmhiR3h2ZHp0Y2NseHVJQ0FnSUdsbUlDaDJZV3dnUFQwOUlFRkVSRjlEVEVGVFV5a2dlMXh5WEc0Z0lDQWdJQ0J3Y205d0lEMGdKMkZrWkVOc1lYTnpKenRjY2x4dUlDQWdJQ0FnWVd4c2IzY2dQU0FoWlhocGMzUnBibWRiYTJ4aGMzTmRJSHg4SUdWNGFYTjBhVzVuVzJ0c1lYTnpJQ3NnVWtWTlQxWkZYME5NUVZOVFgxTlZSa1pKV0YwN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1VrVk5UMVpGWDBOTVFWTlRLU0I3WEhKY2JpQWdJQ0FnSUhCeWIzQWdQU0FuY21WdGIzWmxRMnhoYzNNbk8xeHlYRzRnSUNBZ0lDQmhiR3h2ZHlBOUlHVjRhWE4wYVc1blcydHNZWE56WFNCOGZDQmxlR2x6ZEdsdVoxdHJiR0Z6Y3lBcklFRkVSRjlEVEVGVFUxOVRWVVpHU1ZoZE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLR0ZzYkc5M0tTQjdYSEpjYmlBZ0lDQWdJR2xtSUNoamJHRnpjMlZ6VzNCeWIzQmRMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOc1lYTnpaWE5iY0hKdmNGMGdLejBnSnlBbk8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJR05zWVhOelpYTmJjSEp2Y0YwZ0t6MGdhMnhoYzNNN1hISmNiaUFnSUNCOVhISmNiaUFnZlNrN1hISmNibHh5WEc0Z0lHWjFibU4wYVc5dUlITndiR2wwUTJ4aGMzTmxjMVJ2VEc5dmEzVndLR05zWVhOelpYTXBJSHRjY2x4dUlDQWdJR2xtSUNocGMxTjBjbWx1WnloamJHRnpjMlZ6S1NrZ2UxeHlYRzRnSUNBZ0lDQmpiR0Z6YzJWeklEMGdZMnhoYzNObGN5NXpjR3hwZENnbklDY3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQnZZbW9nUFNCN2ZUdGNjbHh1SUNBZ0lHWnZja1ZoWTJnb1kyeGhjM05sY3l3Z1puVnVZM1JwYjI0b2EyeGhjM01wSUh0Y2NseHVJQ0FnSUNBZ0x5OGdjMjl0WlhScGJXVnpJSFJvWlNCemNHeHBkQ0JzWldGMlpYTWdaVzF3ZEhrZ2MzUnlhVzVuSUhaaGJIVmxjMXh5WEc0Z0lDQWdJQ0F2THlCcGJtTmhjMlVnWlhoMGNtRWdjM0JoWTJWeklIZGxjbVVnWVhCd2JHbGxaQ0IwYnlCMGFHVWdiM0IwYVc5dWMxeHlYRzRnSUNBZ0lDQnBaaUFvYTJ4aGMzTXViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYjJKcVcydHNZWE56WFNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUc5aWFqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lISmxkSFZ5YmlCamJHRnpjMlZ6TzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQm5aWFJFYjIxT2IyUmxLR1ZzWlcxbGJuUXBJSHRjY2x4dUlDQnlaWFIxY200Z0tHVnNaVzFsYm5RZ2FXNXpkR0Z1WTJWdlppQnFjVXhwZEdVcElEOGdaV3hsYldWdWRGc3dYU0E2SUdWc1pXMWxiblE3WEhKY2JuMWNjbHh1WEhKY2JtWjFibU4wYVc5dUlHRndjR3g1UjJWdVpYSmhkR1ZrVUhKbGNHRnlZWFJwYjI1RGJHRnpjMlZ6S0dWc1pXMWxiblFzSUdWMlpXNTBMQ0J2Y0hScGIyNXpLU0I3WEhKY2JpQWdkbUZ5SUdOc1lYTnpaWE1nUFNBbkp6dGNjbHh1SUNCcFppQW9aWFpsYm5RcElIdGNjbHh1SUNBZ0lHTnNZWE56WlhNZ1BTQndaVzVrUTJ4aGMzTmxjeWhsZG1WdWRDd2dSVlpGVGxSZlEweEJVMU5mVUZKRlJrbFlMQ0IwY25WbEtUdGNjbHh1SUNCOVhISmNiaUFnYVdZZ0tHOXdkR2x2Ym5NdVlXUmtRMnhoYzNNcElIdGNjbHh1SUNBZ0lHTnNZWE56WlhNZ1BTQmpiMjVqWVhSWGFYUm9VM0JoWTJVb1kyeGhjM05sY3l3Z2NHVnVaRU5zWVhOelpYTW9iM0IwYVc5dWN5NWhaR1JEYkdGemN5d2dRVVJFWDBOTVFWTlRYMU5WUmtaSldDa3BPMXh5WEc0Z0lIMWNjbHh1SUNCcFppQW9iM0IwYVc5dWN5NXlaVzF2ZG1WRGJHRnpjeWtnZTF4eVhHNGdJQ0FnWTJ4aGMzTmxjeUE5SUdOdmJtTmhkRmRwZEdoVGNHRmpaU2hqYkdGemMyVnpMQ0J3Wlc1a1EyeGhjM05sY3lodmNIUnBiMjV6TG5KbGJXOTJaVU5zWVhOekxDQlNSVTFQVmtWZlEweEJVMU5mVTFWR1JrbFlLU2s3WEhKY2JpQWdmVnh5WEc0Z0lHbG1JQ2hqYkdGemMyVnpMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdiM0IwYVc5dWN5NXdjbVZ3WVhKaGRHbHZia05zWVhOelpYTWdQU0JqYkdGemMyVnpPMXh5WEc0Z0lDQWdaV3hsYldWdWRDNWhaR1JEYkdGemN5aGpiR0Z6YzJWektUdGNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR05zWldGeVIyVnVaWEpoZEdWa1EyeGhjM05sY3lobGJHVnRaVzUwTENCdmNIUnBiMjV6S1NCN1hISmNiaUFnYVdZZ0tHOXdkR2x2Ym5NdWNISmxjR0Z5WVhScGIyNURiR0Z6YzJWektTQjdYSEpjYmlBZ0lDQmxiR1Z0Wlc1MExuSmxiVzkyWlVOc1lYTnpLRzl3ZEdsdmJuTXVjSEpsY0dGeVlYUnBiMjVEYkdGemMyVnpLVHRjY2x4dUlDQWdJRzl3ZEdsdmJuTXVjSEpsY0dGeVlYUnBiMjVEYkdGemMyVnpJRDBnYm5Wc2JEdGNjbHh1SUNCOVhISmNiaUFnYVdZZ0tHOXdkR2x2Ym5NdVlXTjBhWFpsUTJ4aGMzTmxjeWtnZTF4eVhHNGdJQ0FnWld4bGJXVnVkQzV5WlcxdmRtVkRiR0Z6Y3lodmNIUnBiMjV6TG1GamRHbDJaVU5zWVhOelpYTXBPMXh5WEc0Z0lDQWdiM0IwYVc5dWN5NWhZM1JwZG1WRGJHRnpjMlZ6SUQwZ2JuVnNiRHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdKc2IyTnJWSEpoYm5OcGRHbHZibk1vYm05a1pTd2daSFZ5WVhScGIyNHBJSHRjY2x4dUlDQXZMeUIzWlNCMWMyVWdZU0J1WldkaGRHbDJaU0JrWld4aGVTQjJZV3gxWlNCemFXNWpaU0JwZENCd1pYSm1iM0p0Y3lCaWJHOWphMmx1WjF4eVhHNGdJQzh2SUhsbGRDQnBkQ0JrYjJWemJpZDBJR3RwYkd3Z1lXNTVJR1Y0YVhOMGFXNW5JSFJ5WVc1emFYUnBiMjV6SUhKMWJtNXBibWNnYjI0Z2RHaGxYSEpjYmlBZ0x5OGdjMkZ0WlNCbGJHVnRaVzUwSUhkb2FXTm9JRzFoYTJWeklIUm9hWE1nYzJGbVpTQm1iM0lnWTJ4aGMzTXRZbUZ6WldRZ1lXNXBiV0YwYVc5dWMxeHlYRzRnSUhaaGNpQjJZV3gxWlNBOUlHUjFjbUYwYVc5dUlEOGdKeTBuSUNzZ1pIVnlZWFJwYjI0Z0t5QW5jeWNnT2lBbkp6dGNjbHh1SUNCaGNIQnNlVWx1YkdsdVpWTjBlV3hsS0c1dlpHVXNJRnRVVWtGT1UwbFVTVTlPWDBSRlRFRlpYMUJTVDFBc0lIWmhiSFZsWFNrN1hISmNiaUFnY21WMGRYSnVJRnRVVWtGT1UwbFVTVTlPWDBSRlRFRlpYMUJTVDFBc0lIWmhiSFZsWFR0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdZbXh2WTJ0TFpYbG1jbUZ0WlVGdWFXMWhkR2x2Ym5Nb2JtOWtaU3dnWVhCd2JIbENiRzlqYXlrZ2UxeHlYRzRnSUhaaGNpQjJZV3gxWlNBOUlHRndjR3g1UW14dlkyc2dQeUFuY0dGMWMyVmtKeUE2SUNjbk8xeHlYRzRnSUhaaGNpQnJaWGtnUFNCQlRrbE5RVlJKVDA1ZlVGSlBVQ0FySUVGT1NVMUJWRWxQVGw5UVRFRlpVMVJCVkVWZlMwVlpPMXh5WEc0Z0lHRndjR3g1U1c1c2FXNWxVM1I1YkdVb2JtOWtaU3dnVzJ0bGVTd2dkbUZzZFdWZEtUdGNjbHh1SUNCeVpYUjFjbTRnVzJ0bGVTd2dkbUZzZFdWZE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUJoY0hCc2VVbHViR2x1WlZOMGVXeGxLRzV2WkdVc0lITjBlV3hsVkhWd2JHVXBJSHRjY2x4dUlDQjJZWElnY0hKdmNDQTlJSE4wZVd4bFZIVndiR1ZiTUYwN1hISmNiaUFnZG1GeUlIWmhiSFZsSUQwZ2MzUjViR1ZVZFhCc1pWc3hYVHRjY2x4dUlDQnViMlJsTG5OMGVXeGxXM0J5YjNCZElEMGdkbUZzZFdVN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR052Ym1OaGRGZHBkR2hUY0dGalpTaGhMR0lwSUh0Y2NseHVJQ0JwWmlBb0lXRXBJSEpsZEhWeWJpQmlPMXh5WEc0Z0lHbG1JQ2doWWlrZ2NtVjBkWEp1SUdFN1hISmNiaUFnY21WMGRYSnVJR0VnS3lBbklDY2dLeUJpTzF4eVhHNTlYSEpjYmx4eVhHNTJZWElnSkNSeVFVWlRZMmhsWkhWc1pYSkdZV04wYjNKNUlEMGdXeWNrSkhKQlJpY3NJR1oxYm1OMGFXOXVLQ1FrY2tGR0tTQjdYSEpjYmlBZ2RtRnlJSEYxWlhWbExDQmpZVzVqWld4R2JqdGNjbHh1WEhKY2JpQWdablZ1WTNScGIyNGdjMk5vWldSMWJHVnlLSFJoYzJ0ektTQjdYSEpjYmlBZ0lDQXZMeUIzWlNCdFlXdGxJR0VnWTI5d2VTQnphVzVqWlNCU1FVWlRZMmhsWkhWc1pYSWdiWFYwWVhSbGN5QjBhR1VnYzNSaGRHVmNjbHh1SUNBZ0lDOHZJRzltSUhSb1pTQndZWE56WldRZ2FXNGdZWEp5WVhrZ2RtRnlhV0ZpYkdVZ1lXNWtJSFJvYVhNZ2QyOTFiR1FnWW1VZ1pHbG1abWxqZFd4MFhISmNiaUFnSUNBdkx5QjBieUIwY21GamF5QmtiM2R1SUc5dUlIUm9aU0J2ZFhSemFXUmxJR052WkdWY2NseHVJQ0FnSUhGMVpYVmxJRDBnY1hWbGRXVXVZMjl1WTJGMEtIUmhjMnR6S1R0Y2NseHVJQ0FnSUc1bGVIUlVhV05yS0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCeGRXVjFaU0E5SUhOamFHVmtkV3hsY2k1eGRXVjFaU0E5SUZ0ZE8xeHlYRzVjY2x4dUlDQXZLaUIzWVdsMFZXNTBhV3hSZFdsbGRDQmtiMlZ6SUhSM2J5QjBhR2x1WjNNNlhISmNiaUFnSUNvZ01TNGdTWFFnZDJsc2JDQnlkVzRnZEdobElFWkpUa0ZNSUdCbWJtQWdkbUZzZFdVZ2IyNXNlU0IzYUdWdUlHRnVJSFZ1WTJGdVkyVnNaV1FnVWtGR0lHaGhjeUJ3WVhOelpXUWdkR2h5YjNWbmFGeHlYRzRnSUNBcUlESXVJRWwwSUhkcGJHd2daR1ZzWVhrZ2RHaGxJRzVsZUhRZ2QyRjJaU0J2WmlCMFlYTnJjeUJtY205dElISjFibTVwYm1jZ2RXNTBhV3dnZEdobElIRjFhV1YwSUdCbWJtQWdhR0Z6SUhKMWJpNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlGUm9aU0J0YjNScGRtRjBhVzl1SUdobGNtVWdhWE1nZEdoaGRDQmhibWx0WVhScGIyNGdZMjlrWlNCallXNGdjbVZ4ZFdWemRDQnRiM0psSUhScGJXVWdabkp2YlNCMGFHVWdjMk5vWldSMWJHVnlYSEpjYmlBZ0lDb2dZbVZtYjNKbElIUm9aU0J1WlhoMElIZGhkbVVnY25WdWN5NGdWR2hwY3lCaGJHeHZkM01nWm05eUlHTmxjblJoYVc0Z1JFOU5JSEJ5YjNCbGNuUnBaWE1nYzNWamFDQmhjeUJqYkdGemMyVnpJSFJ2WEhKY2JpQWdJQ29nWW1VZ2NtVnpiMngyWldRZ2FXNGdkR2x0WlNCbWIzSWdkR2hsSUc1bGVIUWdZVzVwYldGMGFXOXVJSFJ2SUhKMWJpNWNjbHh1SUNBZ0tpOWNjbHh1SUNCelkyaGxaSFZzWlhJdWQyRnBkRlZ1ZEdsc1VYVnBaWFFnUFNCbWRXNWpkR2x2YmlobWJpa2dlMXh5WEc0Z0lDQWdhV1lnS0dOaGJtTmxiRVp1S1NCallXNWpaV3hHYmlncE8xeHlYRzVjY2x4dUlDQWdJR05oYm1ObGJFWnVJRDBnSkNSeVFVWW9ablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUdOaGJtTmxiRVp1SUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnWm00b0tUdGNjbHh1SUNBZ0lDQWdibVY0ZEZScFkyc29LVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDA3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJ6WTJobFpIVnNaWEk3WEhKY2JseHlYRzRnSUdaMWJtTjBhVzl1SUc1bGVIUlVhV05yS0NrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0Z4ZFdWMVpTNXNaVzVuZEdncElISmxkSFZ5Ymp0Y2NseHVYSEpjYmlBZ0lDQjJZWElnYVhSbGJYTWdQU0J4ZFdWMVpTNXphR2xtZENncE8xeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnBkR1Z0Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0JwZEdWdGMxdHBYU2dwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doWTJGdVkyVnNSbTRwSUh0Y2NseHVJQ0FnSUNBZ0pDUnlRVVlvWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGallXNWpaV3hHYmlrZ2JtVjRkRlJwWTJzb0tUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1OVhUdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkFibWRrYjJNZ1pHbHlaV04wYVhabFhISmNiaUFxSUVCdVlXMWxJRzVuUVc1cGJXRjBaVU5vYVd4a2NtVnVYSEpjYmlBcUlFQnlaWE4wY21samRDQkJSVnh5WEc0Z0tpQkFaV3hsYldWdWRDQkJUbGxjY2x4dUlDcGNjbHh1SUNvZ1FHUmxjMk55YVhCMGFXOXVYSEpjYmlBcVhISmNiaUFxSUc1blFXNXBiV0YwWlVOb2FXeGtjbVZ1SUdGc2JHOTNjeUI1YjNVZ2RHOGdjM0JsWTJsbWVTQjBhR0YwSUdOb2FXeGtjbVZ1SUc5bUlIUm9hWE1nWld4bGJXVnVkQ0J6YUc5MWJHUWdZVzVwYldGMFpTQmxkbVZ1SUdsbUlHRnVlVnh5WEc0Z0tpQnZaaUIwYUdVZ1kyaHBiR1J5Wlc0bmN5QndZWEpsYm5SeklHRnlaU0JqZFhKeVpXNTBiSGtnWVc1cGJXRjBhVzVuTGlCQ2VTQmtaV1poZFd4MExDQjNhR1Z1SUdGdUlHVnNaVzFsYm5RZ2FHRnpJR0Z1SUdGamRHbDJaU0JnWlc1MFpYSmdMQ0JnYkdWaGRtVmdMQ0J2Y2lCZ2JXOTJaV0JjY2x4dUlDb2dLSE4wY25WamRIVnlZV3dwSUdGdWFXMWhkR2x2Yml3Z1kyaHBiR1FnWld4bGJXVnVkSE1nZEdoaGRDQmhiSE52SUdoaGRtVWdZVzRnWVdOMGFYWmxJSE4wY25WamRIVnlZV3dnWVc1cGJXRjBhVzl1SUdGeVpTQnViM1FnWVc1cGJXRjBaV1F1WEhKY2JpQXFYSEpjYmlBcUlFNXZkR1VnZEdoaGRDQmxkbVZ1SUdsbUlHQnVaMEZ1YVcxMFpVTm9hV3hrY21WdVlDQnBjeUJ6WlhRc0lHNXZJR05vYVd4a0lHRnVhVzFoZEdsdmJuTWdkMmxzYkNCeWRXNGdkMmhsYmlCMGFHVWdjR0Z5Wlc1MElHVnNaVzFsYm5RZ2FYTWdjbVZ0YjNabFpDQm1jbTl0SUhSb1pTQkVUMDBnS0dCc1pXRjJaV0FnWVc1cGJXRjBhVzl1S1M1Y2NseHVJQ3BjY2x4dUlDcGNjbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1blFXNXBiV0YwWlVOb2FXeGtjbVZ1SUVsbUlIUm9aU0IyWVd4MVpTQnBjeUJsYlhCMGVTd2dZSFJ5ZFdWZ0lHOXlJR0J2Ym1Bc1hISmNiaUFxSUNBZ0lDQjBhR1Z1SUdOb2FXeGtJR0Z1YVcxaGRHbHZibk1nWVhKbElHRnNiRzkzWldRdUlFbG1JSFJvWlNCMllXeDFaU0JwY3lCZ1ptRnNjMlZnTENCamFHbHNaQ0JoYm1sdFlYUnBiMjV6SUdGeVpTQnViM1FnWVd4c2IzZGxaQzVjY2x4dUlDcGNjbHh1SUNvZ1FHVjRZVzF3YkdWY2NseHVJQ29nUEdWNFlXMXdiR1VnYlc5a2RXeGxQVndpYm1kQmJtbHRZWFJsUTJocGJHUnlaVzVjSWlCdVlXMWxQVndpYm1kQmJtbHRZWFJsUTJocGJHUnlaVzVjSWlCa1pYQnpQVndpWVc1bmRXeGhjaTFoYm1sdFlYUmxMbXB6WENJZ1lXNXBiV0YwYVc5dWN6MWNJblJ5ZFdWY0lqNWNjbHh1SUNBZ0lDQThabWxzWlNCdVlXMWxQVndpYVc1a1pYZ3VhSFJ0YkZ3aVBseHlYRzRnSUNBZ0lDQWdQR1JwZGlCdVp5MWpiMjUwY205c2JHVnlQVndpYldGcGJrTnZiblJ5YjJ4c1pYSWdZWE1nYldGcGJsd2lQbHh5WEc0Z0lDQWdJQ0FnSUNBOGJHRmlaV3crVTJodmR5QmpiMjUwWVdsdVpYSS9JRHhwYm5CMWRDQjBlWEJsUFZ3aVkyaGxZMnRpYjNoY0lpQnVaeTF0YjJSbGJEMWNJbTFoYVc0dVpXNTBaWEpGYkdWdFpXNTBYQ0lnTHo0OEwyeGhZbVZzUGx4eVhHNGdJQ0FnSUNBZ0lDQThiR0ZpWld3K1FXNXBiV0YwWlNCamFHbHNaSEpsYmo4Z1BHbHVjSFYwSUhSNWNHVTlYQ0pqYUdWamEySnZlRndpSUc1bkxXMXZaR1ZzUFZ3aWJXRnBiaTVoYm1sdFlYUmxRMmhwYkdSeVpXNWNJaUF2UGp3dmJHRmlaV3crWEhKY2JpQWdJQ0FnSUNBZ0lEeG9jajVjY2x4dUlDQWdJQ0FnSUNBZ1BHUnBkaUJ1WnkxaGJtbHRZWFJsTFdOb2FXeGtjbVZ1UFZ3aWUzdHRZV2x1TG1GdWFXMWhkR1ZEYUdsc1pISmxibjE5WENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnUEdScGRpQnVaeTFwWmoxY0ltMWhhVzR1Wlc1MFpYSkZiR1Z0Wlc1MFhDSWdZMnhoYzNNOVhDSmpiMjUwWVdsdVpYSmNJajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJRXhwYzNRZ2IyWWdhWFJsYlhNNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJRzVuTFhKbGNHVmhkRDFjSW1sMFpXMGdhVzRnV3pBc0lERXNJRElzSUROZFhDSWdZMnhoYzNNOVhDSnBkR1Z0WENJK1NYUmxiU0I3ZTJsMFpXMTlmVHd2WkdsMlBseHlYRzRnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJRHd2Wm1sc1pUNWNjbHh1SUNBZ0lDQThabWxzWlNCdVlXMWxQVndpWVc1cGJXRjBhVzl1Y3k1amMzTmNJajVjY2x4dVhISmNiaUFnSUNBZ0lDNWpiMjUwWVdsdVpYSXVibWN0Wlc1MFpYSXNYSEpjYmlBZ0lDQWdJQzVqYjI1MFlXbHVaWEl1Ym1jdGJHVmhkbVVnZTF4eVhHNGdJQ0FnSUNBZ0lIUnlZVzV6YVhScGIyNDZJR0ZzYkNCbFlYTmxJREV1TlhNN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUM1amIyNTBZV2x1WlhJdWJtY3RaVzUwWlhJc1hISmNiaUFnSUNBZ0lDNWpiMjUwWVdsdVpYSXVibWN0YkdWaGRtVXRZV04wYVhabElIdGNjbHh1SUNBZ0lDQWdJQ0J2Y0dGamFYUjVPaUF3TzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0F1WTI5dWRHRnBibVZ5TG01bkxXeGxZWFpsTEZ4eVhHNGdJQ0FnSUNBdVkyOXVkR0ZwYm1WeUxtNW5MV1Z1ZEdWeUxXRmpkR2wyWlNCN1hISmNiaUFnSUNBZ0lDQWdiM0JoWTJsMGVUb2dNVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdMbWwwWlcwZ2UxeHlYRzRnSUNBZ0lDQWdJR0poWTJ0bmNtOTFibVE2SUdacGNtVmljbWxqYXp0Y2NseHVJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0kwWkdSanRjY2x4dUlDQWdJQ0FnSUNCdFlYSm5hVzR0WW05MGRHOXRPaUF4TUhCNE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBdWFYUmxiUzV1WnkxbGJuUmxjaXhjY2x4dUlDQWdJQ0FnTG1sMFpXMHVibWN0YkdWaGRtVWdlMXh5WEc0Z0lDQWdJQ0FnSUhSeVlXNXphWFJwYjI0NklIUnlZVzV6Wm05eWJTQXhMalZ6SUdWaGMyVTdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDNXBkR1Z0TG01bkxXVnVkR1Z5SUh0Y2NseHVJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaVmdvTlRCd2VDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDNXBkR1Z0TG01bkxXVnVkR1Z5TFdGamRHbDJaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVllLREFwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBOEwyWnBiR1UrWEhKY2JpQWdJQ0E4Wm1sc1pTQnVZVzFsUFZ3aWMyTnlhWEIwTG1welhDSStYSEpjYmlBZ0lDQWdJR0Z1WjNWc1lYSXViVzlrZFd4bEtDZHVaMEZ1YVcxaGRHVkRhR2xzWkhKbGJpY3NJRnNuYm1kQmJtbHRZWFJsSjEwcFhISmNiaUFnSUNBZ0lDQWdMbU52Ym5SeWIyeHNaWElvSjIxaGFXNURiMjUwY205c2JHVnlKeXdnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtRnVhVzFoZEdWRGFHbHNaSEpsYmlBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJuUmxja1ZzWlcxbGJuUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUR3dlptbHNaVDVjY2x4dUlDQThMMlY0WVcxd2JHVStYSEpjYmlBcUwxeHlYRzUyWVhJZ0pDUkJibWx0WVhSbFEyaHBiR1J5Wlc1RWFYSmxZM1JwZG1VZ1BTQmJKeVJwYm5SbGNuQnZiR0YwWlNjc0lHWjFibU4wYVc5dUtDUnBiblJsY25CdmJHRjBaU2tnZTF4eVhHNGdJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQnNhVzVyT2lCbWRXNWpkR2x2YmloelkyOXdaU3dnWld4bGJXVnVkQ3dnWVhSMGNuTXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlIWmhiQ0E5SUdGMGRISnpMbTVuUVc1cGJXRjBaVU5vYVd4a2NtVnVPMXh5WEc0Z0lDQWdJQ0JwWmlBb2FYTlRkSEpwYm1jb2RtRnNLU0FtSmlCMllXd3ViR1Z1WjNSb0lEMDlQU0F3S1NCN0lDOHZaVzF3ZEhrZ1lYUjBjbWxpZFhSbFhISmNiaUFnSUNBZ0lDQWdaV3hsYldWdWRDNWtZWFJoS0U1SFgwRk9TVTFCVkVWZlEwaEpURVJTUlU1ZlJFRlVRU3dnZEhKMVpTazdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1NXNTBaWEp3YjJ4aGRHVWdZVzVrSUhObGRDQjBhR1VnZG1Gc2RXVXNJSE52SUhSb1lYUWdhWFFnYVhNZ1lYWmhhV3hoWW14bElIUnZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1lXNXBiV0YwYVc5dWN5QjBhR0YwSUhKMWJpQnlhV2RvZENCaFpuUmxjaUJqYjIxd2FXeGhkR2x2Ymx4eVhHNGdJQ0FnSUNBZ0lITmxkRVJoZEdFb0pHbHVkR1Z5Y0c5c1lYUmxLSFpoYkNrb2MyTnZjR1VwS1R0Y2NseHVJQ0FnSUNBZ0lDQmhkSFJ5Y3k0a2IySnpaWEoyWlNnbmJtZEJibWx0WVhSbFEyaHBiR1J5Wlc0bkxDQnpaWFJFWVhSaEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z2MyVjBSR0YwWVNoMllXeDFaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2RtRnNkV1VnUFQwOUlDZHZiaWNnZkh3Z2RtRnNkV1VnUFQwOUlDZDBjblZsSnp0Y2NseHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtUmhkR0VvVGtkZlFVNUpUVUZVUlY5RFNFbE1SRkpGVGw5RVFWUkJMQ0IyWVd4MVpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQjlPMXh5WEc1OVhUdGNjbHh1WEhKY2JuWmhjaUJCVGtsTlFWUkZYMVJKVFVWU1gwdEZXU0E5SUNja0pHRnVhVzFoZEdWRGMzTW5PMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUJ1WjJSdll5QnpaWEoyYVdObFhISmNiaUFxSUVCdVlXMWxJQ1JoYm1sdFlYUmxRM056WEhKY2JpQXFJRUJyYVc1a0lHOWlhbVZqZEZ4eVhHNGdLbHh5WEc0Z0tpQkFaR1Z6WTNKcGNIUnBiMjVjY2x4dUlDb2dWR2hsSUdBa1lXNXBiV0YwWlVOemMyQWdjMlZ5ZG1salpTQnBjeUJoSUhWelpXWjFiQ0IxZEdsc2FYUjVJSFJ2SUhSeWFXZG5aWElnWTNWemRHOXRhWHBsWkNCRFUxTXRZbUZ6WldRZ2RISmhibk5wZEdsdmJuTXZhMlY1Wm5KaGJXVnpYSEpjYmlBcUlHWnliMjBnWVNCS1lYWmhVMk55YVhCMExXSmhjMlZrSUdGdWFXMWhkR2x2YmlCdmNpQmthWEpsWTNSc2VTQm1jbTl0SUdFZ1pHbHlaV04wYVhabExpQlVhR1VnY0hWeWNHOXpaU0J2WmlCZ0pHRnVhVzFoZEdWRGMzTmdJR2x6SUU1UFZGeHlYRzRnS2lCMGJ5QnphV1JsTFhOMFpYQWdhRzkzSUdBa1lXNXBiV0YwWldBZ1lXNWtJRzVuUVc1cGJXRjBaU0IzYjNKckxDQmlkWFFnZEdobElHZHZZV3dnYVhNZ2RHOGdZV3hzYjNjZ2NISmxMV1Y0YVhOMGFXNW5JR0Z1YVcxaGRHbHZibk1nYjNKY2NseHVJQ29nWkdseVpXTjBhWFpsY3lCMGJ5QmpjbVZoZEdVZ2JXOXlaU0JqYjIxd2JHVjRJR0Z1YVcxaGRHbHZibk1nZEdoaGRDQmpZVzRnWW1VZ2NIVnlaV3g1SUdSeWFYWmxiaUIxYzJsdVp5QkRVMU1nWTI5a1pTNWNjbHh1SUNwY2NseHVJQ29nVG05MFpTQjBhR0YwSUc5dWJIa2dZbkp2ZDNObGNuTWdkR2hoZENCemRYQndiM0owSUVOVFV5QjBjbUZ1YzJsMGFXOXVjeUJoYm1RdmIzSWdhMlY1Wm5KaGJXVWdZVzVwYldGMGFXOXVjeUJoY21VZ1kyRndZV0pzWlNCdlpseHlYRzRnS2lCeVpXNWtaWEpwYm1jZ1lXNXBiV0YwYVc5dWN5QjBjbWxuWjJWeVpXUWdkbWxoSUdBa1lXNXBiV0YwWlVOemMyQWdLR0poWkNCdVpYZHpJR1p2Y2lCSlJUa2dZVzVrSUd4dmQyVnlLUzVjY2x4dUlDcGNjbHh1SUNvZ0l5TWdWWE5oWjJWY2NseHVJQ29nVDI1alpTQmhaMkZwYml3Z1lDUmhibWx0WVhSbFEzTnpZQ0JwY3lCa1pYTnBaMjVsWkNCMGJ5QmlaU0IxYzJWa0lHbHVjMmxrWlNCdlppQmhJSEpsWjJsemRHVnlaV1FnU21GMllWTmpjbWx3ZENCaGJtbHRZWFJwYjI0Z2RHaGhkRnh5WEc0Z0tpQnBjeUJ3YjNkbGNtVmtJR0o1SUc1blFXNXBiV0YwWlM0Z1NYUWdhWE1nY0c5emMybGliR1VnZEc4Z2RYTmxJR0FrWVc1cGJXRjBaVU56YzJBZ1pHbHlaV04wYkhrZ2FXNXphV1JsSUc5bUlHRWdaR2x5WldOMGFYWmxMQ0JvYjNkbGRtVnlMRnh5WEc0Z0tpQmhibmtnWVhWMGIyMWhkR2xqSUdOdmJuUnliMndnYjNabGNpQmpZVzVqWld4c2FXNW5JR0Z1YVcxaGRHbHZibk1nWVc1a0wyOXlJSEJ5WlhabGJuUnBibWNnWVc1cGJXRjBhVzl1Y3lCbWNtOXRJR0psYVc1bklISjFiaUJ2Ymx4eVhHNGdLaUJqYUdsc1pDQmxiR1Z0Wlc1MGN5QjNhV3hzSUc1dmRDQmlaU0JvWVc1a2JHVmtJR0o1SUVGdVozVnNZWEl1SUVadmNpQjBhR2x6SUhSdklIZHZjbXNnWVhNZ1pYaHdaV04wWldRc0lIQnNaV0Z6WlNCMWMyVWdZQ1JoYm1sdFlYUmxZQ0IwYjF4eVhHNGdLaUIwY21sbloyVnlJSFJvWlNCaGJtbHRZWFJwYjI0Z1lXNWtJSFJvWlc0Z2MyVjBkWEFnWVNCS1lYWmhVMk55YVhCMElHRnVhVzFoZEdsdmJpQjBhR0YwSUdsdWFtVmpkSE1nWUNSaGJtbHRZWFJsUTNOellDQjBieUIwY21sbloyVnlYSEpjYmlBcUlIUm9aU0JEVTFNZ1lXNXBiV0YwYVc5dUxseHlYRzRnS2x4eVhHNGdLaUJVYUdVZ1pYaGhiWEJzWlNCaVpXeHZkeUJ6YUc5M2N5Qm9iM2NnZDJVZ1kyRnVJR055WldGMFpTQmhJR1p2YkdScGJtY2dZVzVwYldGMGFXOXVJRzl1SUdGdUlHVnNaVzFsYm5RZ2RYTnBibWNnWUc1bkxXbG1ZRHBjY2x4dUlDcGNjbHh1SUNvZ1lHQmdhSFJ0YkZ4eVhHNGdLaUE4SVMwdElHNXZkR2xqWlNCMGFHVWdZR1p2YkdRdFlXNXBiV0YwYVc5dVlDQkRVMU1nWTJ4aGMzTWdMUzArWEhKY2JpQXFJRHhrYVhZZ2JtY3RhV1k5WENKdmJrOW1abHdpSUdOc1lYTnpQVndpWm05c1pDMWhibWx0WVhScGIyNWNJajVjY2x4dUlDb2dJQ0JVYUdseklHVnNaVzFsYm5RZ2QybHNiQ0JuYnlCQ1QwOU5YSEpjYmlBcUlEd3ZaR2wyUGx4eVhHNGdLaUE4WW5WMGRHOXVJRzVuTFdOc2FXTnJQVndpYjI1UFptWTlkSEoxWlZ3aVBrWnZiR1FnU1c0OEwySjFkSFJ2Ymo1Y2NseHVJQ29nWUdCZ1hISmNiaUFxWEhKY2JpQXFJRTV2ZHlCM1pTQmpjbVZoZEdVZ2RHaGxJQ29xU21GMllWTmpjbWx3ZENCaGJtbHRZWFJwYjI0cUtpQjBhR0YwSUhkcGJHd2dkSEpwWjJkbGNpQjBhR1VnUTFOVElIUnlZVzV6YVhScGIyNDZYSEpjYmlBcVhISmNiaUFxSUdCZ1lHcHpYSEpjYmlBcUlHNW5UVzlrZFd4bExtRnVhVzFoZEdsdmJpZ25MbVp2YkdRdFlXNXBiV0YwYVc5dUp5d2dXeWNrWVc1cGJXRjBaVU56Y3ljc0lHWjFibU4wYVc5dUtDUmhibWx0WVhSbFEzTnpLU0I3WEhKY2JpQXFJQ0FnY21WMGRYSnVJSHRjY2x4dUlDb2dJQ0FnSUdWdWRHVnlPaUJtZFc1amRHbHZiaWhsYkdWdFpXNTBMQ0JrYjI1bFJtNHBJSHRjY2x4dUlDb2dJQ0FnSUNBZ2RtRnlJR2hsYVdkb2RDQTlJR1ZzWlcxbGJuUmJNRjB1YjJabWMyVjBTR1ZwWjJoME8xeHlYRzRnS2lBZ0lDQWdJQ0J5WlhSMWNtNGdKR0Z1YVcxaGRHVkRjM01vWld4bGJXVnVkQ3dnZTF4eVhHNGdLaUFnSUNBZ0lDQWdJR1p5YjIwNklIc2dhR1ZwWjJoME9pY3djSGduSUgwc1hISmNiaUFxSUNBZ0lDQWdJQ0FnZEc4NklIc2dhR1ZwWjJoME9taGxhV2RvZENBcklDZHdlQ2NnZlN4Y2NseHVJQ29nSUNBZ0lDQWdJQ0JrZFhKaGRHbHZiam9nTVNBdkx5QnZibVVnYzJWamIyNWtYSEpjYmlBcUlDQWdJQ0FnSUgwcE8xeHlYRzRnS2lBZ0lDQWdmVnh5WEc0Z0tpQWdJSDFjY2x4dUlDb2dmVjBwTzF4eVhHNGdLaUJnWUdCY2NseHVJQ3BjY2x4dUlDb2dJeU1nVFc5eVpTQkJaSFpoYm1ObFpDQlZjMlZ6WEhKY2JpQXFYSEpjYmlBcUlHQWtZVzVwYldGMFpVTnpjMkFnYVhNZ2RHaGxJSFZ1WkdWeWJIbHBibWNnWTI5a1pTQjBhR0YwSUc1blFXNXBiV0YwWlNCMWMyVnpJSFJ2SUhCdmQyVnlJQ29xUTFOVExXSmhjMlZrSUdGdWFXMWhkR2x2Ym5NcUtpQmlaV2hwYm1RZ2RHaGxJSE5qWlc1bGN5NGdWR2hsY21WbWIzSmxJRU5UVXlCb2IyOXJjMXh5WEc0Z0tpQnNhV3RsSUdBdWJtY3RSVlpGVGxSZ0xDQmdMbTVuTFVWV1JVNVVMV0ZqZEdsMlpXQXNJR0F1Ym1jdFJWWkZUbFF0YzNSaFoyZGxjbUFnWVhKbElHRnNiQ0JtWldGMGRYSmxjeUIwYUdGMElHTmhiaUJpWlNCMGNtbG5aMlZ5WldRZ2RYTnBibWNnWUNSaGJtbHRZWFJsUTNOellDQjJhV0VnU21GMllWTmpjbWx3ZENCamIyUmxMbHh5WEc0Z0tseHlYRzRnS2lCVWFHbHpJR0ZzYzI4Z2JXVmhibk1nZEdoaGRDQnFkWE4wSUdGaWIzVjBJR0Z1ZVNCamIyMWlhVzVoZEdsdmJpQnZaaUJoWkdScGJtY2dZMnhoYzNObGN5d2djbVZ0YjNacGJtY2dZMnhoYzNObGN5d2djMlYwZEdsdVp5QnpkSGxzWlhNc0lHUjVibUZ0YVdOaGJHeDVJSE5sZEhScGJtY2dZU0JyWlhsbWNtRnRaU0JoYm1sdFlYUnBiMjRzWEhKY2JpQXFJR0Z3Y0d4NWFXNW5JR0VnYUdGeVpHTnZaR1ZrSUdSMWNtRjBhVzl1SUc5eUlHUmxiR0Y1SUhaaGJIVmxMQ0JqYUdGdVoybHVaeUIwYUdVZ1lXNXBiV0YwYVc5dUlHVmhjMmx1WnlCdmNpQmhjSEJzZVdsdVp5QmhJSE4wWVdkblpYSWdZVzVwYldGMGFXOXVJR0Z5WlNCaGJHd2diM0IwYVc5dWN5QjBhR0YwSUhkdmNtc2dkMmwwYUZ4eVhHNGdLaUJnSkdGdWFXMWhkR1ZEYzNOZ0xpQlVhR1VnYzJWeWRtbGpaU0JwZEhObGJHWWdhWE1nYzIxaGNuUWdaVzV2ZFdkb0lIUnZJR1pwWjNWeVpTQnZkWFFnZEdobElHTnZiV0pwYm1GMGFXOXVJRzltSUc5d2RHbHZibk1nWVc1a0lHVjRZVzFwYm1VZ2RHaGxJR1ZzWlcxbGJuUWdjM1I1YkdsdVp5QndjbTl3WlhKMGFXVnpJR2x1SUc5eVpHVnlYSEpjYmlBcUlIUnZJSEJ5YjNacFpHVWdZU0IzYjNKcmFXNW5JR0Z1YVcxaGRHbHZiaUIwYUdGMElIZHBiR3dnY25WdUlHbHVJRU5UVXk1Y2NseHVJQ3BjY2x4dUlDb2dWR2hsSUdWNFlXMXdiR1VnWW1Wc2IzY2djMmh2ZDJOaGMyVnpJR0VnYlc5eVpTQmhaSFpoYm1ObFpDQjJaWEp6YVc5dUlHOW1JSFJvWlNCZ0xtWnZiR1F0WVc1cGJXRjBhVzl1WUNCbWNtOXRJSFJvWlNCbGVHRnRjR3hsSUdGaWIzWmxPbHh5WEc0Z0tseHlYRzRnS2lCZ1lHQnFjMXh5WEc0Z0tpQnVaMDF2WkhWc1pTNWhibWx0WVhScGIyNG9KeTVtYjJ4a0xXRnVhVzFoZEdsdmJpY3NJRnNuSkdGdWFXMWhkR1ZEYzNNbkxDQm1kVzVqZEdsdmJpZ2tZVzVwYldGMFpVTnpjeWtnZTF4eVhHNGdLaUFnSUhKbGRIVnliaUI3WEhKY2JpQXFJQ0FnSUNCbGJuUmxjam9nWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnWkc5dVpVWnVLU0I3WEhKY2JpQXFJQ0FnSUNBZ0lIWmhjaUJvWldsbmFIUWdQU0JsYkdWdFpXNTBXekJkTG05bVpuTmxkRWhsYVdkb2REdGNjbHh1SUNvZ0lDQWdJQ0FnY21WMGRYSnVJQ1JoYm1sdFlYUmxRM056S0dWc1pXMWxiblFzSUh0Y2NseHVJQ29nSUNBZ0lDQWdJQ0JoWkdSRGJHRnpjem9nSjNKbFpDQnNZWEpuWlMxMFpYaDBJSEIxYkhObExYUjNhV05sSnl4Y2NseHVJQ29nSUNBZ0lDQWdJQ0JsWVhOcGJtYzZJQ2RsWVhObExXOTFkQ2NzWEhKY2JpQXFJQ0FnSUNBZ0lDQWdabkp2YlRvZ2V5Qm9aV2xuYUhRNkp6QndlQ2NnZlN4Y2NseHVJQ29nSUNBZ0lDQWdJQ0IwYnpvZ2V5Qm9aV2xuYUhRNmFHVnBaMmgwSUNzZ0ozQjRKeUI5TEZ4eVhHNGdLaUFnSUNBZ0lDQWdJR1IxY21GMGFXOXVPaUF4SUM4dklHOXVaU0J6WldOdmJtUmNjbHh1SUNvZ0lDQWdJQ0FnZlNrN1hISmNiaUFxSUNBZ0lDQjlYSEpjYmlBcUlDQWdmVnh5WEc0Z0tpQjlYU2s3WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQlRhVzVqWlNCM1pTZHlaU0JoWkdScGJtY3ZjbVZ0YjNacGJtY2dRMU5USUdOc1lYTnpaWE1nZEdobGJpQjBhR1VnUTFOVElIUnlZVzV6YVhScGIyNGdkMmxzYkNCaGJITnZJSEJwWTJzZ2RHaHZjMlVnZFhBNlhISmNiaUFxWEhKY2JpQXFJR0JnWUdOemMxeHlYRzRnS2lBdkppTTBNanNnYzJsdVkyVWdZU0JvWVhKa1kyOWtaV1FnWkhWeVlYUnBiMjRnZG1Gc2RXVWdiMllnTVNCM1lYTWdjSEp2ZG1sa1pXUWdhVzRnZEdobElFcGhkbUZUWTNKcGNIUWdZVzVwYldGMGFXOXVJR052WkdVc1hISmNiaUFxSUhSb1pTQkRVMU1nWTJ4aGMzTmxjeUJpWld4dmR5QjNhV3hzSUdKbElIUnlZVzV6YVhScGIyNWxaQ0JrWlhOd2FYUmxJSFJvWlcwZ1ltVnBibWNnWkdWbWFXNWxaQ0JoY3lCeVpXZDFiR0Z5SUVOVFV5QmpiR0Z6YzJWeklDWWpOREk3TDF4eVhHNGdLaUF1Y21Wa0lIc2dZbUZqYTJkeWIzVnVaRHB5WldRN0lIMWNjbHh1SUNvZ0xteGhjbWRsTFhSbGVIUWdleUJtYjI1MExYTnBlbVU2TWpCd2VEc2dmVnh5WEc0Z0tseHlYRzRnS2lBdkppTTBNanNnZDJVZ1kyRnVJR0ZzYzI4Z2RYTmxJR0VnYTJWNVpuSmhiV1VnWVc1cGJXRjBhVzl1SUdGdVpDQWtZVzVwYldGMFpVTnpjeUIzYVd4c0lHMWhhMlVnYVhRZ2QyOXlheUJoYkc5dVozTnBaR1VnZEdobElIUnlZVzV6YVhScGIyNGdKaU0wTWpzdlhISmNiaUFxSUM1d2RXeHpaUzEwZDJsalpTQjdYSEpjYmlBcUlDQWdZVzVwYldGMGFXOXVPaUF3TGpWeklIQjFiSE5sSUd4cGJtVmhjaUF5TzF4eVhHNGdLaUFnSUMxM1pXSnJhWFF0WVc1cGJXRjBhVzl1T2lBd0xqVnpJSEIxYkhObElHeHBibVZoY2lBeU8xeHlYRzRnS2lCOVhISmNiaUFxWEhKY2JpQXFJRUJyWlhsbWNtRnRaWE1nY0hWc2MyVWdlMXh5WEc0Z0tpQWdJR1p5YjIwZ2V5QjBjbUZ1YzJadmNtMDZJSE5qWVd4bEtEQXVOU2s3SUgxY2NseHVJQ29nSUNCMGJ5QjdJSFJ5WVc1elptOXliVG9nYzJOaGJHVW9NUzQxS1RzZ2ZWeHlYRzRnS2lCOVhISmNiaUFxWEhKY2JpQXFJRUF0ZDJWaWEybDBMV3RsZVdaeVlXMWxjeUJ3ZFd4elpTQjdYSEpjYmlBcUlDQWdabkp2YlNCN0lDMTNaV0pyYVhRdGRISmhibk5tYjNKdE9pQnpZMkZzWlNnd0xqVXBPeUI5WEhKY2JpQXFJQ0FnZEc4Z2V5QXRkMlZpYTJsMExYUnlZVzV6Wm05eWJUb2djMk5oYkdVb01TNDFLVHNnZlZ4eVhHNGdLaUI5WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQkhhWFpsYmlCMGFHbHpJR052YlhCc1pYZ2dZMjl0WW1sdVlYUnBiMjRnYjJZZ1ExTlRJR05zWVhOelpYTXNJSE4wZVd4bGN5QmhibVFnYjNCMGFXOXVjeXdnWUNSaGJtbHRZWFJsUTNOellDQjNhV3hzSUdacFozVnlaU0JsZG1WeWVYUm9hVzVuSUc5MWRDQmhibVFnYldGclpTQjBhR1VnWVc1cGJXRjBhVzl1SUdoaGNIQmxiaTVjY2x4dUlDcGNjbHh1SUNvZ0l5TWdTRzkzSUhSb1pTQlBjSFJwYjI1eklHRnlaU0JvWVc1a2JHVmtYSEpjYmlBcVhISmNiaUFxSUdBa1lXNXBiV0YwWlVOemMyQWdhWE1nZG1WeWVTQjJaWEp6WVhScGJHVWdZVzVrSUdsdWRHVnNiR2xuWlc1MElIZG9aVzRnYVhRZ1kyOXRaWE1nZEc4Z1ptbG5kWEpwYm1jZ2IzVjBJSGRvWVhRZ1kyOXVabWxuZFhKaGRHbHZibk1nZEc4Z1lYQndiSGtnZEc4Z2RHaGxJR1ZzWlcxbGJuUWdkRzhnWlc1emRYSmxJSFJvWlNCaGJtbHRZWFJwYjI1Y2NseHVJQ29nZDI5eWEzTWdkMmwwYUNCMGFHVWdiM0IwYVc5dWN5QndjbTkyYVdSbFpDNGdVMkY1SUdadmNpQmxlR0Z0Y0d4bElIZGxJSGRsY21VZ1lXUmthVzVuSUdFZ1kyeGhjM01nZEdoaGRDQmpiMjUwWVdsdVpXUWdZU0JyWlhsbWNtRnRaU0IyWVd4MVpTQmhibVFnZDJVZ2QyRnVkR1ZrSUhSdklHRnNjMjhnWVc1cGJXRjBaU0J6YjIxbElHbHViR2x1WlZ4eVhHNGdLaUJ6ZEhsc1pYTWdkWE5wYm1jZ2RHaGxJR0JtY205dFlDQmhibVFnWUhSdllDQndjbTl3WlhKMGFXVnpMbHh5WEc0Z0tseHlYRzRnS2lCZ1lHQnFjMXh5WEc0Z0tpQjJZWElnWVc1cGJXRjBiM0lnUFNBa1lXNXBiV0YwWlVOemN5aGxiR1Z0Wlc1MExDQjdYSEpjYmlBcUlDQWdabkp2YlRvZ2V5QmlZV05yWjNKdmRXNWtPaWR5WldRbklIMHNYSEpjYmlBcUlDQWdkRzg2SUhzZ1ltRmphMmR5YjNWdVpEb25ZbXgxWlNjZ2ZWeHlYRzRnS2lCOUtUdGNjbHh1SUNvZ1lXNXBiV0YwYjNJdWMzUmhjblFvS1R0Y2NseHVJQ29nWUdCZ1hISmNiaUFxWEhKY2JpQXFJR0JnWUdOemMxeHlYRzRnS2lBdWNtOTBZWFJwYm1jdFlXNXBiV0YwYVc5dUlIdGNjbHh1SUNvZ0lDQmhibWx0WVhScGIyNDZNQzQxY3lCeWIzUmhkR1VnYkdsdVpXRnlPMXh5WEc0Z0tpQWdJQzEzWldKcmFYUXRZVzVwYldGMGFXOXVPakF1TlhNZ2NtOTBZWFJsSUd4cGJtVmhjanRjY2x4dUlDb2dmVnh5WEc0Z0tseHlYRzRnS2lCQWEyVjVabkpoYldWeklISnZkR0YwWlNCN1hISmNiaUFxSUNBZ1puSnZiU0I3SUhSeVlXNXpabTl5YlRvZ2NtOTBZWFJsS0RCa1pXY3BPeUI5WEhKY2JpQXFJQ0FnZEc4Z2V5QjBjbUZ1YzJadmNtMDZJSEp2ZEdGMFpTZ3pOakJrWldjcE95QjlYSEpjYmlBcUlIMWNjbHh1SUNwY2NseHVJQ29nUUMxM1pXSnJhWFF0YTJWNVpuSmhiV1Z6SUhKdmRHRjBaU0I3WEhKY2JpQXFJQ0FnWm5KdmJTQjdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUJ5YjNSaGRHVW9NR1JsWnlrN0lIMWNjbHh1SUNvZ0lDQjBieUI3SUMxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0T2lCeWIzUmhkR1VvTXpZd1pHVm5LVHNnZlZ4eVhHNGdLaUI5WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQlVhR1VnYldsemMybHVaeUJ3YVdWalpYTWdhR1Z5WlNCaGNtVWdkR2hoZENCM1pTQmtieUJ1YjNRZ2FHRjJaU0JoSUhSeVlXNXphWFJwYjI0Z2MyVjBJQ2gzYVhSb2FXNGdkR2hsSUVOVFV5QmpiMlJsSUc1dmNpQjNhWFJvYVc0Z2RHaGxJR0FrWVc1cGJXRjBaVU56YzJBZ2IzQjBhVzl1Y3lrZ1lXNWtJSFJvWlNCa2RYSmhkR2x2YmlCdlppQjBhR1VnWVc1cGJXRjBhVzl1SUdselhISmNiaUFxSUdkdmFXNW5JSFJ2SUdKbElHUmxkR1ZqZEdWa0lHWnliMjBnZDJoaGRDQjBhR1VnYTJWNVpuSmhiV1VnYzNSNWJHVnpJRzl1SUhSb1pTQkRVMU1nWTJ4aGMzTWdZWEpsTGlCSmJpQjBhR2x6SUdWMlpXNTBMQ0JnSkdGdWFXMWhkR1ZEYzNOZ0lIZHBiR3dnWVhWMGIyMWhkR2xqWVd4c2VTQmpjbVZoZEdVZ1lXNGdhVzVzYVc1bElIUnlZVzV6YVhScGIyNWNjbHh1SUNvZ2MzUjViR1VnYldGMFkyaHBibWNnZEdobElHUjFjbUYwYVc5dUlHUmxkR1ZqZEdWa0lHWnliMjBnZEdobElHdGxlV1p5WVcxbElITjBlV3hsSUNoM2FHbGphQ0JwY3lCd2NtVnpaVzUwSUdsdUlIUm9aU0JEVTFNZ1kyeGhjM01nZEdoaGRDQnBjeUJpWldsdVp5QmhaR1JsWkNrZ1lXNWtJSFJvWlc0Z2NISmxjR0Z5WlNCaWIzUm9JSFJvWlNCMGNtRnVjMmwwYVc5dVhISmNiaUFxSUdGdVpDQnJaWGxtY21GdFpTQmhibWx0WVhScGIyNXpJSFJ2SUhKMWJpQnBiaUJ3WVhKaGJHeGxiQ0J2YmlCMGFHVWdaV3hsYldWdWRDNGdWR2hsYmlCM2FHVnVJSFJvWlNCaGJtbHRZWFJwYjI0Z2FYTWdkVzVrWlhKM1lYa2dkR2hsSUhCeWIzWnBaR1ZrSUdCbWNtOXRZQ0JoYm1RZ1lIUnZZQ0JEVTFNZ2MzUjViR1Z6SUhkcGJHd2dZbVVnWVhCd2JHbGxaRnh5WEc0Z0tpQmhibVFnYzNCeVpXRmtJR0ZqY205emN5QjBhR1VnZEhKaGJuTnBkR2x2YmlCaGJtUWdhMlY1Wm5KaGJXVWdZVzVwYldGMGFXOXVMbHh5WEc0Z0tseHlYRzRnS2lBakl5QlhhR0YwSUdseklISmxkSFZ5Ym1Wa1hISmNiaUFxWEhKY2JpQXFJR0FrWVc1cGJXRjBaVU56YzJBZ2QyOXlhM01nYVc0Z2RIZHZJSE4wWVdkbGN6b2dZU0J3Y21Wd1lYSmhkR2x2YmlCd2FHRnpaU0JoYm1RZ1lXNGdZVzVwYldGMGFXOXVJSEJvWVhObExpQlVhR1Z5WldadmNtVWdkMmhsYmlCZ0pHRnVhVzFoZEdWRGMzTmdJR2x6SUdacGNuTjBJR05oYkd4bFpDQnBkQ0IzYVd4c0lFNVBWQ0JoWTNSMVlXeHNlVnh5WEc0Z0tpQnpkR0Z5ZENCMGFHVWdZVzVwYldGMGFXOXVMaUJCYkd3Z2RHaGhkQ0JwY3lCbmIybHVaeUJ2YmlCb1pYSmxJR2x6SUhSb1lYUWdkR2hsSUdWc1pXMWxiblFnYVhNZ1ltVnBibWNnY0hKbGNHRnlaV1FnWm05eUlIUm9aU0JoYm1sdFlYUnBiMjRnS0hkb2FXTm9JRzFsWVc1eklIUm9ZWFFnZEdobElHZGxibVZ5WVhSbFpDQkRVMU1nWTJ4aGMzTmxjeUJoY21WY2NseHVJQ29nWVdSa1pXUWdZVzVrSUhKbGJXOTJaV1FnYjI0Z2RHaGxJR1ZzWlcxbGJuUXBMaUJQYm1ObElHQWtZVzVwYldGMFpVTnpjMkFnYVhNZ1kyRnNiR1ZrSUdsMElIZHBiR3dnY21WMGRYSnVJR0Z1SUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0JtYjJ4c2IzZHBibWNnY0hKdmNHVnlkR2xsY3pwY2NseHVJQ3BjY2x4dUlDb2dZR0JnYW5OY2NseHVJQ29nZG1GeUlHRnVhVzFoZEc5eUlEMGdKR0Z1YVcxaGRHVkRjM01vWld4bGJXVnVkQ3dnZXlBdUxpNGdmU2s3WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQk9iM2NnZDJoaGRDQmtieUIwYUdVZ1kyOXVkR1Z1ZEhNZ2IyWWdiM1Z5SUdCaGJtbHRZWFJ2Y21BZ2RtRnlhV0ZpYkdVZ2JHOXZheUJzYVd0bE9seHlYRzRnS2x4eVhHNGdLaUJnWUdCcWMxeHlYRzRnS2lCN1hISmNiaUFxSUNBZ0x5OGdjM1JoY25SeklIUm9aU0JoYm1sdFlYUnBiMjVjY2x4dUlDb2dJQ0J6ZEdGeWREb2dSblZ1WTNScGIyNHNYSEpjYmlBcVhISmNiaUFxSUNBZ0x5OGdaVzVrY3lBb1lXSnZjblJ6S1NCMGFHVWdZVzVwYldGMGFXOXVYSEpjYmlBcUlDQWdaVzVrT2lCR2RXNWpkR2x2Ymx4eVhHNGdLaUI5WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQlVieUJoWTNSMVlXeHNlU0J6ZEdGeWRDQjBhR1VnWVc1cGJXRjBhVzl1SUhkbElHNWxaV1FnZEc4Z2NuVnVJR0JoYm1sdFlYUnBiMjR1YzNSaGNuUW9LV0FnZDJocFkyZ2dkMmxzYkNCMGFHVnVJSEpsZEhWeWJpQmhJSEJ5YjIxcGMyVWdkR2hoZENCM1pTQmpZVzRnYUc5dmF5QnBiblJ2SUhSdklHUmxkR1ZqZENCM2FHVnVJSFJvWlNCaGJtbHRZWFJwYjI0Z1pXNWtjeTVjY2x4dUlDb2dTV1lnZDJVZ1kyaHZiM05sSUc1dmRDQjBieUJ5ZFc0Z2RHaGxJR0Z1YVcxaGRHbHZiaUIwYUdWdUlIZGxJRTFWVTFRZ2NuVnVJR0JoYm1sdFlYUnBiMjR1Wlc1a0tDbGdJSFJ2SUhCbGNtWnZjbTBnWVNCamJHVmhiblZ3SUc5dUlIUm9aU0JsYkdWdFpXNTBJQ2h6YVc1alpTQnpiMjFsSUVOVFV5QmpiR0Z6YzJWeklHRnVaQ0J6ZEhsc1pYTWdiV0Y1SUdoaGRtVWdZbVZsYmx4eVhHNGdLaUJoY0hCc2FXVmtJSFJ2SUhSb1pTQmxiR1Z0Wlc1MElHUjFjbWx1WnlCMGFHVWdjSEpsY0dGeVlYUnBiMjRnY0doaGMyVXBMaUJPYjNSbElIUm9ZWFFnWVd4c0lHOTBhR1Z5SUhCeWIzQmxjblJwWlhNZ2MzVmphQ0JoY3lCa2RYSmhkR2x2Yml3Z1pHVnNZWGtzSUhSeVlXNXphWFJwYjI1eklHRnVaQ0JyWlhsbWNtRnRaWE1nWVhKbElHcDFjM1FnY0hKdmNHVnlkR2xsYzF4eVhHNGdLaUJoYm1RZ2RHaGhkQ0JqYUdGdVoybHVaeUIwYUdWdElIZHBiR3dnYm05MElISmxZMjl1Wm1sbmRYSmxJSFJvWlNCd1lYSmhiV1YwWlhKeklHOW1JSFJvWlNCaGJtbHRZWFJwYjI0dVhISmNiaUFxWEhKY2JpQXFJQ01qSXlCeWRXNXVaWEl1Wkc5dVpTZ3BJSFp6SUhKMWJtNWxjaTUwYUdWdUtDbGNjbHh1SUNvZ1NYUWdhWE1nWkc5amRXMWxiblJsWkNCMGFHRjBJR0JoYm1sdFlYUnBiMjR1YzNSaGNuUW9LV0FnZDJsc2JDQnlaWFIxY200Z1lTQndjbTl0YVhObElHOWlhbVZqZENCaGJtUWdkR2hwY3lCcGN5QjBjblZsTENCb2IzZGxkbVZ5TENCMGFHVnlaU0JwY3lCaGJITnZJR0Z1SUdGa1pHbDBhVzl1WVd3Z2JXVjBhRzlrSUdGMllXbHNZV0pzWlNCdmJpQjBhR1ZjY2x4dUlDb2djblZ1Ym1WeUlHTmhiR3hsWkNCZ0xtUnZibVVvWTJGc2JHSmhZMnRHYmlsZ0xpQlVhR1VnWkc5dVpTQnRaWFJvYjJRZ2QyOXlhM01nZEdobElITmhiV1VnWVhNZ1lDNW1hVzVoYkd4NUtHTmhiR3hpWVdOclJtNHBZQ3dnYUc5M1pYWmxjaXdnYVhRZ1pHOWxjeUFxS201dmRDQjBjbWxuWjJWeUlHRWdaR2xuWlhOMElIUnZJRzlqWTNWeUtpb3VYSEpjYmlBcUlGUm9aWEpsWm05eVpTd2dabTl5SUhCbGNtWnZjbTFoYm1ObElISmxZWE52Ym5Nc0lHbDBKM01nWVd4M1lYbHpJR0psYzNRZ2RHOGdkWE5sSUdCeWRXNXVaWEl1Wkc5dVpTaGpZV3hzWW1GamF5bGdJR2x1YzNSbFlXUWdiMllnWUhKMWJtNWxjaTUwYUdWdUtDbGdMQ0JnY25WdWJtVnlMbU5oZEdOb0tDbGdJRzl5SUdCeWRXNXVaWEl1Wm1sdVlXeHNlU2dwWUZ4eVhHNGdLaUIxYm14bGMzTWdlVzkxSUhKbFlXeHNlU0J1WldWa0lHRWdaR2xuWlhOMElIUnZJR3RwWTJzZ2IyWm1JR0ZtZEdWeWQyRnlaSE11WEhKY2JpQXFYSEpjYmlBcUlFdGxaWEFnYVc0Z2JXbHVaQ0IwYUdGMExDQjBieUJ0WVd0bElIUm9hWE1nWldGemFXVnlMQ0J1WjBGdWFXMWhkR1VnYUdGeklIUjNaV0ZyWldRZ2RHaGxJRXBUSUdGdWFXMWhkR2x2Ym5NZ1FWQkpJSFJ2SUhKbFkyOW5ibWw2WlNCM2FHVnVJR0VnY25WdWJtVnlJR2x1YzNSaGJtTmxJR2x6SUhKbGRIVnlibVZrSUdaeWIyMGdKR0Z1YVcxaGRHVkRjM05jY2x4dUlDb2dLSE52SUhSb1pYSmxJR2x6SUc1dklHNWxaV1FnZEc4Z1kyRnNiQ0JnY25WdWJtVnlMbVJ2Ym1Vb1pHOXVaVVp1S1dBZ2FXNXphV1JsSUc5bUlIbHZkWElnU21GMllWTmpjbWx3ZENCaGJtbHRZWFJwYjI0Z1kyOWtaU2t1WEhKY2JpQXFJRU5vWldOcklIUm9aU0I3UUd4cGJtc2dibWRCYm1sdFlYUmxMaVJoYm1sdFlYUmxRM056STNWellXZGxJR0Z1YVcxaGRHbHZiaUJqYjJSbElHRmliM1psZlNCMGJ5QnpaV1VnYUc5M0lIUm9hWE1nZDI5eWEzTXVYSEpjYmlBcVhISmNiaUFxSUVCd1lYSmhiU0I3UkU5TlJXeGxiV1Z1ZEgwZ1pXeGxiV1Z1ZENCMGFHVWdaV3hsYldWdWRDQjBhR0YwSUhkcGJHd2dZbVVnWVc1cGJXRjBaV1JjY2x4dUlDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHOXdkR2x2Ym5NZ2RHaGxJR0Z1YVcxaGRHbHZiaTF5Wld4aGRHVmtJRzl3ZEdsdmJuTWdkR2hoZENCM2FXeHNJR0psSUdGd2NHeHBaV1FnWkhWeWFXNW5JSFJvWlNCaGJtbHRZWFJwYjI1Y2NseHVJQ3BjY2x4dUlDb2dLaUJnWlhabGJuUmdJQzBnVkdobElFUlBUU0JsZG1WdWRDQW9aUzVuTGlCbGJuUmxjaXdnYkdWaGRtVXNJRzF2ZG1VcExpQlhhR1Z1SUhWelpXUXNJR0VnWjJWdVpYSmhkR1ZrSUVOVFV5QmpiR0Z6Y3lCdlppQmdibWN0UlZaRlRsUmdJR0Z1WkNCZ2JtY3RSVlpGVGxRdFlXTjBhWFpsWUNCM2FXeHNJR0psSUdGd2NHeHBaV1JjY2x4dUlDb2dkRzhnZEdobElHVnNaVzFsYm5RZ1pIVnlhVzVuSUhSb1pTQmhibWx0WVhScGIyNHVJRTExYkhScGNHeGxJR1YyWlc1MGN5QmpZVzRnWW1VZ2NISnZkbWxrWldRZ2QyaGxiaUJ6Y0dGalpYTWdZWEpsSUhWelpXUWdZWE1nWVNCelpYQmhjbUYwYjNJdUlDaE9iM1JsSUhSb1lYUWdkR2hwY3lCM2FXeHNJRzV2ZENCd1pYSm1iM0p0SUdGdWVTQkVUMDBnYjNCbGNtRjBhVzl1TGlsY2NseHVJQ29nS2lCZ2MzUnlkV04wZFhKaGJHQWdMU0JKYm1ScFkyRjBaWE1nZEdoaGRDQjBhR1VnWUc1bkxXQWdjSEpsWm1sNElIZHBiR3dnWW1VZ1lXUmtaV1FnZEc4Z2RHaGxJR1YyWlc1MElHTnNZWE56TGlCVFpYUjBhVzVuSUhSdklHQm1ZV3h6WldBZ2IzSWdiMjFwZEhScGJtY2dkMmxzYkNCMGRYSnVJR0J1WnkxRlZrVk9WR0FnWVc1a1hISmNiaUFxSUdCdVp5MUZWa1ZPVkMxaFkzUnBkbVZnSUdsdUlHQkZWa1ZPVkdBZ1lXNWtJR0JGVmtWT1ZDMWhZM1JwZG1WZ0xpQlZiblZ6WldRZ2FXWWdZR1YyWlc1MFlDQnBjeUJ2YldsMGRHVmtMbHh5WEc0Z0tpQXFJR0JsWVhOcGJtZGdJQzBnVkdobElFTlRVeUJsWVhOcGJtY2dkbUZzZFdVZ2RHaGhkQ0IzYVd4c0lHSmxJR0Z3Y0d4cFpXUWdkRzhnZEdobElIUnlZVzV6YVhScGIyNGdiM0lnYTJWNVpuSmhiV1VnWVc1cGJXRjBhVzl1SUNodmNpQmliM1JvS1M1Y2NseHVJQ29nS2lCZ2RISmhibk5wZEdsdmJsTjBlV3hsWUNBdElGUm9aU0J5WVhjZ1ExTlRJSFJ5WVc1emFYUnBiMjRnYzNSNWJHVWdkR2hoZENCM2FXeHNJR0psSUhWelpXUWdLR1V1Wnk0Z1lERnpJR3hwYm1WaGNpQmhiR3hnS1M1Y2NseHVJQ29nS2lCZ2EyVjVabkpoYldWVGRIbHNaV0FnTFNCVWFHVWdjbUYzSUVOVFV5QnJaWGxtY21GdFpTQmhibWx0WVhScGIyNGdjM1I1YkdVZ2RHaGhkQ0IzYVd4c0lHSmxJSFZ6WldRZ0tHVXVaeTRnWURGeklHMTVYMkZ1YVcxaGRHbHZiaUJzYVc1bFlYSmdLUzVjY2x4dUlDb2dLaUJnWm5KdmJXQWdMU0JVYUdVZ2MzUmhjblJwYm1jZ1ExTlRJSE4wZVd4bGN5QW9ZU0JyWlhrdmRtRnNkV1VnYjJKcVpXTjBLU0IwYUdGMElIZHBiR3dnWW1VZ1lYQndiR2xsWkNCaGRDQjBhR1VnYzNSaGNuUWdiMllnZEdobElHRnVhVzFoZEdsdmJpNWNjbHh1SUNvZ0tpQmdkRzlnSUMwZ1ZHaGxJR1Z1WkdsdVp5QkRVMU1nYzNSNWJHVnpJQ2hoSUd0bGVTOTJZV3gxWlNCdlltcGxZM1FwSUhSb1lYUWdkMmxzYkNCaVpTQmhjSEJzYVdWa0lHRmpjbTl6Y3lCMGFHVWdZVzVwYldGMGFXOXVJSFpwWVNCaElFTlRVeUIwY21GdWMybDBhVzl1TGx4eVhHNGdLaUFxSUdCaFpHUkRiR0Z6YzJBZ0xTQkJJSE53WVdObElITmxjR0Z5WVhSbFpDQnNhWE4wSUc5bUlFTlRVeUJqYkdGemMyVnpJSFJvWVhRZ2QybHNiQ0JpWlNCaFpHUmxaQ0IwYnlCMGFHVWdaV3hsYldWdWRDQmhibVFnYzNCeVpXRmtJR0ZqY205emN5QjBhR1VnWVc1cGJXRjBhVzl1TGx4eVhHNGdLaUFxSUdCeVpXMXZkbVZEYkdGemMyQWdMU0JCSUhOd1lXTmxJSE5sY0dGeVlYUmxaQ0JzYVhOMElHOW1JRU5UVXlCamJHRnpjMlZ6SUhSb1lYUWdkMmxzYkNCaVpTQnlaVzF2ZG1Wa0lHWnliMjBnZEdobElHVnNaVzFsYm5RZ1lXNWtJSE53Y21WaFpDQmhZM0p2YzNNZ2RHaGxJR0Z1YVcxaGRHbHZiaTVjY2x4dUlDb2dLaUJnWkhWeVlYUnBiMjVnSUMwZ1FTQnVkVzFpWlhJZ2RtRnNkV1VnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0IwYjNSaGJDQmtkWEpoZEdsdmJpQnZaaUIwYUdVZ2RISmhibk5wZEdsdmJpQmhibVF2YjNJZ2EyVjVabkpoYldVZ0tHNXZkR1VnZEdoaGRDQmhJSFpoYkhWbElHOW1JREVnYVhNZ01UQXdNRzF6S1M0Z1NXWWdZU0IyWVd4MVpTQnZaaUJnTUdCY2NseHVJQ29nYVhNZ2NISnZkbWxrWldRZ2RHaGxiaUIwYUdVZ1lXNXBiV0YwYVc5dUlIZHBiR3dnWW1VZ2MydHBjSEJsWkNCbGJuUnBjbVZzZVM1Y2NseHVJQ29nS2lCZ1pHVnNZWGxnSUMwZ1FTQnVkVzFpWlhJZ2RtRnNkV1VnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0IwYjNSaGJDQmtaV3hoZVNCdlppQjBhR1VnZEhKaGJuTnBkR2x2YmlCaGJtUXZiM0lnYTJWNVpuSmhiV1VnS0c1dmRHVWdkR2hoZENCaElIWmhiSFZsSUc5bUlERWdhWE1nTVRBd01HMXpLUzRnU1dZZ1lTQjJZV3gxWlNCdlppQmdkSEoxWldBZ2FYTmNjbHh1SUNvZ2RYTmxaQ0IwYUdWdUlIZG9ZWFJsZG1WeUlHUmxiR0Y1SUhaaGJIVmxJR2x6SUdSbGRHVmpkR1ZrSUdaeWIyMGdkR2hsSUVOVFV5QmpiR0Z6YzJWeklIZHBiR3dnWW1VZ2JXbHljbTl5WldRZ2IyNGdkR2hsSUdWc1pXMWxiblJ6SUhOMGVXeGxjeUFvWlM1bkxpQmllU0J6WlhSMGFXNW5JR1JsYkdGNUlIUnlkV1VnZEdobGJpQjBhR1VnYzNSNWJHVWdkbUZzZFdWY2NseHVJQ29nYjJZZ2RHaGxJR1ZzWlcxbGJuUWdkMmxzYkNCaVpTQmdkSEpoYm5OcGRHbHZiaTFrWld4aGVUb2dSRVZVUlVOVVJVUmZWa0ZNVlVWZ0tTNGdWWE5wYm1jZ1lIUnlkV1ZnSUdseklIVnpaV1oxYkNCM2FHVnVJSGx2ZFNCM1lXNTBJSFJvWlNCRFUxTWdZMnhoYzNObGN5QmhibVFnYVc1c2FXNWxJSE4wZVd4bGN5QjBieUJoYkd3Z2MyaGhjbVVnZEdobElITmhiV1ZjY2x4dUlDb2dRMU5USUdSbGJHRjVJSFpoYkhWbExseHlYRzRnS2lBcUlHQnpkR0ZuWjJWeVlDQXRJRUVnYm5WdFpYSnBZeUIwYVcxbElIWmhiSFZsSUhKbGNISmxjMlZ1ZEdsdVp5QjBhR1VnWkdWc1lYa2dZbVYwZDJWbGJpQnpkV05qWlhOemFYWmxiSGtnWVc1cGJXRjBaV1FnWld4bGJXVnVkSE5jY2x4dUlDb2dLSHRBYkdsdWF5QnVaMEZ1YVcxaGRHVWpZM056TFhOMFlXZG5aWEpwYm1jdFlXNXBiV0YwYVc5dWN5QkRiR2xqYXlCb1pYSmxJSFJ2SUd4bFlYSnVJR2h2ZHlCRFUxTXRZbUZ6WldRZ2MzUmhaMmRsY21sdVp5QjNiM0pyY3lCcGJpQnVaMEZ1YVcxaGRHVXVmU2xjY2x4dUlDb2dLaUJnYzNSaFoyZGxja2x1WkdWNFlDQXRJRlJvWlNCdWRXMWxjbWxqSUdsdVpHVjRJSEpsY0hKbGMyVnVkR2x1WnlCMGFHVWdjM1JoWjJkbGNpQnBkR1Z0SUNobExtY3VJR0VnZG1Gc2RXVWdiMllnTlNCcGN5QmxjWFZoYkNCMGJ5QjBhR1VnYzJsNGRHZ2dhWFJsYlNCcGJpQjBhR1VnYzNSaFoyZGxjanNnZEdobGNtVm1iM0psSUhkb1pXNGdZVnh5WEc0Z0tpQWdJR0J6ZEdGbloyVnlZQ0J2Y0hScGIyNGdkbUZzZFdVZ2IyWWdZREF1TVdBZ2FYTWdkWE5sWkNCMGFHVnVJSFJvWlhKbElIZHBiR3dnWW1VZ1lTQnpkR0ZuWjJWeUlHUmxiR0Y1SUc5bUlHQTJNREJ0YzJBcFhISmNiaUFxSUNvZ1lHRndjR3g1UTJ4aGMzTmxjMFZoY214NVlDQXRJRmRvWlhSb1pYSWdiM0lnYm05MElIUm9aU0JqYkdGemMyVnpJR0psYVc1bklHRmtaR1ZrSUc5eUlISmxiVzkyWldRZ2QybHNiQ0JpWlNCMWMyVmtJSGRvWlc0Z1pHVjBaV04wYVc1bklIUm9aU0JoYm1sdFlYUnBiMjR1SUZSb2FYTWdhWE1nYzJWMElHSjVJR0FrWVc1cGJXRjBaV0FnZDJobGJpQmxiblJsY2k5c1pXRjJaUzl0YjNabElHRnVhVzFoZEdsdmJuTWdZWEpsSUdacGNtVmtJSFJ2SUdWdWMzVnlaU0IwYUdGMElIUm9aU0JEVTFNZ1kyeGhjM05sY3lCaGNtVWdjbVZ6YjJ4MlpXUWdhVzRnZEdsdFpTNGdLRTV2ZEdVZ2RHaGhkQ0IwYUdseklIZHBiR3dnY0hKbGRtVnVkQ0JoYm5rZ2RISmhibk5wZEdsdmJuTWdabkp2YlNCdlkyTjFjbkpwYm1jZ2IyNGdkR2hsSUdOc1lYTnpaWE1nWW1WcGJtY2dZV1JrWldRZ1lXNWtJSEpsYlc5MlpXUXVLVnh5WEc0Z0tpQXFJR0JqYkdWaGJuVndVM1I1YkdWellDQXRJRmRvWlhSb1pYSWdiM0lnYm05MElIUm9aU0J3Y205MmFXUmxaQ0JnWm5KdmJXQWdZVzVrSUdCMGIyQWdjM1I1YkdWeklIZHBiR3dnWW1VZ2NtVnRiM1psWkNCdmJtTmxYSEpjYmlBcUlDQWdJSFJvWlNCaGJtbHRZWFJwYjI0Z2FYTWdZMnh2YzJWa0xpQlVhR2x6SUdseklIVnpaV1oxYkNCbWIzSWdkMmhsYmlCMGFHVWdjM1I1YkdWeklHRnlaU0IxYzJWa0lIQjFjbVZzZVNCbWIzSWdkR2hsSUhOaGEyVWdiMlpjY2x4dUlDb2dJQ0FnZEdobElHRnVhVzFoZEdsdmJpQmhibVFnWkc4Z2JtOTBJR2hoZG1VZ1lTQnNZWE4wYVc1bklIWnBjM1ZoYkNCbFptWmxZM1FnYjI0Z2RHaGxJR1ZzWlcxbGJuUWdLR1V1Wnk0Z1lTQmpiMnhzWVhCelpTQmhibVFnYjNCbGJpQmhibWx0WVhScGIyNHBMbHh5WEc0Z0tpQWdJQ0JDZVNCa1pXWmhkV3gwSUhSb2FYTWdkbUZzZFdVZ2FYTWdjMlYwSUhSdklHQm1ZV3h6WldBdVhISmNiaUFxWEhKY2JpQXFJRUJ5WlhSMWNtNGdlMjlpYW1WamRIMGdZVzRnYjJKcVpXTjBJSGRwZEdnZ2MzUmhjblFnWVc1a0lHVnVaQ0J0WlhSb2IyUnpJR0Z1WkNCa1pYUmhhV3h6SUdGaWIzVjBJSFJvWlNCaGJtbHRZWFJwYjI0dVhISmNiaUFxWEhKY2JpQXFJQ29nWUhOMFlYSjBZQ0F0SUZSb1pTQnRaWFJvYjJRZ2RHOGdjM1JoY25RZ2RHaGxJR0Z1YVcxaGRHbHZiaTRnVkdocGN5QjNhV3hzSUhKbGRIVnliaUJoSUdCUWNtOXRhWE5sWUNCM2FHVnVJR05oYkd4bFpDNWNjbHh1SUNvZ0tpQmdaVzVrWUNBdElGUm9hWE1nYldWMGFHOWtJSGRwYkd3Z1kyRnVZMlZzSUhSb1pTQmhibWx0WVhScGIyNGdZVzVrSUhKbGJXOTJaU0JoYkd3Z1lYQndiR2xsWkNCRFUxTWdZMnhoYzNObGN5QmhibVFnYzNSNWJHVnpMbHh5WEc0Z0tpOWNjbHh1ZG1GeUlFOU9SVjlUUlVOUFRrUWdQU0F4TURBd08xeHlYRzUyWVhJZ1FrRlRSVjlVUlU0Z1BTQXhNRHRjY2x4dVhISmNiblpoY2lCRlRFRlFVMFZFWDFSSlRVVmZUVUZZWDBSRlEwbE5RVXhmVUV4QlEwVlRJRDBnTXp0Y2NseHVkbUZ5SUVOTVQxTkpUa2RmVkVsTlJWOUNWVVpHUlZJZ1BTQXhMalU3WEhKY2JseHlYRzUyWVhJZ1JFVlVSVU5VWDBOVFUxOVFVazlRUlZKVVNVVlRJRDBnZTF4eVhHNGdJSFJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiam9nSUNBZ0lDQlVVa0ZPVTBsVVNVOU9YMFJWVWtGVVNVOU9YMUJTVDFBc1hISmNiaUFnZEhKaGJuTnBkR2x2YmtSbGJHRjVPaUFnSUNBZ0lDQWdJRlJTUVU1VFNWUkpUMDVmUkVWTVFWbGZVRkpQVUN4Y2NseHVJQ0IwY21GdWMybDBhVzl1VUhKdmNHVnlkSGs2SUNBZ0lDQWdWRkpCVGxOSlZFbFBUbDlRVWs5UUlDc2dVRkpQVUVWU1ZGbGZTMFZaTEZ4eVhHNGdJR0Z1YVcxaGRHbHZia1IxY21GMGFXOXVPaUFnSUNBZ0lDQkJUa2xOUVZSSlQwNWZSRlZTUVZSSlQwNWZVRkpQVUN4Y2NseHVJQ0JoYm1sdFlYUnBiMjVFWld4aGVUb2dJQ0FnSUNBZ0lDQWdRVTVKVFVGVVNVOU9YMFJGVEVGWlgxQlNUMUFzWEhKY2JpQWdZVzVwYldGMGFXOXVTWFJsY21GMGFXOXVRMjkxYm5RNklFRk9TVTFCVkVsUFRsOVFVazlRSUNzZ1FVNUpUVUZVU1U5T1gwbFVSVkpCVkVsUFRsOURUMVZPVkY5TFJWbGNjbHh1ZlR0Y2NseHVYSEpjYm5aaGNpQkVSVlJGUTFSZlUxUkJSMGRGVWw5RFUxTmZVRkpQVUVWU1ZFbEZVeUE5SUh0Y2NseHVJQ0IwY21GdWMybDBhVzl1UkhWeVlYUnBiMjQ2SUNBZ0lDQWdWRkpCVGxOSlZFbFBUbDlFVlZKQlZFbFBUbDlRVWs5UUxGeHlYRzRnSUhSeVlXNXphWFJwYjI1RVpXeGhlVG9nSUNBZ0lDQWdJQ0JVVWtGT1UwbFVTVTlPWDBSRlRFRlpYMUJTVDFBc1hISmNiaUFnWVc1cGJXRjBhVzl1UkhWeVlYUnBiMjQ2SUNBZ0lDQWdJRUZPU1UxQlZFbFBUbDlFVlZKQlZFbFBUbDlRVWs5UUxGeHlYRzRnSUdGdWFXMWhkR2x2YmtSbGJHRjVPaUFnSUNBZ0lDQWdJQ0JCVGtsTlFWUkpUMDVmUkVWTVFWbGZVRkpQVUZ4eVhHNTlPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdaMlYwUTNOelMyVjVabkpoYldWRWRYSmhkR2x2YmxOMGVXeGxLR1IxY21GMGFXOXVLU0I3WEhKY2JpQWdjbVYwZFhKdUlGdEJUa2xOUVZSSlQwNWZSRlZTUVZSSlQwNWZVRkpQVUN3Z1pIVnlZWFJwYjI0Z0t5QW5jeWRkTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQm5aWFJEYzNORVpXeGhlVk4wZVd4bEtHUmxiR0Y1TENCcGMwdGxlV1p5WVcxbFFXNXBiV0YwYVc5dUtTQjdYSEpjYmlBZ2RtRnlJSEJ5YjNBZ1BTQnBjMHRsZVdaeVlXMWxRVzVwYldGMGFXOXVJRDhnUVU1SlRVRlVTVTlPWDBSRlRFRlpYMUJTVDFBZ09pQlVVa0ZPVTBsVVNVOU9YMFJGVEVGWlgxQlNUMUE3WEhKY2JpQWdjbVYwZFhKdUlGdHdjbTl3TENCa1pXeGhlU0FySUNkekoxMDdYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUdOdmJYQjFkR1ZEYzNOVGRIbHNaWE1vSkhkcGJtUnZkeXdnWld4bGJXVnVkQ3dnY0hKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUhaaGNpQnpkSGxzWlhNZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh5WEc0Z0lIWmhjaUJrWlhSbFkzUmxaRk4wZVd4bGN5QTlJQ1IzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGxiR1Z0Wlc1MEtTQjhmQ0I3ZlR0Y2NseHVJQ0JtYjNKRllXTm9LSEJ5YjNCbGNuUnBaWE1zSUdaMWJtTjBhVzl1S0dadmNtMWhiRk4wZVd4bFRtRnRaU3dnWVdOMGRXRnNVM1I1YkdWT1lXMWxLU0I3WEhKY2JpQWdJQ0IyWVhJZ2RtRnNJRDBnWkdWMFpXTjBaV1JUZEhsc1pYTmJabTl5YldGc1UzUjViR1ZPWVcxbFhUdGNjbHh1SUNBZ0lHbG1JQ2gyWVd3cElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUdNZ1BTQjJZV3d1WTJoaGNrRjBLREFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnYjI1c2VTQnVkVzFsY21sallXd3RZbUZ6WldRZ2RtRnNkV1Z6SUdoaGRtVWdZU0J1WldkaGRHbDJaU0J6YVdkdUlHOXlJR1JwWjJsMElHRnpJSFJvWlNCbWFYSnpkQ0IyWVd4MVpWeHlYRzRnSUNBZ0lDQnBaaUFvWXlBOVBUMGdKeTBuSUh4OElHTWdQVDA5SUNjckp5QjhmQ0JqSUQ0OUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllXd2dQU0J3WVhKelpVMWhlRlJwYldVb2RtRnNLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdMeThnWW5rZ2MyVjBkR2x1WnlCMGFHbHpJSFJ2SUc1MWJHd2dhVzRnZEdobElHVjJaVzUwSUhSb1lYUWdkR2hsSUdSbGJHRjVJR2x6SUc1dmRDQnpaWFFnYjNJZ2FYTWdjMlYwSUdScGNtVmpkR3g1SUdGeklEQmNjbHh1SUNBZ0lDQWdMeThnZEdobGJpQjNaU0JqWVc0Z2MzUnBiR3dnWVd4c2IzY2dabTl5SUc1bFoyRjBhWFpsSUhaaGJIVmxjeUIwYnlCaVpTQjFjMlZrSUd4aGRHVnlJRzl1SUdGdVpDQnViM1FnYldsemRHRnJaU0IwYUdselhISmNiaUFnSUNBZ0lDOHZJSFpoYkhWbElHWnZjaUJpWldsdVp5Qm5jbVZoZEdWeUlIUm9ZVzRnWVc1NUlHOTBhR1Z5SUc1bFoyRjBhWFpsSUhaaGJIVmxMbHh5WEc0Z0lDQWdJQ0JwWmlBb2RtRnNJRDA5UFNBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1Gc0lEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQnpkSGxzWlhOYllXTjBkV0ZzVTNSNWJHVk9ZVzFsWFNBOUlIWmhiRHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlLVHRjY2x4dVhISmNiaUFnY21WMGRYSnVJSE4wZVd4bGN6dGNjbHh1ZlZ4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnY0dGeWMyVk5ZWGhVYVcxbEtITjBjaWtnZTF4eVhHNGdJSFpoY2lCdFlYaFdZV3gxWlNBOUlEQTdYSEpjYmlBZ2RtRnlJSFpoYkhWbGN5QTlJSE4wY2k1emNHeHBkQ2d2WEZ4ektpeGNYSE1xTHlrN1hISmNiaUFnWm05eVJXRmphQ2gyWVd4MVpYTXNJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQXZMeUJwZENkeklHRnNkMkY1Y3lCellXWmxJSFJ2SUdOdmJuTnBaR1Z5SUc5dWJIa2djMlZqYjI1a0lIWmhiSFZsY3lCaGJtUWdiMjFwZENCZ2JYTmdJSFpoYkhWbGN5QnphVzVqWlZ4eVhHNGdJQ0FnTHk4Z1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNCM2FXeHNJR0ZzZDJGNWN5Qm9ZVzVrYkdVZ2RHaGxJR052Ym5abGNuTnBiMjRnWm05eUlIVnpYSEpjYmlBZ0lDQnBaaUFvZG1Gc2RXVXVZMmhoY2tGMEtIWmhiSFZsTG14bGJtZDBhQ0F0SURFcElEMDlJQ2R6SnlrZ2UxeHlYRzRnSUNBZ0lDQjJZV3gxWlNBOUlIWmhiSFZsTG5OMVluTjBjbWx1Wnlnd0xDQjJZV3gxWlM1c1pXNW5kR2dnTFNBeEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIWmhiSFZsSUQwZ2NHRnljMlZHYkc5aGRDaDJZV3gxWlNrZ2ZId2dNRHRjY2x4dUlDQWdJRzFoZUZaaGJIVmxJRDBnYldGNFZtRnNkV1VnUHlCTllYUm9MbTFoZUNoMllXeDFaU3dnYldGNFZtRnNkV1VwSURvZ2RtRnNkV1U3WEhKY2JpQWdmU2s3WEhKY2JpQWdjbVYwZFhKdUlHMWhlRlpoYkhWbE8xeHlYRzU5WEhKY2JseHlYRzVtZFc1amRHbHZiaUIwY25WMGFIbFVhVzFwYm1kV1lXeDFaU2gyWVd3cElIdGNjbHh1SUNCeVpYUjFjbTRnZG1Gc0lEMDlQU0F3SUh4OElIWmhiQ0FoUFNCdWRXeHNPMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCblpYUkRjM05VY21GdWMybDBhVzl1UkhWeVlYUnBiMjVUZEhsc1pTaGtkWEpoZEdsdmJpd2dZWEJ3YkhsUGJteDVSSFZ5WVhScGIyNHBJSHRjY2x4dUlDQjJZWElnYzNSNWJHVWdQU0JVVWtGT1UwbFVTVTlPWDFCU1QxQTdYSEpjYmlBZ2RtRnlJSFpoYkhWbElEMGdaSFZ5WVhScGIyNGdLeUFuY3ljN1hISmNiaUFnYVdZZ0tHRndjR3g1VDI1c2VVUjFjbUYwYVc5dUtTQjdYSEpjYmlBZ0lDQnpkSGxzWlNBclBTQkVWVkpCVkVsUFRsOUxSVms3WEhKY2JpQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lIWmhiSFZsSUNzOUlDY2diR2x1WldGeUlHRnNiQ2M3WEhKY2JpQWdmVnh5WEc0Z0lISmxkSFZ5YmlCYmMzUjViR1VzSUhaaGJIVmxYVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z1kzSmxZWFJsVEc5allXeERZV05vWlV4dmIydDFjQ2dwSUh0Y2NseHVJQ0IyWVhJZ1kyRmphR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHlYRzRnSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0JtYkhWemFEb2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUdOaFkyaGxJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdZMjkxYm5RNklHWjFibU4wYVc5dUtHdGxlU2tnZTF4eVhHNGdJQ0FnSUNCMllYSWdaVzUwY25rZ1BTQmpZV05vWlZ0clpYbGRPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaVzUwY25rZ1B5QmxiblJ5ZVM1MGIzUmhiQ0E2SURBN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b2EyVjVLU0I3WEhKY2JpQWdJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlHTmhZMmhsVzJ0bGVWMDdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQmxiblJ5ZVNBbUppQmxiblJ5ZVM1MllXeDFaVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ2NIVjBPaUJtZFc1amRHbHZiaWhyWlhrc0lIWmhiSFZsS1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2doWTJGamFHVmJhMlY1WFNrZ2UxeHlYRzRnSUNBZ0lDQWdJR05oWTJobFcydGxlVjBnUFNCN0lIUnZkR0ZzT2lBeExDQjJZV3gxWlRvZ2RtRnNkV1VnZlR0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQmpZV05vWlZ0clpYbGRMblJ2ZEdGc0t5czdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQjlPMXh5WEc1OVhISmNibHh5WEc0dkx5QjNaU0JrYnlCdWIzUWdjbVZoYzNOcFoyNGdZVzRnWVd4eVpXRmtlU0J3Y21WelpXNTBJSE4wZVd4bElIWmhiSFZsSUhOcGJtTmxYSEpjYmk4dklHbG1JSGRsSUdSbGRHVmpkQ0IwYUdVZ2MzUjViR1VnY0hKdmNHVnlkSGtnZG1Gc2RXVWdZV2RoYVc0Z2QyVWdiV0Y1SUdKbFhISmNiaTh2SUdSbGRHVmpkR2x1WnlCemRIbHNaWE1nZEdoaGRDQjNaWEpsSUdGa1pHVmtJSFpwWVNCMGFHVWdZR1p5YjIxZ0lITjBlV3hsY3k1Y2NseHVMeThnVjJVZ2JXRnJaU0IxYzJVZ2IyWWdZR2x6UkdWbWFXNWxaR0FnYUdWeVpTQnphVzVqWlNCaGJpQmxiWEIwZVNCemRISnBibWRjY2x4dUx5OGdiM0lnYm5Wc2JDQjJZV3gxWlNBb2QyaHBZMmdnYVhNZ2QyaGhkQ0JuWlhSUWNtOXdaWEowZVZaaGJIVmxJSGRwYkd3Z2NtVjBkWEp1WEhKY2JpOHZJR1p2Y2lCaElHNXZiaTFsZUdsemRHbHVaeUJ6ZEhsc1pTa2dkMmxzYkNCemRHbHNiQ0JpWlNCdFlYSnJaV1FnWVhNZ1lTQjJZV3hwWkZ4eVhHNHZMeUIyWVd4MVpTQm1iM0lnZEdobElITjBlV3hsSUNoaElHWmhiSE41SUhaaGJIVmxJR2x0Y0d4cFpYTWdkR2hoZENCMGFHVWdjM1I1YkdWY2NseHVMeThnYVhNZ2RHOGdZbVVnY21WdGIzWmxaQ0JoZENCMGFHVWdaVzVrSUc5bUlIUm9aU0JoYm1sdFlYUnBiMjRwTGlCSlppQjNaU0JvWVdRZ1lTQnphVzF3YkdWY2NseHVMeThnWENKUFVsd2lJSE4wWVhSbGJXVnVkQ0IwYUdWdUlHbDBJSGR2ZFd4a0lHNXZkQ0JpWlNCbGJtOTFaMmdnZEc4Z1kyRjBZMmdnZEdoaGRDNWNjbHh1Wm5WdVkzUnBiMjRnY21WbmFYTjBaWEpTWlhOMGIzSmhZbXhsVTNSNWJHVnpLR0poWTJ0MWNDd2dibTlrWlN3Z2NISnZjR1Z5ZEdsbGN5a2dlMXh5WEc0Z0lHWnZja1ZoWTJnb2NISnZjR1Z5ZEdsbGN5d2dablZ1WTNScGIyNG9jSEp2Y0NrZ2UxeHlYRzRnSUNBZ1ltRmphM1Z3VzNCeWIzQmRJRDBnYVhORVpXWnBibVZrS0dKaFkydDFjRnR3Y205d1hTbGNjbHh1SUNBZ0lDQWdJQ0EvSUdKaFkydDFjRnR3Y205d1hWeHlYRzRnSUNBZ0lDQWdJRG9nYm05a1pTNXpkSGxzWlM1blpYUlFjbTl3WlhKMGVWWmhiSFZsS0hCeWIzQXBPMXh5WEc0Z0lIMHBPMXh5WEc1OVhISmNibHh5WEc1MllYSWdKRUZ1YVcxaGRHVkRjM05RY205MmFXUmxjaUE5SUZzbkpHRnVhVzFoZEdWUWNtOTJhV1JsY2ljc0lHWjFibU4wYVc5dUtDUmhibWx0WVhSbFVISnZkbWxrWlhJcElIdGNjbHh1SUNCMllYSWdaMk56VEc5dmEzVndJRDBnWTNKbFlYUmxURzlqWVd4RFlXTm9aVXh2YjJ0MWNDZ3BPMXh5WEc0Z0lIWmhjaUJuWTNOVGRHRm5aMlZ5VEc5dmEzVndJRDBnWTNKbFlYUmxURzlqWVd4RFlXTm9aVXh2YjJ0MWNDZ3BPMXh5WEc1Y2NseHVJQ0IwYUdsekxpUm5aWFFnUFNCYkp5UjNhVzVrYjNjbkxDQW5KQ1JxY1V4cGRHVW5MQ0FuSkNSQmJtbHRZWFJsVW5WdWJtVnlKeXdnSnlSMGFXMWxiM1YwSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5UWtabTl5WTJWU1pXWnNiM2NuTENBbkpITnVhV1ptWlhJbkxDQW5KQ1J5UVVaVFkyaGxaSFZzWlhJbkxDQW5KQ1JoYm1sdFlYUmxVWFZsZFdVbkxGeHlYRzRnSUNBZ0lDQWdablZ1WTNScGIyNG9KSGRwYm1SdmR5d2dJQ0FrSkdweFRHbDBaU3dnSUNBa0pFRnVhVzFoZEdWU2RXNXVaWElzSUNBZ0pIUnBiV1Z2ZFhRc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtKR1p2Y21ObFVtVm1iRzkzTENBZ0lDUnpibWxtWm1WeUxDQWdJQ1FrY2tGR1UyTm9aV1IxYkdWeUxDQWtKR0Z1YVcxaGRHVlJkV1YxWlNrZ2UxeHlYRzVjY2x4dUlDQWdJSFpoY2lCaGNIQnNlVUZ1YVcxaGRHbHZia05zWVhOelpYTWdQU0JoY0hCc2VVRnVhVzFoZEdsdmJrTnNZWE56WlhOR1lXTjBiM0o1S0NRa2FuRk1hWFJsS1R0Y2NseHVYSEpjYmlBZ0lDQjJZWElnY0dGeVpXNTBRMjkxYm5SbGNpQTlJREE3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJuWTNOSVlYTm9SbTRvYm05a1pTd2daWGgwY21GRGJHRnpjMlZ6S1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJMUlZrZ1BTQmNJaVFrYm1kQmJtbHRZWFJsVUdGeVpXNTBTMlY1WENJN1hISmNiaUFnSUNBZ0lIWmhjaUJ3WVhKbGJuUk9iMlJsSUQwZ2JtOWtaUzV3WVhKbGJuUk9iMlJsTzF4eVhHNGdJQ0FnSUNCMllYSWdjR0Z5Wlc1MFNVUWdQU0J3WVhKbGJuUk9iMlJsVzB0RldWMGdmSHdnS0hCaGNtVnVkRTV2WkdWYlMwVlpYU0E5SUNzcmNHRnlaVzUwUTI5MWJuUmxjaWs3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ3WVhKbGJuUkpSQ0FySUNjdEp5QXJJRzV2WkdVdVoyVjBRWFIwY21saWRYUmxLQ2RqYkdGemN5Y3BJQ3NnSnkwbklDc2daWGgwY21GRGJHRnpjMlZ6TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlHTnZiWEIxZEdWRFlXTm9aV1JEYzNOVGRIbHNaWE1vYm05a1pTd2dZMnhoYzNOT1lXMWxMQ0JqWVdOb1pVdGxlU3dnY0hKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnZEdsdGFXNW5jeUE5SUdkamMweHZiMnQxY0M1blpYUW9ZMkZqYUdWTFpYa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLQ0YwYVcxcGJtZHpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHbHRhVzVuY3lBOUlHTnZiWEIxZEdWRGMzTlRkSGxzWlhNb0pIZHBibVJ2ZHl3Z2JtOWtaU3dnY0hKdmNHVnlkR2xsY3lrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hScGJXbHVaM011WVc1cGJXRjBhVzl1U1hSbGNtRjBhVzl1UTI5MWJuUWdQVDA5SUNkcGJtWnBibWwwWlNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhScGJXbHVaM011WVc1cGJXRjBhVzl1U1hSbGNtRjBhVzl1UTI5MWJuUWdQU0F4TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdkMlVnYTJWbGNDQndkWFIwYVc1bklIUm9hWE1nYVc0Z2JYVnNkR2x3YkdVZ2RHbHRaWE1nWlhabGJpQjBhRzkxWjJnZ2RHaGxJSFpoYkhWbElHRnVaQ0IwYUdVZ1kyRmphR1ZMWlhrZ1lYSmxJSFJvWlNCellXMWxYSEpjYmlBZ0lDQWdJQzh2SUdKbFkyRjFjMlVnZDJVbmNtVWdhMlZsY0dsdVp5QmhiaUJwYm5SbGNtNWhiQ0IwWVd4c2VTQnZaaUJvYjNjZ2JXRnVlU0JrZFhCc2FXTmhkR1VnWVc1cGJXRjBhVzl1Y3lCaGNtVWdaR1YwWldOMFpXUXVYSEpjYmlBZ0lDQWdJR2RqYzB4dmIydDFjQzV3ZFhRb1kyRmphR1ZMWlhrc0lIUnBiV2x1WjNNcE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHbHRhVzVuY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmpiMjF3ZFhSbFEyRmphR1ZrUTNOelUzUmhaMmRsY2xOMGVXeGxjeWh1YjJSbExDQmpiR0Z6YzA1aGJXVXNJR05oWTJobFMyVjVMQ0J3Y205d1pYSjBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ6ZEdGbloyVnlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdhV1lnZDJVZ2FHRjJaU0J2Ym1VZ2IzSWdiVzl5WlNCbGVHbHpkR2x1WnlCdFlYUmphR1Z6SUc5bUlHMWhkR05vYVc1bklHVnNaVzFsYm5SelhISmNiaUFnSUNBZ0lDOHZJR052Ym5SaGFXNXBibWNnZEdobElITmhiV1VnY0dGeVpXNTBJQ3NnUTFOVElITjBlV3hsY3lBb2QyaHBZMmdnYVhNZ2FHOTNJR05oWTJobFMyVjVJSGR2Y210ektWeHlYRzRnSUNBZ0lDQXZMeUIwYUdWdUlITjBZV2RuWlhKcGJtY2dhWE1nY0c5emMybGliR1ZjY2x4dUlDQWdJQ0FnYVdZZ0tHZGpjMHh2YjJ0MWNDNWpiM1Z1ZENoallXTm9aVXRsZVNrZ1BpQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2MzUmhaMmRsY2lBOUlHZGpjMU4wWVdkblpYSk1iMjlyZFhBdVoyVjBLR05oWTJobFMyVjVLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NGemRHRm5aMlZ5S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2MzUmhaMmRsY2tOc1lYTnpUbUZ0WlNBOUlIQmxibVJEYkdGemMyVnpLR05zWVhOelRtRnRaU3dnSnkxemRHRm5aMlZ5SnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0pDUnFjVXhwZEdVdVlXUmtRMnhoYzNNb2JtOWtaU3dnYzNSaFoyZGxja05zWVhOelRtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYzNSaFoyZGxjaUE5SUdOdmJYQjFkR1ZEYzNOVGRIbHNaWE1vSkhkcGJtUnZkeXdnYm05a1pTd2djSEp2Y0dWeWRHbGxjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ptOXlZMlVnZEdobElHTnZiblpsY25OcGIyNGdiMllnWVNCdWRXeHNJSFpoYkhWbElIUnZJSHBsY204Z2FXNWpZWE5sSUc1dmRDQnpaWFJjY2x4dUlDQWdJQ0FnSUNBZ0lITjBZV2RuWlhJdVlXNXBiV0YwYVc5dVJIVnlZWFJwYjI0Z1BTQk5ZWFJvTG0xaGVDaHpkR0ZuWjJWeUxtRnVhVzFoZEdsdmJrUjFjbUYwYVc5dUxDQXdLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lITjBZV2RuWlhJdWRISmhibk5wZEdsdmJrUjFjbUYwYVc5dUlEMGdUV0YwYUM1dFlYZ29jM1JoWjJkbGNpNTBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNHNJREFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNRa2FuRk1hWFJsTG5KbGJXOTJaVU5zWVhOektHNXZaR1VzSUhOMFlXZG5aWEpEYkdGemMwNWhiV1VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdkamMxTjBZV2RuWlhKTWIyOXJkWEF1Y0hWMEtHTmhZMmhsUzJWNUxDQnpkR0ZuWjJWeUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnpkR0ZuWjJWeUlIeDhJSHQ5TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIWmhjaUJqWVc1alpXeE1ZWE4wVWtGR1VtVnhkV1Z6ZER0Y2NseHVJQ0FnSUhaaGNpQnlZV1pYWVdsMFVYVmxkV1VnUFNCYlhUdGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlIZGhhWFJWYm5ScGJGRjFhV1YwS0dOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBZ0lISmhabGRoYVhSUmRXVjFaUzV3ZFhOb0tHTmhiR3hpWVdOcktUdGNjbHh1SUNBZ0lDQWdKQ1J5UVVaVFkyaGxaSFZzWlhJdWQyRnBkRlZ1ZEdsc1VYVnBaWFFvWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdaMk56VEc5dmEzVndMbVpzZFhOb0tDazdYSEpjYmlBZ0lDQWdJQ0FnWjJOelUzUmhaMmRsY2t4dmIydDFjQzVtYkhWemFDZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJFVHlCT1QxUWdVa1ZOVDFaRklGUklTVk1nVEVsT1JTQlBVaUJTUlVaQlExUlBVaUJQVlZRZ1ZFaEZJR0J3WVdkbFYybGtkR2hnSUhaaGNtbGhZbXhsTGx4eVhHNGdJQ0FnSUNBZ0lDOHZJRkJNUlVGVFJTQkZXRUZOU1U1RklGUklSU0JnSkNSbWIzSmpaVkpsWm14dmQyQWdjMlZ5ZG1salpTQjBieUIxYm1SbGNuTjBZVzVrSUhkb2VTNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRm5aVmRwWkhSb0lEMGdKQ1JtYjNKalpWSmxabXh2ZHlncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QjNaU0IxYzJVZ1lTQm1iM0lnYkc5dmNDQjBieUJsYm5OMWNtVWdkR2hoZENCcFppQjBhR1VnY1hWbGRXVWdhWE1nWTJoaGJtZGxaRnh5WEc0Z0lDQWdJQ0FnSUM4dklHUjFjbWx1WnlCMGFHbHpJR3h2YjNCcGJtY2dkR2hsYmlCcGRDQjNhV3hzSUdOdmJuTnBaR1Z5SUc1bGR5QnlaWEYxWlhOMGMxeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY21GbVYyRnBkRkYxWlhWbExteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlZV1pYWVdsMFVYVmxkV1ZiYVYwb2NHRm5aVmRwWkhSb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtRm1WMkZwZEZGMVpYVmxMbXhsYm1kMGFDQTlJREE3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJR052YlhCMWRHVlVhVzFwYm1kektHNXZaR1VzSUdOc1lYTnpUbUZ0WlN3Z1kyRmphR1ZMWlhrcElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUhScGJXbHVaM01nUFNCamIyMXdkWFJsUTJGamFHVmtRM056VTNSNWJHVnpLRzV2WkdVc0lHTnNZWE56VG1GdFpTd2dZMkZqYUdWTFpYa3NJRVJGVkVWRFZGOURVMU5mVUZKUFVFVlNWRWxGVXlrN1hISmNiaUFnSUNBZ0lIWmhjaUJoUkNBOUlIUnBiV2x1WjNNdVlXNXBiV0YwYVc5dVJHVnNZWGs3WEhKY2JpQWdJQ0FnSUhaaGNpQjBSQ0E5SUhScGJXbHVaM011ZEhKaGJuTnBkR2x2YmtSbGJHRjVPMXh5WEc0Z0lDQWdJQ0IwYVcxcGJtZHpMbTFoZUVSbGJHRjVJRDBnWVVRZ0ppWWdkRVJjY2x4dUlDQWdJQ0FnSUNBZ0lEOGdUV0YwYUM1dFlYZ29ZVVFzSUhSRUtWeHlYRzRnSUNBZ0lDQWdJQ0FnT2lBb1lVUWdmSHdnZEVRcE8xeHlYRzRnSUNBZ0lDQjBhVzFwYm1kekxtMWhlRVIxY21GMGFXOXVJRDBnVFdGMGFDNXRZWGdvWEhKY2JpQWdJQ0FnSUNBZ0lDQjBhVzFwYm1kekxtRnVhVzFoZEdsdmJrUjFjbUYwYVc5dUlDb2dkR2x0YVc1bmN5NWhibWx0WVhScGIyNUpkR1Z5WVhScGIyNURiM1Z1ZEN4Y2NseHVJQ0FnSUNBZ0lDQWdJSFJwYldsdVozTXVkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVLVHRjY2x4dVhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFXMXBibWR6TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGJtbDBLR1ZzWlcxbGJuUXNJR2x1YVhScFlXeFBjSFJwYjI1ektTQjdYSEpjYmlBZ0lDQWdJQzh2SUdGc2JDQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUlHWjFibU4wYVc5dWN5QnphRzkxYkdRZ1kzSmxZWFJsWEhKY2JpQWdJQ0FnSUM4dklHRWdZMjl3ZVNCdlppQjBhR1VnYjNCMGFXOXVjeUJrWVhSaExDQm9iM2RsZG1WeUxDQnBaaUJoWEhKY2JpQWdJQ0FnSUM4dklIQmhjbVZ1ZENCelpYSjJhV05sSUdoaGN5QmhiSEpsWVdSNUlHTnlaV0YwWldRZ1lTQmpiM0I1SUhSb1pXNWNjbHh1SUNBZ0lDQWdMeThnZDJVZ2MyaHZkV3hrSUhOMGFXTnJJSFJ2SUhWemFXNW5JSFJvWVhSY2NseHVJQ0FnSUNBZ2RtRnlJRzl3ZEdsdmJuTWdQU0JwYm1sMGFXRnNUM0IwYVc5dWN5QjhmQ0I3ZlR0Y2NseHVJQ0FnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpMaVFrY0hKbGNHRnlaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnZjSFJwYjI1eklEMGdjSEpsY0dGeVpVRnVhVzFoZEdsdmJrOXdkR2x2Ym5Nb1kyOXdlU2h2Y0hScGIyNXpLU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCeVpYTjBiM0psVTNSNWJHVnpJRDBnZTMwN1hISmNiaUFnSUNBZ0lIWmhjaUJ1YjJSbElEMGdaMlYwUkc5dFRtOWtaU2hsYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnYVdZZ0tDRnViMlJsWEhKY2JpQWdJQ0FnSUNBZ0lDQjhmQ0FoYm05a1pTNXdZWEpsYm5ST2IyUmxYSEpjYmlBZ0lDQWdJQ0FnSUNCOGZDQWhKQ1JoYm1sdFlYUmxVWFZsZFdVdVpXNWhZbXhsWkNncEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05zYjNObFFXNWtVbVYwZFhKdVRtOXZjRUZ1YVcxaGRHOXlLQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCMFpXMXdiM0poY25sVGRIbHNaWE1nUFNCYlhUdGNjbHh1SUNBZ0lDQWdkbUZ5SUdOc1lYTnpaWE1nUFNCbGJHVnRaVzUwTG1GMGRISW9KMk5zWVhOekp5azdYSEpjYmlBZ0lDQWdJSFpoY2lCemRIbHNaWE1nUFNCd1lXTnJZV2RsVTNSNWJHVnpLRzl3ZEdsdmJuTXBPMXh5WEc0Z0lDQWdJQ0IyWVhJZ1lXNXBiV0YwYVc5dVEyeHZjMlZrTzF4eVhHNGdJQ0FnSUNCMllYSWdZVzVwYldGMGFXOXVVR0YxYzJWa08xeHlYRzRnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1UTI5dGNHeGxkR1ZrTzF4eVhHNGdJQ0FnSUNCMllYSWdjblZ1Ym1WeU8xeHlYRzRnSUNBZ0lDQjJZWElnY25WdWJtVnlTRzl6ZER0Y2NseHVJQ0FnSUNBZ2RtRnlJRzFoZUVSbGJHRjVPMXh5WEc0Z0lDQWdJQ0IyWVhJZ2JXRjRSR1ZzWVhsVWFXMWxPMXh5WEc0Z0lDQWdJQ0IyWVhJZ2JXRjRSSFZ5WVhScGIyNDdYSEpjYmlBZ0lDQWdJSFpoY2lCdFlYaEVkWEpoZEdsdmJsUnBiV1U3WEhKY2JpQWdJQ0FnSUhaaGNpQnpkR0Z5ZEZScGJXVTdYSEpjYmlBZ0lDQWdJSFpoY2lCbGRtVnVkSE1nUFNCYlhUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtUjFjbUYwYVc5dUlEMDlQU0F3SUh4OElDZ2hKSE51YVdabVpYSXVZVzVwYldGMGFXOXVjeUFtSmlBaEpITnVhV1ptWlhJdWRISmhibk5wZEdsdmJuTXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOc2IzTmxRVzVrVW1WMGRYSnVUbTl2Y0VGdWFXMWhkRzl5S0NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhaaGNpQnRaWFJvYjJRZ1BTQnZjSFJwYjI1ekxtVjJaVzUwSUNZbUlHbHpRWEp5WVhrb2IzQjBhVzl1Y3k1bGRtVnVkQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJ2Y0hScGIyNXpMbVYyWlc1MExtcHZhVzRvSnlBbktWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBNklHOXdkR2x2Ym5NdVpYWmxiblE3WEhKY2JseHlYRzRnSUNBZ0lDQjJZWElnYVhOVGRISjFZM1IxY21Gc0lEMGdiV1YwYUc5a0lDWW1JRzl3ZEdsdmJuTXVjM1J5ZFdOMGRYSmhiRHRjY2x4dUlDQWdJQ0FnZG1GeUlITjBjblZqZEhWeVlXeERiR0Z6YzA1aGJXVWdQU0FuSnp0Y2NseHVJQ0FnSUNBZ2RtRnlJR0ZrWkZKbGJXOTJaVU5zWVhOelRtRnRaU0E5SUNjbk8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHbHpVM1J5ZFdOMGRYSmhiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lITjBjblZqZEhWeVlXeERiR0Z6YzA1aGJXVWdQU0J3Wlc1a1EyeGhjM05sY3lodFpYUm9iMlFzSUVWV1JVNVVYME5NUVZOVFgxQlNSVVpKV0N3Z2RISjFaU2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXVjBhRzlrS1NCN1hISmNiaUFnSUNBZ0lDQWdjM1J5ZFdOMGRYSmhiRU5zWVhOelRtRnRaU0E5SUcxbGRHaHZaRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WVdSa1EyeGhjM01wSUh0Y2NseHVJQ0FnSUNBZ0lDQmhaR1JTWlcxdmRtVkRiR0Z6YzA1aGJXVWdLejBnY0dWdVpFTnNZWE56WlhNb2IzQjBhVzl1Y3k1aFpHUkRiR0Z6Y3l3Z1FVUkVYME5NUVZOVFgxTlZSa1pKV0NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuSmxiVzkyWlVOc1lYTnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR0ZrWkZKbGJXOTJaVU5zWVhOelRtRnRaUzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHRmtaRkpsYlc5MlpVTnNZWE56VG1GdFpTQXJQU0FuSUNjN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdGa1pGSmxiVzkyWlVOc1lYTnpUbUZ0WlNBclBTQndaVzVrUTJ4aGMzTmxjeWh2Y0hScGIyNXpMbkpsYlc5MlpVTnNZWE56TENCU1JVMVBWa1ZmUTB4QlUxTmZVMVZHUmtsWUtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdkR2hsY21VZ2JXRjVJR0psSUdFZ2MybDBkV0YwYVc5dUlIZG9aWEpsSUdFZ2MzUnlkV04wZFhKaGJDQmhibWx0WVhScGIyNGdhWE1nWTI5dFltbHVaV1FnZEc5blpYUm9aWEpjY2x4dUlDQWdJQ0FnTHk4Z2QybDBhQ0JEVTFNZ1kyeGhjM05sY3lCMGFHRjBJRzVsWldRZ2RHOGdjbVZ6YjJ4MlpTQmlaV1p2Y21VZ2RHaGxJR0Z1YVcxaGRHbHZiaUJwY3lCamIyMXdkWFJsWkM1Y2NseHVJQ0FnSUNBZ0x5OGdTRzkzWlhabGNpQjBhR2x6SUcxbFlXNXpJSFJvWVhRZ2RHaGxjbVVnYVhNZ2JtOGdaWGh3YkdsamFYUWdRMU5USUdOdlpHVWdkRzhnWW14dlkyc2dkR2hsSUdGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnSUNBdkx5Qm1jbTl0SUdoaGNIQmxibWx1WnlBb1lua2djMlYwZEdsdVp5QXdjeUJ1YjI1bElHbHVJSFJvWlNCamJHRnpjeUJ1WVcxbEtTNGdTV1lnZEdocGN5QnBjeUIwYUdVZ1kyRnpaVnh5WEc0Z0lDQWdJQ0F2THlCM1pTQnVaV1ZrSUhSdklHRndjR3g1SUhSb1pTQmpiR0Z6YzJWeklHSmxabTl5WlNCMGFHVWdabWx5YzNRZ2NrRkdJSE52SUhkbElHdHViM2NnZEc4Z1kyOXVkR2x1ZFdVZ2FXWmNjbHh1SUNBZ0lDQWdMeThnZEdobGNtVWdZV04wZFdGc2JIa2dhWE1nWVNCa1pYUmxZM1JsWkNCMGNtRnVjMmwwYVc5dUlHOXlJR3RsZVdaeVlXMWxJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1aGNIQnNlVU5zWVhOelpYTkZZWEpzZVNBbUppQmhaR1JTWlcxdmRtVkRiR0Z6YzA1aGJXVXViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWVhCd2JIbEJibWx0WVhScGIyNURiR0Z6YzJWektHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCMllYSWdjSEpsY0dGeVlYUnBiMjVEYkdGemMyVnpJRDBnVzNOMGNuVmpkSFZ5WVd4RGJHRnpjMDVoYldVc0lHRmtaRkpsYlc5MlpVTnNZWE56VG1GdFpWMHVhbTlwYmlnbklDY3BMblJ5YVcwb0tUdGNjbHh1SUNBZ0lDQWdkbUZ5SUdaMWJHeERiR0Z6YzA1aGJXVWdQU0JqYkdGemMyVnpJQ3NnSnlBbklDc2djSEpsY0dGeVlYUnBiMjVEYkdGemMyVnpPMXh5WEc0Z0lDQWdJQ0IyWVhJZ1lXTjBhWFpsUTJ4aGMzTmxjeUE5SUhCbGJtUkRiR0Z6YzJWektIQnlaWEJoY21GMGFXOXVRMnhoYzNObGN5d2dRVU5VU1ZaRlgwTk1RVk5UWDFOVlJrWkpXQ2s3WEhKY2JpQWdJQ0FnSUhaaGNpQm9ZWE5VYjFOMGVXeGxjeUE5SUhOMGVXeGxjeTUwYnlBbUppQlBZbXBsWTNRdWEyVjVjeWh6ZEhsc1pYTXVkRzhwTG14bGJtZDBhQ0ErSURBN1hISmNiaUFnSUNBZ0lIWmhjaUJqYjI1MFlXbHVjMHRsZVdaeVlXMWxRVzVwYldGMGFXOXVJRDBnS0c5d2RHbHZibk11YTJWNVpuSmhiV1ZUZEhsc1pTQjhmQ0FuSnlrdWJHVnVaM1JvSUQ0Z01EdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklIUm9aWEpsSUdseklHNXZJSGRoZVNCM1pTQmpZVzRnZEhKcFoyZGxjaUJoYmlCaGJtbHRZWFJwYjI0Z2FXWWdibThnYzNSNWJHVnpJR0Z1WkZ4eVhHNGdJQ0FnSUNBdkx5QnVieUJqYkdGemMyVnpJR0Z5WlNCaVpXbHVaeUJoY0hCc2FXVmtJSGRvYVdOb0lIZHZkV3hrSUhSb1pXNGdkSEpwWjJkbGNpQmhJSFJ5WVc1emFYUnBiMjRzWEhKY2JpQWdJQ0FnSUM4dklIVnViR1Z6Y3lCMGFHVnlaU0JoSUdseklISmhkeUJyWlhsbWNtRnRaU0IyWVd4MVpTQjBhR0YwSUdseklHRndjR3hwWldRZ2RHOGdkR2hsSUdWc1pXMWxiblF1WEhKY2JpQWdJQ0FnSUdsbUlDZ2hZMjl1ZEdGcGJuTkxaWGxtY21GdFpVRnVhVzFoZEdsdmJseHlYRzRnSUNBZ0lDQWdJQ0FnSUNZbUlDRm9ZWE5VYjFOMGVXeGxjMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDWW1JQ0Z3Y21Wd1lYSmhkR2x2YmtOc1lYTnpaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeHZjMlZCYm1SU1pYUjFjbTVPYjI5d1FXNXBiV0YwYjNJb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2RtRnlJR05oWTJobFMyVjVMQ0J6ZEdGbloyVnlPMXh5WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1emRHRm5aMlZ5SUQ0Z01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpkR0ZuWjJWeVZtRnNJRDBnY0dGeWMyVkdiRzloZENodmNIUnBiMjV6TG5OMFlXZG5aWElwTzF4eVhHNGdJQ0FnSUNBZ0lITjBZV2RuWlhJZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGNtRnVjMmwwYVc5dVJHVnNZWGs2SUhOMFlXZG5aWEpXWVd3c1hISmNiaUFnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVFWld4aGVUb2djM1JoWjJkbGNsWmhiQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lIUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJqb2dNQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrUjFjbUYwYVc5dU9pQXdYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQmpZV05vWlV0bGVTQTlJR2RqYzBoaGMyaEdiaWh1YjJSbExDQm1kV3hzUTJ4aGMzTk9ZVzFsS1R0Y2NseHVJQ0FnSUNBZ0lDQnpkR0ZuWjJWeUlEMGdZMjl0Y0hWMFpVTmhZMmhsWkVOemMxTjBZV2RuWlhKVGRIbHNaWE1vYm05a1pTd2djSEpsY0dGeVlYUnBiMjVEYkdGemMyVnpMQ0JqWVdOb1pVdGxlU3dnUkVWVVJVTlVYMU5VUVVkSFJWSmZRMU5UWDFCU1QxQkZVbFJKUlZNcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9JVzl3ZEdsdmJuTXVKQ1J6YTJsd1VISmxjR0Z5WVhScGIyNURiR0Z6YzJWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSkNScWNVeHBkR1V1WVdSa1EyeGhjM01vWld4bGJXVnVkQ3dnY0hKbGNHRnlZWFJwYjI1RGJHRnpjMlZ6S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnZG1GeUlHRndjR3g1VDI1c2VVUjFjbUYwYVc5dU8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWRISmhibk5wZEdsdmJsTjBlV3hsS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhSeVlXNXphWFJwYjI1VGRIbHNaU0E5SUZ0VVVrRk9VMGxVU1U5T1gxQlNUMUFzSUc5d2RHbHZibk11ZEhKaGJuTnBkR2x2YmxOMGVXeGxYVHRjY2x4dUlDQWdJQ0FnSUNCaGNIQnNlVWx1YkdsdVpWTjBlV3hsS0c1dlpHVXNJSFJ5WVc1emFYUnBiMjVUZEhsc1pTazdYSEpjYmlBZ0lDQWdJQ0FnZEdWdGNHOXlZWEo1VTNSNWJHVnpMbkIxYzJnb2RISmhibk5wZEdsdmJsTjBlV3hsS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVpIVnlZWFJwYjI0Z1BqMGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHRndjR3g1VDI1c2VVUjFjbUYwYVc5dUlEMGdibTlrWlM1emRIbHNaVnRVVWtGT1UwbFVTVTlPWDFCU1QxQmRMbXhsYm1kMGFDQStJREE3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1IxY21GMGFXOXVVM1I1YkdVZ1BTQm5aWFJEYzNOVWNtRnVjMmwwYVc5dVJIVnlZWFJwYjI1VGRIbHNaU2h2Y0hScGIyNXpMbVIxY21GMGFXOXVMQ0JoY0hCc2VVOXViSGxFZFhKaGRHbHZiaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUhkbElITmxkQ0IwYUdVZ1pIVnlZWFJwYjI0Z2MyOGdkR2hoZENCcGRDQjNhV3hzSUdKbElIQnBZMnRsWkNCMWNDQmllU0JuWlhSRGIyMXdkWFJsWkZOMGVXeGxJR3hoZEdWeVhISmNiaUFnSUNBZ0lDQWdZWEJ3YkhsSmJteHBibVZUZEhsc1pTaHViMlJsTENCa2RYSmhkR2x2YmxOMGVXeGxLVHRjY2x4dUlDQWdJQ0FnSUNCMFpXMXdiM0poY25sVGRIbHNaWE11Y0hWemFDaGtkWEpoZEdsdmJsTjBlV3hsS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWEyVjVabkpoYldWVGRIbHNaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhsbWNtRnRaVk4wZVd4bElEMGdXMEZPU1UxQlZFbFBUbDlRVWs5UUxDQnZjSFJwYjI1ekxtdGxlV1p5WVcxbFUzUjViR1ZkTzF4eVhHNGdJQ0FnSUNBZ0lHRndjR3g1U1c1c2FXNWxVM1I1YkdVb2JtOWtaU3dnYTJWNVpuSmhiV1ZUZEhsc1pTazdYSEpjYmlBZ0lDQWdJQ0FnZEdWdGNHOXlZWEo1VTNSNWJHVnpMbkIxYzJnb2EyVjVabkpoYldWVGRIbHNaU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCcGRHVnRTVzVrWlhnZ1BTQnpkR0ZuWjJWeVhISmNiaUFnSUNBZ0lDQWdJQ0EvSUc5d2RHbHZibk11YzNSaFoyZGxja2x1WkdWNElENDlJREJjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUc5d2RHbHZibk11YzNSaFoyZGxja2x1WkdWNFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ09pQm5ZM05NYjI5cmRYQXVZMjkxYm5Rb1kyRmphR1ZMWlhrcFhISmNiaUFnSUNBZ0lDQWdJQ0E2SURBN1hISmNibHh5WEc0Z0lDQWdJQ0IyWVhJZ2FYTkdhWEp6ZENBOUlHbDBaVzFKYm1SbGVDQTlQVDBnTUR0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUhSb2FYTWdhWE1nWVNCd2NtVXRaVzF3ZEdsMlpTQjNZWGtnYjJZZ1ptOXlZMmx1WnlCMGFHVWdjMlYwZFhBZ1kyeGhjM05sY3lCMGJ5QmlaU0JoWkdSbFpDQmhibVFnWVhCd2JHbGxaQ0JKVGxOVVFVNVVURmxjY2x4dUlDQWdJQ0FnTHk4Z2QybDBhRzkxZENCallYVnphVzVuSUdGdWVTQmpiMjFpYVc1aGRHbHZiaUJ2WmlCMGNtRnVjMmwwYVc5dWN5QjBieUJyYVdOcklHbHVMaUJDZVNCaFpHUnBibWNnWVNCdVpXZGhkR2wyWlNCa1pXeGhlU0IyWVd4MVpWeHlYRzRnSUNBZ0lDQXZMeUJwZENCbWIzSmpaWE1nZEdobElITmxkSFZ3SUdOc1lYTnpKeUIwY21GdWMybDBhVzl1SUhSdklHVnVaQ0JwYlcxbFpHbGhkR1ZzZVM0Z1YyVWdiR0YwWlhJZ2RHaGxiaUJ5WlcxdmRtVWdkR2hsSUc1bFoyRjBhWFpsWEhKY2JpQWdJQ0FnSUM4dklIUnlZVzV6YVhScGIyNGdaR1ZzWVhrZ2RHOGdZV3hzYjNjZ1ptOXlJSFJvWlNCMGNtRnVjMmwwYVc5dUlIUnZJRzVoZEhWeVlXeHNlU0JrYnlCcGRDZHpJSFJvYVc1bkxpQlVhR1VnWW1WaGRYUjVJR2hsY21VZ2FYTmNjbHh1SUNBZ0lDQWdMeThnZEdoaGRDQnBaaUIwYUdWeVpTQnBjeUJ1YnlCMGNtRnVjMmwwYVc5dUlHUmxabWx1WldRZ2RHaGxiaUJ1YjNSb2FXNW5JSGRwYkd3Z2FHRndjR1Z1SUdGdVpDQjBhR2x6SUhkcGJHd2dZV3h6YnlCaGJHeHZkMXh5WEc0Z0lDQWdJQ0F2THlCdmRHaGxjaUIwY21GdWMybDBhVzl1Y3lCMGJ5QmlaU0J6ZEdGamEyVmtJRzl1SUhSdmNDQnZaaUJsWVdOb0lHOTBhR1Z5SUhkcGRHaHZkWFFnWVc1NUlHTm9iM0J3YVc1bklIUm9aVzBnYjNWMExseHlYRzRnSUNBZ0lDQnBaaUFvYVhOR2FYSnpkQ0FtSmlBaGIzQjBhVzl1Y3k1emEybHdRbXh2WTJ0cGJtY3BJSHRjY2x4dUlDQWdJQ0FnSUNCaWJHOWphMVJ5WVc1emFYUnBiMjV6S0c1dlpHVXNJRk5CUmtWZlJrRlRWRjlHVDFKWFFWSkVYMFJWVWtGVVNVOU9YMVpCVEZWRktUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2RtRnlJSFJwYldsdVozTWdQU0JqYjIxd2RYUmxWR2x0YVc1bmN5aHViMlJsTENCbWRXeHNRMnhoYzNOT1lXMWxMQ0JqWVdOb1pVdGxlU2s3WEhKY2JpQWdJQ0FnSUhaaGNpQnlaV3hoZEdsMlpVUmxiR0Y1SUQwZ2RHbHRhVzVuY3k1dFlYaEVaV3hoZVR0Y2NseHVJQ0FnSUNBZ2JXRjRSR1ZzWVhrZ1BTQk5ZWFJvTG0xaGVDaHlaV3hoZEdsMlpVUmxiR0Y1TENBd0tUdGNjbHh1SUNBZ0lDQWdiV0Y0UkhWeVlYUnBiMjRnUFNCMGFXMXBibWR6TG0xaGVFUjFjbUYwYVc5dU8xeHlYRzVjY2x4dUlDQWdJQ0FnZG1GeUlHWnNZV2R6SUQwZ2UzMDdYSEpjYmlBZ0lDQWdJR1pzWVdkekxtaGhjMVJ5WVc1emFYUnBiMjV6SUNBZ0lDQWdJQ0FnSUQwZ2RHbHRhVzVuY3k1MGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0Z1BpQXdPMXh5WEc0Z0lDQWdJQ0JtYkdGbmN5NW9ZWE5CYm1sdFlYUnBiMjV6SUNBZ0lDQWdJQ0FnSUNBOUlIUnBiV2x1WjNNdVlXNXBiV0YwYVc5dVJIVnlZWFJwYjI0Z1BpQXdPMXh5WEc0Z0lDQWdJQ0JtYkdGbmN5NW9ZWE5VY21GdWMybDBhVzl1UVd4c0lDQWdJQ0FnSUNBOUlHWnNZV2R6TG1oaGMxUnlZVzV6YVhScGIyNXpJQ1ltSUhScGJXbHVaM011ZEhKaGJuTnBkR2x2YmxCeWIzQmxjblI1SUQwOUlDZGhiR3duTzF4eVhHNGdJQ0FnSUNCbWJHRm5jeTVoY0hCc2VWUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpQTlJR2hoYzFSdlUzUjViR1Z6SUNZbUlDaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaG1iR0ZuY3k1b1lYTlVjbUZ1YzJsMGFXOXVjeUFtSmlBaFpteGhaM011YUdGelZISmhibk5wZEdsdmJrRnNiQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4ZkNBb1pteGhaM011YUdGelFXNXBiV0YwYVc5dWN5QW1KaUFoWm14aFozTXVhR0Z6VkhKaGJuTnBkR2x2Ym5NcEtUdGNjbHh1SUNBZ0lDQWdabXhoWjNNdVlYQndiSGxCYm1sdFlYUnBiMjVFZFhKaGRHbHZiaUFnUFNCdmNIUnBiMjV6TG1SMWNtRjBhVzl1SUNZbUlHWnNZV2R6TG1oaGMwRnVhVzFoZEdsdmJuTTdYSEpjYmlBZ0lDQWdJR1pzWVdkekxtRndjR3g1VkhKaGJuTnBkR2x2YmtSbGJHRjVJQ0FnSUQwZ2RISjFkR2g1VkdsdGFXNW5WbUZzZFdVb2IzQjBhVzl1Y3k1a1pXeGhlU2tnSmlZZ0tHWnNZV2R6TG1Gd2NHeDVWSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJSHg4SUdac1lXZHpMbWhoYzFSeVlXNXphWFJwYjI1ektUdGNjbHh1SUNBZ0lDQWdabXhoWjNNdVlYQndiSGxCYm1sdFlYUnBiMjVFWld4aGVTQWdJQ0FnUFNCMGNuVjBhSGxVYVcxcGJtZFdZV3gxWlNodmNIUnBiMjV6TG1SbGJHRjVLU0FtSmlCbWJHRm5jeTVvWVhOQmJtbHRZWFJwYjI1ek8xeHlYRzRnSUNBZ0lDQm1iR0ZuY3k1eVpXTmhiR04xYkdGMFpWUnBiV2x1WjFOMGVXeGxjeUE5SUdGa1pGSmxiVzkyWlVOc1lYTnpUbUZ0WlM1c1pXNW5kR2dnUGlBd08xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHWnNZV2R6TG1Gd2NHeDVWSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJSHg4SUdac1lXZHpMbUZ3Y0d4NVFXNXBiV0YwYVc5dVJIVnlZWFJwYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0J0WVhoRWRYSmhkR2x2YmlBOUlHOXdkR2x2Ym5NdVpIVnlZWFJwYjI0Z1B5QndZWEp6WlVac2IyRjBLRzl3ZEdsdmJuTXVaSFZ5WVhScGIyNHBJRG9nYldGNFJIVnlZWFJwYjI0N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaG1iR0ZuY3k1aGNIQnNlVlJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdabXhoWjNNdWFHRnpWSEpoYm5OcGRHbHZibk1nUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHbHRhVzVuY3k1MGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0Z1BTQnRZWGhFZFhKaGRHbHZianRjY2x4dUlDQWdJQ0FnSUNBZ0lHRndjR3g1VDI1c2VVUjFjbUYwYVc5dUlEMGdibTlrWlM1emRIbHNaVnRVVWtGT1UwbFVTVTlPWDFCU1QxQWdLeUJRVWs5UVJWSlVXVjlMUlZsZExteGxibWQwYUNBK0lEQTdYSEpjYmlBZ0lDQWdJQ0FnSUNCMFpXMXdiM0poY25sVGRIbHNaWE11Y0hWemFDaG5aWFJEYzNOVWNtRnVjMmwwYVc5dVJIVnlZWFJwYjI1VGRIbHNaU2h0WVhoRWRYSmhkR2x2Yml3Z1lYQndiSGxQYm14NVJIVnlZWFJwYjI0cEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNobWJHRm5jeTVoY0hCc2VVRnVhVzFoZEdsdmJrUjFjbUYwYVc5dUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCbWJHRm5jeTVvWVhOQmJtbHRZWFJwYjI1eklEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJwYldsdVozTXVZVzVwYldGMGFXOXVSSFZ5WVhScGIyNGdQU0J0WVhoRWRYSmhkR2x2Ymp0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJsYlhCdmNtRnllVk4wZVd4bGN5NXdkWE5vS0dkbGRFTnpjMHRsZVdaeVlXMWxSSFZ5WVhScGIyNVRkSGxzWlNodFlYaEVkWEpoZEdsdmJpa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHMWhlRVIxY21GMGFXOXVJRDA5UFNBd0lDWW1JQ0ZtYkdGbmN5NXlaV05oYkdOMWJHRjBaVlJwYldsdVoxTjBlV3hsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiRzl6WlVGdVpGSmxkSFZ5Yms1dmIzQkJibWx0WVhSdmNpZ3BPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWld4aGVTQWhQU0J1ZFd4c0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxiR0Y1VTNSNWJHVTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6TG1SbGJHRjVJQ0U5UFNCY0ltSnZiMnhsWVc1Y0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNZWGxUZEhsc1pTQTlJSEJoY25ObFJteHZZWFFvYjNCMGFXOXVjeTVrWld4aGVTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QnVkVzFpWlhJZ2FXNGdiM0IwYVc5dWN5NWtaV3hoZVNCdFpXRnVjeUIzWlNCb1lYWmxJSFJ2SUhKbFkyRnNZM1ZzWVhSbElIUm9aU0JrWld4aGVTQm1iM0lnZEdobElHTnNiM05wYm1jZ2RHbHRaVzkxZEZ4eVhHNGdJQ0FnSUNBZ0lDQWdiV0Y0UkdWc1lYa2dQU0JOWVhSb0xtMWhlQ2hrWld4aGVWTjBlV3hsTENBd0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNobWJHRm5jeTVoY0hCc2VWUnlZVzV6YVhScGIyNUVaV3hoZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdWdGNHOXlZWEo1VTNSNWJHVnpMbkIxYzJnb1oyVjBRM056UkdWc1lYbFRkSGxzWlNoa1pXeGhlVk4wZVd4bEtTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pteGhaM011WVhCd2JIbEJibWx0WVhScGIyNUVaV3hoZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdWdGNHOXlZWEo1VTNSNWJHVnpMbkIxYzJnb1oyVjBRM056UkdWc1lYbFRkSGxzWlNoa1pXeGhlVk4wZVd4bExDQjBjblZsS1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQXZMeUIzWlNCdVpXVmtJSFJ2SUhKbFkyRnNZM1ZzWVhSbElIUm9aU0JrWld4aGVTQjJZV3gxWlNCemFXNWpaU0IzWlNCMWMyVmtJR0VnY0hKbExXVnRjSFJwZG1VZ2JtVm5ZWFJwZG1WY2NseHVJQ0FnSUNBZ0x5OGdaR1ZzWVhrZ2RtRnNkV1VnWVc1a0lIUm9aU0JrWld4aGVTQjJZV3gxWlNCcGN5QnlaWEYxYVhKbFpDQm1iM0lnZEdobElHWnBibUZzSUdWMlpXNTBJR05vWldOcmFXNW5MaUJVYUdselhISmNiaUFnSUNBZ0lDOHZJSEJ5YjNCbGNuUjVJSGRwYkd3Z1pXNXpkWEpsSUhSb1lYUWdkR2hwY3lCM2FXeHNJR2hoY0hCbGJpQmhablJsY2lCMGFHVWdVa0ZHSUhCb1lYTmxJR2hoY3lCd1lYTnpaV1F1WEhKY2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtUjFjbUYwYVc5dUlEMDlJRzUxYkd3Z0ppWWdkR2x0YVc1bmN5NTBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNGdQaUF3S1NCN1hISmNiaUFnSUNBZ0lDQWdabXhoWjNNdWNtVmpZV3hqZFd4aGRHVlVhVzFwYm1kVGRIbHNaWE1nUFNCbWJHRm5jeTV5WldOaGJHTjFiR0YwWlZScGJXbHVaMU4wZVd4bGN5QjhmQ0JwYzBacGNuTjBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQnRZWGhFWld4aGVWUnBiV1VnUFNCdFlYaEVaV3hoZVNBcUlFOU9SVjlUUlVOUFRrUTdYSEpjYmlBZ0lDQWdJRzFoZUVSMWNtRjBhVzl1VkdsdFpTQTlJRzFoZUVSMWNtRjBhVzl1SUNvZ1QwNUZYMU5GUTA5T1JEdGNjbHh1SUNBZ0lDQWdhV1lnS0NGdmNIUnBiMjV6TG5OcmFYQkNiRzlqYTJsdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdac1lXZHpMbUpzYjJOclZISmhibk5wZEdsdmJpQTlJSFJwYldsdVozTXVkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVJRDRnTUR0Y2NseHVJQ0FnSUNBZ0lDQm1iR0ZuY3k1aWJHOWphMHRsZVdaeVlXMWxRVzVwYldGMGFXOXVJRDBnZEdsdGFXNW5jeTVoYm1sdFlYUnBiMjVFZFhKaGRHbHZiaUErSURBZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhaMmRsY2k1aGJtbHRZWFJwYjI1RVpXeGhlU0ErSURBZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhaMmRsY2k1aGJtbHRZWFJwYjI1RWRYSmhkR2x2YmlBOVBUMGdNRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11Wm5KdmJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtTnNaV0Z1ZFhCVGRIbHNaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsWjJsemRHVnlVbVZ6ZEc5eVlXSnNaVk4wZVd4bGN5aHlaWE4wYjNKbFUzUjViR1Z6TENCdWIyUmxMQ0JQWW1wbFkzUXVhMlY1Y3lodmNIUnBiMjV6TG1aeWIyMHBLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdZWEJ3YkhsQmJtbHRZWFJwYjI1R2NtOXRVM1I1YkdWektHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9abXhoWjNNdVlteHZZMnRVY21GdWMybDBhVzl1SUh4OElHWnNZV2R6TG1Kc2IyTnJTMlY1Wm5KaGJXVkJibWx0WVhScGIyNHBJSHRjY2x4dUlDQWdJQ0FnSUNCaGNIQnNlVUpzYjJOcmFXNW5LRzFoZUVSMWNtRjBhVzl1S1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hiM0IwYVc5dWN5NXphMmx3UW14dlkydHBibWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQmliRzlqYTFSeVlXNXphWFJwYjI1ektHNXZaR1VzSUdaaGJITmxLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdMeThnVkU5RVR5aHRZWFJ6YTI4cE9pQm1iM0lnTVM0MUlHTm9ZVzVuWlNCMGFHbHpJR052WkdVZ2RHOGdhR0YyWlNCaGJpQmhibWx0WVhSdmNpQnZZbXBsWTNRZ1ptOXlJR0psZEhSbGNpQmtaV0oxWjJkcGJtZGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0FrSkhkcGJHeEJibWx0WVhSbE9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lHVnVaRG9nWlc1a1JtNHNYSEpjYmlBZ0lDQWdJQ0FnYzNSaGNuUTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dGdWFXMWhkR2x2YmtOc2IzTmxaQ2tnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJSEoxYm01bGNraHZjM1FnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVpEb2daVzVrUm00c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJtTmxiRG9nWTJGdVkyVnNSbTRzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWdFpUb2diblZzYkN3Z0x5OTBhR2x6SUhkcGJHd2dZbVVnYzJWMElHUjFjbWx1WnlCMGFHVWdjM1JoY25Rb0tTQndhR0Z6WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVhWelpUb2diblZzYkZ4eVhHNGdJQ0FnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0J5ZFc1dVpYSWdQU0J1WlhjZ0pDUkJibWx0WVhSbFVuVnVibVZ5S0hKMWJtNWxja2h2YzNRcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lIZGhhWFJWYm5ScGJGRjFhV1YwS0hOMFlYSjBLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCM1pTQmtiMjRuZENCb1lYWmxJR0ZqWTJWemN5QjBieUJ3WVhWelpTOXlaWE4xYldVZ2RHaGxJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdjMmx1WTJVZ2FYUWdhR0Z6YmlkMElISjFiaUI1WlhRdUlFRnVhVzFoZEdWU2RXNXVaWElnZDJsc2JDQjBhR1Z5WldadmNtVmNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklITmxkQ0J1YjI5d0lHWjFibU4wYVc5dWN5Qm1iM0lnY21WemRXMWxJR0Z1WkNCd1lYVnpaU0JoYm1RZ2RHaGxlU0IzYVd4c1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCc1lYUmxjaUJpWlNCdmRtVnljbWxrWkdWdUlHOXVZMlVnZEdobElHRnVhVzFoZEdsdmJpQnBjeUIwY21sbloyVnlaV1JjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWRXNXVaWEk3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1pXNWtSbTRvS1NCN1hISmNiaUFnSUNBZ0lDQWdZMnh2YzJVb0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1kyRnVZMlZzUm00b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWTJ4dmMyVW9kSEoxWlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdOc2IzTmxLSEpsYW1WamRHVmtLU0I3SUM4dklHcHphR2x1ZENCcFoyNXZjbVU2YkdsdVpWeHlYRzRnSUNBZ0lDQWdJQzh2SUdsbUlIUm9aU0J3Y205dGFYTmxJR2hoY3lCaVpXVnVJR05oYkd4bFpDQmhiSEpsWVdSNUlIUm9aVzRnZDJVZ2MyaHZkV3hrYmlkMElHTnNiM05sWEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hsSUdGdWFXMWhkR2x2YmlCaFoyRnBibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGhibWx0WVhScGIyNURiRzl6WldRZ2ZId2dLR0Z1YVcxaGRHbHZia052YlhCc1pYUmxaQ0FtSmlCaGJtbHRZWFJwYjI1UVlYVnpaV1FwS1NCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dVEyeHZjMlZrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1UVlYVnpaV1FnUFNCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NGdmNIUnBiMjV6TGlRa2MydHBjRkJ5WlhCaGNtRjBhVzl1UTJ4aGMzTmxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdKQ1JxY1V4cGRHVXVjbVZ0YjNabFEyeGhjM01vWld4bGJXVnVkQ3dnY0hKbGNHRnlZWFJwYjI1RGJHRnpjMlZ6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSkNScWNVeHBkR1V1Y21WdGIzWmxRMnhoYzNNb1pXeGxiV1Z1ZEN3Z1lXTjBhWFpsUTJ4aGMzTmxjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR0pzYjJOclMyVjVabkpoYldWQmJtbHRZWFJwYjI1ektHNXZaR1VzSUdaaGJITmxLVHRjY2x4dUlDQWdJQ0FnSUNCaWJHOWphMVJ5WVc1emFYUnBiMjV6S0c1dlpHVXNJR1poYkhObEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1ptOXlSV0ZqYUNoMFpXMXdiM0poY25sVGRIbHNaWE1zSUdaMWJtTjBhVzl1S0dWdWRISjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJVYUdWeVpTQnBjeUJ2Ym14NUlHOXVaU0IzWVhrZ2RHOGdjbVZ0YjNabElHbHViR2x1WlNCemRIbHNaU0J3Y205d1pYSjBhV1Z6SUdWdWRHbHlaV3g1SUdaeWIyMGdaV3hsYldWdWRITXVYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QkNlU0IxYzJsdVp5QmdjbVZ0YjNabFVISnZjR1Z5ZEhsZ0lIUm9hWE1nZDI5eWEzTXNJR0oxZENCM1pTQnVaV1ZrSUhSdklHTnZiblpsY25RZ1kyRnRaV3d0WTJGelpXUWdRMU5UWEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEhsc1pYTWdaRzkzYmlCMGJ5Qm9lWEJvWlc1aGRHVmtJSFpoYkhWbGN5NWNjbHh1SUNBZ0lDQWdJQ0FnSUc1dlpHVXVjM1I1YkdWYlpXNTBjbmxiTUYxZElEMGdKeWM3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHRndjR3g1UVc1cGJXRjBhVzl1UTJ4aGMzTmxjeWhsYkdWdFpXNTBMQ0J2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnSUNCaGNIQnNlVUZ1YVcxaGRHbHZibE4wZVd4bGN5aGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXJaWGx6S0hKbGMzUnZjbVZUZEhsc1pYTXBMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlSV0ZqYUNoeVpYTjBiM0psVTNSNWJHVnpMQ0JtZFc1amRHbHZiaWgyWVd4MVpTd2djSEp2Y0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaU0EvSUc1dlpHVXVjM1I1YkdVdWMyVjBVSEp2Y0dWeWRIa29jSEp2Y0N3Z2RtRnNkV1VwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dibTlrWlM1emRIbHNaUzV5WlcxdmRtVlFjbTl3WlhKMGVTaHdjbTl3S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hsSUhKbFlYTnZiaUIzYUhrZ2QyVWdhR0YyWlNCMGFHbHpJRzl3ZEdsdmJpQnBjeUIwYnlCaGJHeHZkeUJoSUhONWJtTm9jbTl1YjNWeklHTnNiM05wYm1jZ1kyRnNiR0poWTJ0Y2NseHVJQ0FnSUNBZ0lDQXZMeUIwYUdGMElHbHpJR1pwY21Wa0lHRnpJRk5QVDA0Z1lYTWdkR2hsSUdGdWFXMWhkR2x2YmlCbGJtUnpJQ2gzYUdWdUlIUm9aU0JEVTFNZ2FYTWdjbVZ0YjNabFpDa2diM0lnYVdaY2NseHVJQ0FnSUNBZ0lDQXZMeUIwYUdVZ1lXNXBiV0YwYVc5dUlHNWxkbVZ5SUhSaGEyVnpJRzltWmlCaGRDQmhiR3d1SUVFZ1oyOXZaQ0JsZUdGdGNHeGxJR2x6SUdFZ2JHVmhkbVVnWVc1cGJXRjBhVzl1SUhOcGJtTmxYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2RHaGxJR1ZzWlcxbGJuUWdiWFZ6ZENCaVpTQnlaVzF2ZG1Wa0lHcDFjM1FnWVdaMFpYSWdkR2hsSUdGdWFXMWhkR2x2YmlCcGN5QnZkbVZ5SUc5eUlHVnNjMlVnZEdobElHVnNaVzFsYm5SY2NseHVJQ0FnSUNBZ0lDQXZMeUIzYVd4c0lHRndjR1ZoY2lCdmJpQnpZM0psWlc0Z1ptOXlJRzl1WlNCaGJtbHRZWFJwYjI0Z1puSmhiV1VnWTJGMWMybHVaeUJoYmlCdmRtVnlZbVZoY21sdVp5Qm1iR2xqYTJWeUxseHlYRzRnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG05dVJHOXVaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXZia1J2Ym1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNobGRtVnVkSE1nSmlZZ1pYWmxiblJ6TG14bGJtZDBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnVW1WdGIzWmxJSFJvWlNCMGNtRnVjMmwwYVc5dVpXNWtJQzhnWVc1cGJXRjBhVzl1Wlc1a0lHeHBjM1JsYm1WeUtITXBYSEpjYmlBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG05bVppaGxkbVZ1ZEhNdWFtOXBiaWduSUNjcExDQnZia0Z1YVcxaGRHbHZibEJ5YjJkeVpYTnpLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dlEyRnVZMlZzSUhSb1pTQm1ZV3hzWW1GamF5QmpiRzl6YVc1bklIUnBiV1Z2ZFhRZ1lXNWtJSEpsYlc5MlpTQjBhR1VnZEdsdFpYSWdaR0YwWVZ4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJoYm1sdFlYUnBiMjVVYVcxbGNrUmhkR0VnUFNCbGJHVnRaVzUwTG1SaGRHRW9RVTVKVFVGVVJWOVVTVTFGVWw5TFJWa3BPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGhibWx0WVhScGIyNVVhVzFsY2tSaGRHRXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDUjBhVzFsYjNWMExtTmhibU5sYkNoaGJtbHRZWFJwYjI1VWFXMWxja1JoZEdGYk1GMHVkR2x0WlhJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzV5WlcxdmRtVkVZWFJoS0VGT1NVMUJWRVZmVkVsTlJWSmZTMFZaS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR2xtSUhSb1pTQndjbVZ3WVhKaGRHbHZiaUJtZFc1amRHbHZiaUJtWVdsc2N5QjBhR1Z1SUhSb1pTQndjbTl0YVhObElHbHpJRzV2ZENCelpYUjFjRnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlkVzV1WlhJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKMWJtNWxjaTVqYjIxd2JHVjBaU2doY21WcVpXTjBaV1FwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1lYQndiSGxDYkc5amEybHVaeWhrZFhKaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2htYkdGbmN5NWliRzlqYTFSeVlXNXphWFJwYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdKc2IyTnJWSEpoYm5OcGRHbHZibk1vYm05a1pTd2daSFZ5WVhScGIyNHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnNZV2R6TG1Kc2IyTnJTMlY1Wm5KaGJXVkJibWx0WVhScGIyNHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHSnNiMk5yUzJWNVpuSmhiV1ZCYm1sdFlYUnBiMjV6S0c1dlpHVXNJQ0VoWkhWeVlYUnBiMjRwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1kyeHZjMlZCYm1SU1pYUjFjbTVPYjI5d1FXNXBiV0YwYjNJb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY25WdWJtVnlJRDBnYm1WM0lDUWtRVzVwYldGMFpWSjFibTVsY2loN1hISmNiaUFnSUNBZ0lDQWdJQ0JsYm1RNklHVnVaRVp1TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdZMkZ1WTJWc09pQmpZVzVqWld4R2JseHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCemFHOTFiR1FnWm14MWMyZ2dkR2hsSUdOaFkyaGxJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0FnSUhkaGFYUlZiblJwYkZGMWFXVjBLRzV2YjNBcE8xeHlYRzRnSUNBZ0lDQWdJR05zYjNObEtDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FrSkhkcGJHeEJibWx0WVhSbE9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJSE4wWVhKME9pQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISjFibTVsY2p0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQmxibVE2SUdWdVpFWnVYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnYjI1QmJtbHRZWFJwYjI1UWNtOW5jbVZ6Y3lobGRtVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHVjJaVzUwTG5OMGIzQlFjbTl3WVdkaGRHbHZiaWdwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJsZGlBOUlHVjJaVzUwTG05eWFXZHBibUZzUlhabGJuUWdmSHdnWlhabGJuUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJSGRsSUc1dmR5QmhiSGRoZVhNZ2RYTmxJR0JFWVhSbExtNXZkeWdwWUNCa2RXVWdkRzhnZEdobElISmxZMlZ1ZENCamFHRnVaMlZ6SUhkcGRHaGNjbHh1SUNBZ0lDQWdJQ0F2THlCbGRtVnVkQzUwYVcxbFUzUmhiWEFnYVc0Z1JtbHlaV1p2ZUN3Z1YyVmlhMmwwSUdGdVpDQkRhSEp2YldVZ0tITmxaU0FqTVRNME9UUWdabTl5SUcxdmNtVWdhVzVtYnlsY2NseHVJQ0FnSUNBZ0lDQjJZWElnZEdsdFpWTjBZVzF3SUQwZ1pYWXVKRzFoYm5WaGJGUnBiV1ZUZEdGdGNDQjhmQ0JFWVhSbExtNXZkeWdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2S2lCR2FYSmxabTk0SUNodmNpQndiM056YVdKc2VTQnFkWE4wSUVkbFkydHZLU0JzYVd0bGN5QjBieUJ1YjNRZ2NtOTFibVFnZG1Gc2RXVnpJSFZ3WEhKY2JpQWdJQ0FnSUNBZ0lDb2dkMmhsYmlCaElHMXpJRzFsWVhOMWNtVnRaVzUwSUdseklIVnpaV1FnWm05eUlIUm9aU0JoYm1sdFlYUnBiMjRnS2k5Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWld4aGNITmxaRlJwYldVZ1BTQndZWEp6WlVac2IyRjBLR1YyTG1Wc1lYQnpaV1JVYVcxbExuUnZSbWw0WldRb1JVeEJVRk5GUkY5VVNVMUZYMDFCV0Y5RVJVTkpUVUZNWDFCTVFVTkZVeWtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2S2lBa2JXRnVkV0ZzVkdsdFpWTjBZVzF3SUdseklHRWdiVzlqYTJWa0lIUnBiV1ZUZEdGdGNDQjJZV3gxWlNCM2FHbGphQ0JwY3lCelpYUmNjbHh1SUNBZ0lDQWdJQ0FnS2lCM2FYUm9hVzRnWW5KdmQzTmxjbFJ5YVdkblpYSW9LUzRnVkdocGN5QnBjeUJ2Ym14NUlHaGxjbVVnYzI4Z2RHaGhkQ0IwWlhOMGN5QmpZVzVjY2x4dUlDQWdJQ0FnSUNBZ0tpQnRiMk5ySUdGdWFXMWhkR2x2Ym5NZ2NISnZjR1Z5YkhrdUlGSmxZV3dnWlhabGJuUnpJR1poYkd4aVlXTnJJSFJ2SUdWMlpXNTBMblJwYldWVGRHRnRjQ3hjY2x4dUlDQWdJQ0FnSUNBZ0tpQnZjaXdnYVdZZ2RHaGxlU0JrYjI0bmRDd2dkR2hsYmlCaElIUnBiV1ZUZEdGdGNDQnBjeUJoZFhSdmJXRjBhV05oYkd4NUlHTnlaV0YwWldRZ1ptOXlJSFJvWlcwdVhISmNiaUFnSUNBZ0lDQWdJQ29nVjJVbmNtVWdZMmhsWTJ0cGJtY2dkRzhnYzJWbElHbG1JSFJvWlNCMGFXMWxVM1JoYlhBZ2MzVnljR0Z6YzJWeklIUm9aU0JsZUhCbFkzUmxaQ0JrWld4aGVTeGNjbHh1SUNBZ0lDQWdJQ0FnS2lCaWRYUWdkMlVuY21VZ2RYTnBibWNnWld4aGNITmxaRlJwYldVZ2FXNXpkR1ZoWkNCdlppQjBhR1VnZEdsdFpWTjBZVzF3SUc5dUlIUm9aU0F5Ym1SY2NseHVJQ0FnSUNBZ0lDQWdLaUJ3Y21VdFkyOXVaR2wwYVc5dUlITnBibU5sSUdGdWFXMWhkR2x2YmxCaGRYTmxaSE1nYzI5dFpYUnBiV1Z6SUdOc2IzTmxJRzltWmlCbFlYSnNlU0FxTDF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hOWVhSb0xtMWhlQ2gwYVcxbFUzUmhiWEFnTFNCemRHRnlkRlJwYldVc0lEQXBJRDQ5SUcxaGVFUmxiR0Y1VkdsdFpTQW1KaUJsYkdGd2MyVmtWR2x0WlNBK1BTQnRZWGhFZFhKaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2MyVjBJSFJvYVhNZ1pteGhaeUIwYnlCbGJuTjFjbVVnZEdoaGRDQnBaaUIwYUdVZ2RISmhibk5wZEdsdmJpQnBjeUJ3WVhWelpXUWdkR2hsYml3Z2QyaGxiaUJ5WlhOMWJXVmtMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkR2hsSUdGdWFXMWhkR2x2YmlCM2FXeHNJR0YxZEc5dFlYUnBZMkZzYkhrZ1kyeHZjMlVnYVhSelpXeG1JSE5wYm1ObElIUnlZVzV6YVhScGIyNXpJR05oYm01dmRDQmlaU0J3WVhWelpXUXVYSEpjYmlBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1RGIyMXdiR1YwWldRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdZMnh2YzJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1oxYm1OMGFXOXVJSE4wWVhKMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGhibWx0WVhScGIyNURiRzl6WldRcElISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVc1dlpHVXVjR0Z5Wlc1MFRtOWtaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMnh2YzJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklHVjJaVzRnZEdodmRXZG9JSGRsSUc5dWJIa2djR0YxYzJVZ2EyVjVabkpoYldVZ1lXNXBiV0YwYVc5dWN5Qm9aWEpsSUhSb1pTQndZWFZ6WlNCbWJHRm5YSEpjYmlBZ0lDQWdJQ0FnTHk4Z2QybHNiQ0J6ZEdsc2JDQm9ZWEJ3Wlc0Z2QyaGxiaUIwY21GdWMybDBhVzl1Y3lCaGNtVWdkWE5sWkM0Z1QyNXNlU0IwYUdVZ2RISmhibk5wZEdsdmJpQjNhV3hzWEhKY2JpQWdJQ0FnSUNBZ0x5OGdibTkwSUdKbElIQmhkWE5sWkNCemFXNWpaU0IwYUdGMElHbHpJRzV2ZENCd2IzTnphV0pzWlM0Z1NXWWdkR2hsSUdGdWFXMWhkR2x2YmlCbGJtUnpJSGRvWlc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJ3WVhWelpXUWdkR2hsYmlCcGRDQjNhV3hzSUc1dmRDQmpiMjF3YkdWMFpTQjFiblJwYkNCMWJuQmhkWE5sWkNCdmNpQmpZVzVqWld4c1pXUXVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIQnNZWGxRWVhWelpTQTlJR1oxYm1OMGFXOXVLSEJzWVhsQmJtbHRZWFJwYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hZVzVwYldGMGFXOXVRMjl0Y0d4bGRHVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZibEJoZFhObFpDQTlJQ0Z3YkdGNVFXNXBiV0YwYVc5dU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2x0YVc1bmN5NWhibWx0WVhScGIyNUVkWEpoZEdsdmJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMllXeDFaU0E5SUdKc2IyTnJTMlY1Wm5KaGJXVkJibWx0WVhScGIyNXpLRzV2WkdVc0lHRnVhVzFoZEdsdmJsQmhkWE5sWkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dVVHRjFjMlZrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdkR1Z0Y0c5eVlYSjVVM1I1YkdWekxuQjFjMmdvZG1Gc2RXVXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2NtVnRiM1psUm5KdmJVRnljbUY1S0hSbGJYQnZjbUZ5ZVZOMGVXeGxjeXdnZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHRnVhVzFoZEdsdmJsQmhkWE5sWkNBbUppQndiR0Y1UVc1cGJXRjBhVzl1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2YmxCaGRYTmxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiRzl6WlNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR05vWldOcmFXNW5JSFJvWlNCemRHRm5aMlZ5SUdSMWNtRjBhVzl1SUhCeVpYWmxiblJ6SUdGdUlHRmpZMmxrWlc1MFlXeHNlU0JqWVhOallXUmxJRzltSUhSb1pTQkRVMU1nWkdWc1lYa2djM1I1YkdWY2NseHVJQ0FnSUNBZ0lDQXZMeUJpWldsdVp5QnBibWhsY21sMFpXUWdabkp2YlNCMGFHVWdjR0Z5Wlc1MExpQkpaaUIwYUdVZ2RISmhibk5wZEdsdmJpQmtkWEpoZEdsdmJpQnBjeUI2WlhKdklIUm9aVzRnZDJVZ1kyRnVJSE5oWm1Wc2VWeHlYRzRnSUNBZ0lDQWdJQzh2SUhKbGJIa2dkR2hoZENCMGFHVWdaR1ZzWVhrZ2RtRnNkV1VnYVhNZ1lXNGdhVzUwWlc1MGFXOXVZV3dnYzNSaFoyZGxjaUJrWld4aGVTQnpkSGxzWlM1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYldGNFUzUmhaMmRsY2lBOUlHbDBaVzFKYm1SbGVDQStJREJjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNZbUlDZ29kR2x0YVc1bmN5NTBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNGdKaVlnYzNSaFoyZGxjaTUwY21GdWMybDBhVzl1UkhWeVlYUnBiMjRnUFQwOUlEQXBJSHg4WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kR2x0YVc1bmN5NWhibWx0WVhScGIyNUVkWEpoZEdsdmJpQW1KaUJ6ZEdGbloyVnlMbUZ1YVcxaGRHbHZia1IxY21GMGFXOXVJRDA5UFNBd0tTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1ltSUUxaGRHZ3ViV0Y0S0hOMFlXZG5aWEl1WVc1cGJXRjBhVzl1UkdWc1lYa3NJSE4wWVdkblpYSXVkSEpoYm5OcGRHbHZia1JsYkdGNUtUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjRVM1JoWjJkbGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0pIUnBiV1Z2ZFhRb2RISnBaMmRsY2tGdWFXMWhkR2x2YmxOMFlYSjBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXRjBhQzVtYkc5dmNpaHRZWGhUZEdGbloyVnlJQ29nYVhSbGJVbHVaR1Y0SUNvZ1QwNUZYMU5GUTA5T1JDa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJ5YVdkblpYSkJibWx0WVhScGIyNVRkR0Z5ZENncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QjNhV3hzSUdSbFkyOXlZWFJsSUhSb1pTQmxlR2x6ZEdsdVp5QndjbTl0YVhObElISjFibTVsY2lCM2FYUm9JSEJoZFhObEwzSmxjM1Z0WlNCdFpYUm9iMlJ6WEhKY2JpQWdJQ0FnSUNBZ2NuVnVibVZ5U0c5emRDNXlaWE4xYldVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIQnNZWGxRWVhWelpTaDBjblZsS1R0Y2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlkVzV1WlhKSWIzTjBMbkJoZFhObElEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQndiR0Y1VUdGMWMyVW9abUZzYzJVcE8xeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFJ5YVdkblpYSkJibWx0WVhScGIyNVRkR0Z5ZENncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHcDFjM1FnYVc1allYTmxJR0VnYzNSaFoyZGxjaUJoYm1sdFlYUnBiMjRnYTJsamEzTWdhVzRnZDJobGJpQjBhR1VnWVc1cGJXRjBhVzl1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJwZEhObGJHWWdkMkZ6SUdOaGJtTmxiR3hsWkNCbGJuUnBjbVZzZVZ4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dGdWFXMWhkR2x2YmtOc2IzTmxaQ2tnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR0Z3Y0d4NVFteHZZMnRwYm1jb1ptRnNjMlVwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdadmNrVmhZMmdvZEdWdGNHOXlZWEo1VTNSNWJHVnpMQ0JtZFc1amRHbHZiaWhsYm5SeWVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYTJWNUlEMGdaVzUwY25sYk1GMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpTQTlJR1Z1ZEhKNVd6RmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5OMGVXeGxXMnRsZVYwZ1BTQjJZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdGd2NHeDVRVzVwYldGMGFXOXVRMnhoYzNObGN5aGxiR1Z0Wlc1MExDQnZjSFJwYjI1ektUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNRa2FuRk1hWFJsTG1Ga1pFTnNZWE56S0dWc1pXMWxiblFzSUdGamRHbDJaVU5zWVhOelpYTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNobWJHRm5jeTV5WldOaGJHTjFiR0YwWlZScGJXbHVaMU4wZVd4bGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1kV3hzUTJ4aGMzTk9ZVzFsSUQwZ2JtOWtaUzVqYkdGemMwNWhiV1VnS3lBbklDY2dLeUJ3Y21Wd1lYSmhkR2x2YmtOc1lYTnpaWE03WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFMyVjVJRDBnWjJOelNHRnphRVp1S0c1dlpHVXNJR1oxYkd4RGJHRnpjMDVoYldVcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2x0YVc1bmN5QTlJR052YlhCMWRHVlVhVzFwYm1kektHNXZaR1VzSUdaMWJHeERiR0Z6YzA1aGJXVXNJR05oWTJobFMyVjVLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZzWVhScGRtVkVaV3hoZVNBOUlIUnBiV2x1WjNNdWJXRjRSR1ZzWVhrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGVFUmxiR0Y1SUQwZ1RXRjBhQzV0WVhnb2NtVnNZWFJwZG1WRVpXeGhlU3dnTUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGVFUjFjbUYwYVc5dUlEMGdkR2x0YVc1bmN5NXRZWGhFZFhKaGRHbHZianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRZWGhFZFhKaGRHbHZiaUE5UFQwZ01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zYjNObEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iR0ZuY3k1b1lYTlVjbUZ1YzJsMGFXOXVjeUE5SUhScGJXbHVaM011ZEhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1SUQ0Z01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pteGhaM011YUdGelFXNXBiV0YwYVc5dWN5QTlJSFJwYldsdVozTXVZVzVwYldGMGFXOXVSSFZ5WVhScGIyNGdQaUF3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNobWJHRm5jeTVoY0hCc2VVRnVhVzFoZEdsdmJrUmxiR0Y1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGJHRjBhWFpsUkdWc1lYa2dQU0IwZVhCbGIyWWdiM0IwYVc5dWN5NWtaV3hoZVNBaFBUMGdYQ0ppYjI5c1pXRnVYQ0lnSmlZZ2RISjFkR2g1VkdsdGFXNW5WbUZzZFdVb2IzQjBhVzl1Y3k1a1pXeGhlU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QndZWEp6WlVac2IyRjBLRzl3ZEdsdmJuTXVaR1ZzWVhrcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nY21Wc1lYUnBkbVZFWld4aGVUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZUVSbGJHRjVJRDBnVFdGMGFDNXRZWGdvY21Wc1lYUnBkbVZFWld4aGVTd2dNQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJwYldsdVozTXVZVzVwYldGMGFXOXVSR1ZzWVhrZ1BTQnlaV3hoZEdsMlpVUmxiR0Y1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4aGVWTjBlV3hsSUQwZ1oyVjBRM056UkdWc1lYbFRkSGxzWlNoeVpXeGhkR2wyWlVSbGJHRjVMQ0IwY25WbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVnRjRzl5WVhKNVUzUjViR1Z6TG5CMWMyZ29aR1ZzWVhsVGRIbHNaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdWMzUjViR1ZiWkdWc1lYbFRkSGxzWlZzd1hWMGdQU0JrWld4aGVWTjBlV3hsV3pGZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUcxaGVFUmxiR0Y1VkdsdFpTQTlJRzFoZUVSbGJHRjVJQ29nVDA1RlgxTkZRMDlPUkR0Y2NseHVJQ0FnSUNBZ0lDQWdJRzFoZUVSMWNtRjBhVzl1VkdsdFpTQTlJRzFoZUVSMWNtRjBhVzl1SUNvZ1QwNUZYMU5GUTA5T1JEdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVsWVhOcGJtY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWaGMyVlFjbTl3TENCbFlYTmxWbUZzSUQwZ2IzQjBhVzl1Y3k1bFlYTnBibWM3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWJHRm5jeTVvWVhOVWNtRnVjMmwwYVc5dWN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJWUWNtOXdJRDBnVkZKQlRsTkpWRWxQVGw5UVVrOVFJQ3NnVkVsTlNVNUhYMHRGV1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdiM0poY25sVGRIbHNaWE11Y0hWemFDaGJaV0Z6WlZCeWIzQXNJR1ZoYzJWV1lXeGRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExuTjBlV3hsVzJWaGMyVlFjbTl3WFNBOUlHVmhjMlZXWVd3N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnNZV2R6TG1oaGMwRnVhVzFoZEdsdmJuTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsWVhObFVISnZjQ0E5SUVGT1NVMUJWRWxQVGw5UVVrOVFJQ3NnVkVsTlNVNUhYMHRGV1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdiM0poY25sVGRIbHNaWE11Y0hWemFDaGJaV0Z6WlZCeWIzQXNJR1ZoYzJWV1lXeGRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExuTjBlV3hsVzJWaGMyVlFjbTl3WFNBOUlHVmhjMlZXWVd3N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHbHRhVzVuY3k1MGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblJ6TG5CMWMyZ29WRkpCVGxOSlZFbFBUa1ZPUkY5RlZrVk9WQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hScGJXbHVaM011WVc1cGJXRjBhVzl1UkhWeVlYUnBiMjRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUnpMbkIxYzJnb1FVNUpUVUZVU1U5T1JVNUVYMFZXUlU1VUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRnlkRlJwYldVZ1BTQkVZWFJsTG01dmR5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSFJwYldWeVZHbHRaU0E5SUcxaGVFUmxiR0Y1VkdsdFpTQXJJRU5NVDFOSlRrZGZWRWxOUlY5Q1ZVWkdSVklnS2lCdFlYaEVkWEpoZEdsdmJsUnBiV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZWElnWlc1a1ZHbHRaU0E5SUhOMFlYSjBWR2x0WlNBcklIUnBiV1Z5VkdsdFpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1YzBSaGRHRWdQU0JsYkdWdFpXNTBMbVJoZEdFb1FVNUpUVUZVUlY5VVNVMUZVbDlMUlZrcElIeDhJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhObGRIVndSbUZzYkdKaFkydFVhVzFsY2lBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWVc1cGJXRjBhVzl1YzBSaGRHRXViR1Z1WjNSb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVpXNTBWR2x0WlhKRVlYUmhJRDBnWVc1cGJXRjBhVzl1YzBSaGRHRmJNRjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEhWd1JtRnNiR0poWTJ0VWFXMWxjaUE5SUdWdVpGUnBiV1VnUGlCamRYSnlaVzUwVkdsdFpYSkVZWFJoTG1WNGNHVmpkR1ZrUlc1a1ZHbHRaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hObGRIVndSbUZzYkdKaFkydFVhVzFsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBhVzFsYjNWMExtTmhibU5sYkNoamRYSnlaVzUwVkdsdFpYSkVZWFJoTG5ScGJXVnlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNXpSR0YwWVM1d2RYTm9LR05zYjNObEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpaWFIxY0VaaGJHeGlZV05yVkdsdFpYSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhScGJXVnlJRDBnSkhScGJXVnZkWFFvYjI1QmJtbHRZWFJwYjI1RmVIQnBjbVZrTENCMGFXMWxjbFJwYldVc0lHWmhiSE5sS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1YzBSaGRHRmJNRjBnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaWEk2SUhScGJXVnlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0dWamRHVmtSVzVrVkdsdFpUb2daVzVrVkdsdFpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1elJHRjBZUzV3ZFhOb0tHTnNiM05sS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzVrWVhSaEtFRk9TVTFCVkVWZlZFbE5SVkpmUzBWWkxDQmhibWx0WVhScGIyNXpSR0YwWVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwY3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzV2YmlobGRtVnVkSE11YW05cGJpZ25JQ2NwTENCdmJrRnVhVzFoZEdsdmJsQnliMmR5WlhOektUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwYVc5dWN5NTBieWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1amJHVmhiblZ3VTNSNWJHVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WbmFYTjBaWEpTWlhOMGIzSmhZbXhsVTNSNWJHVnpLSEpsYzNSdmNtVlRkSGxzWlhNc0lHNXZaR1VzSUU5aWFtVmpkQzVyWlhsektHOXdkR2x2Ym5NdWRHOHBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjSEJzZVVGdWFXMWhkR2x2YmxSdlUzUjViR1Z6S0dWc1pXMWxiblFzSUc5d2RHbHZibk1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYjI1QmJtbHRZWFJwYjI1RmVIQnBjbVZrS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHRnVhVzFoZEdsdmJuTkVZWFJoSUQwZ1pXeGxiV1Z1ZEM1a1lYUmhLRUZPU1UxQlZFVmZWRWxOUlZKZlMwVlpLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGFHbHpJSGRwYkd3Z1ltVWdabUZzYzJVZ2FXNGdkR2hsSUdWMlpXNTBJSFJvWVhRZ2RHaGxJR1ZzWlcxbGJuUWdkMkZ6WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ5WlcxdmRtVmtJR1p5YjIwZ2RHaGxJRVJQVFNBb2RtbGhJR0VnYkdWaGRtVWdZVzVwYldGMGFXOXVJRzl5SUhOdmJXVjBhR2x1WjF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnYzJsdGFXeGhjaWxjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hoYm1sdFlYUnBiMjV6UkdGMFlTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTVRzZ2FTQThJR0Z1YVcxaGRHbHZibk5FWVhSaExteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1YzBSaGRHRmJhVjBvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbkpsYlc5MlpVUmhkR0VvUVU1SlRVRlVSVjlVU1UxRlVsOUxSVmtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZUdGNjbHh1SUNCOVhUdGNjbHh1ZlYwN1hISmNibHh5WEc1MllYSWdKQ1JCYm1sdFlYUmxRM056UkhKcGRtVnlVSEp2ZG1sa1pYSWdQU0JiSnlRa1lXNXBiV0YwYVc5dVVISnZkbWxrWlhJbkxDQm1kVzVqZEdsdmJpZ2tKR0Z1YVcxaGRHbHZibEJ5YjNacFpHVnlLU0I3WEhKY2JpQWdKQ1JoYm1sdFlYUnBiMjVRY205MmFXUmxjaTVrY21sMlpYSnpMbkIxYzJnb0p5UWtZVzVwYldGMFpVTnpjMFJ5YVhabGNpY3BPMXh5WEc1Y2NseHVJQ0IyWVhJZ1RrZGZRVTVKVFVGVVJWOVRTRWxOWDBOTVFWTlRYMDVCVFVVZ1BTQW5ibWN0WVc1cGJXRjBaUzF6YUdsdEp6dGNjbHh1SUNCMllYSWdUa2RmUVU1SlRVRlVSVjlCVGtOSVQxSmZRMHhCVTFOZlRrRk5SU0E5SUNkdVp5MWhibU5vYjNJbk8xeHlYRzVjY2x4dUlDQjJZWElnVGtkZlQxVlVYMEZPUTBoUFVsOURURUZUVTE5T1FVMUZJRDBnSjI1bkxXRnVZMmh2Y2kxdmRYUW5PMXh5WEc0Z0lIWmhjaUJPUjE5SlRsOUJUa05JVDFKZlEweEJVMU5mVGtGTlJTQTlJQ2R1WnkxaGJtTm9iM0l0YVc0bk8xeHlYRzVjY2x4dUlDQm1kVzVqZEdsdmJpQnBjMFJ2WTNWdFpXNTBSbkpoWjIxbGJuUW9ibTlrWlNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUc1dlpHVXVjR0Z5Wlc1MFRtOWtaU0FtSmlCdWIyUmxMbkJoY21WdWRFNXZaR1V1Ym05a1pWUjVjR1VnUFQwOUlERXhPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdkR2hwY3k0a1oyVjBJRDBnV3lja1lXNXBiV0YwWlVOemN5Y3NJQ2NrY205dmRGTmpiM0JsSnl3Z0p5UWtRVzVwYldGMFpWSjFibTVsY2ljc0lDY2tjbTl2ZEVWc1pXMWxiblFuTENBbkpITnVhV1ptWlhJbkxDQW5KQ1JxY1V4cGRHVW5MQ0FuSkdSdlkzVnRaVzUwSnl4Y2NseHVJQ0FnSUNBZ0lHWjFibU4wYVc5dUtDUmhibWx0WVhSbFEzTnpMQ0FnSUNSeWIyOTBVMk52Y0dVc0lDQWdKQ1JCYm1sdFlYUmxVblZ1Ym1WeUxDQWdJQ1J5YjI5MFJXeGxiV1Z1ZEN3Z0lDQWtjMjVwWm1abGNpd2dJQ0FrSkdweFRHbDBaU3dnSUNBa1pHOWpkVzFsYm5RcElIdGNjbHh1WEhKY2JpQWdJQ0F2THlCdmJteDVJR0p5YjNkelpYSnpJSFJvWVhRZ2MzVndjRzl5ZENCMGFHVnpaU0J3Y205d1pYSjBhV1Z6SUdOaGJpQnlaVzVrWlhJZ1lXNXBiV0YwYVc5dWMxeHlYRzRnSUNBZ2FXWWdLQ0VrYzI1cFptWmxjaTVoYm1sdFlYUnBiMjV6SUNZbUlDRWtjMjVwWm1abGNpNTBjbUZ1YzJsMGFXOXVjeWtnY21WMGRYSnVJRzV2YjNBN1hISmNibHh5WEc0Z0lDQWdkbUZ5SUdKdlpIbE9iMlJsSUQwZ0pHUnZZM1Z0Wlc1MFd6QmRMbUp2WkhrN1hISmNiaUFnSUNCMllYSWdjbTl2ZEU1dlpHVWdQU0JuWlhSRWIyMU9iMlJsS0NSeWIyOTBSV3hsYldWdWRDazdYSEpjYmx4eVhHNGdJQ0FnZG1GeUlISnZiM1JDYjJSNVJXeGxiV1Z1ZENBOUlHcHhUR2wwWlNoY2NseHVJQ0FnSUNBZ0x5OGdkR2hwY3lCcGN5QjBieUJoZG05cFpDQjFjMmx1WnlCemIyMWxkR2hwYm1jZ2RHaGhkQ0JsZUdsemRITWdiM1YwYzJsa1pTQnZaaUIwYUdVZ1ltOWtlVnh5WEc0Z0lDQWdJQ0F2THlCM1pTQmhiSE52SUhOd1pXTnBZV3dnWTJGelpTQjBhR1VnWkc5aklHWnlZV2R0Wlc1MElHTmhjMlVnWW1WallYVnpaU0J2ZFhJZ2RXNXBkQ0IwWlhOMElHTnZaR1ZjY2x4dUlDQWdJQ0FnTHk4Z1lYQndaVzVrY3lCMGFHVWdKSEp2YjNSRmJHVnRaVzUwSUhSdklIUm9aU0JpYjJSNUlHRm1kR1Z5SUhSb1pTQmhjSEFnYUdGeklHSmxaVzRnWW05dmRITjBjbUZ3Y0dWa1hISmNiaUFnSUNBZ0lHbHpSRzlqZFcxbGJuUkdjbUZuYldWdWRDaHliMjkwVG05a1pTa2dmSHdnWW05a2VVNXZaR1V1WTI5dWRHRnBibk1vY205dmRFNXZaR1VwSUQ4Z2NtOXZkRTV2WkdVZ09pQmliMlI1VG05a1pWeHlYRzRnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1lYQndiSGxCYm1sdFlYUnBiMjVEYkdGemMyVnpJRDBnWVhCd2JIbEJibWx0WVhScGIyNURiR0Z6YzJWelJtRmpkRzl5ZVNna0pHcHhUR2wwWlNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHbHVhWFJFY21sMlpYSkdiaWhoYm1sdFlYUnBiMjVFWlhSaGFXeHpLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJoYm1sdFlYUnBiMjVFWlhSaGFXeHpMbVp5YjIwZ0ppWWdZVzVwYldGMGFXOXVSR1YwWVdsc2N5NTBiMXh5WEc0Z0lDQWdJQ0FnSUNBZ1B5QndjbVZ3WVhKbFJuSnZiVlJ2UVc1amFHOXlRVzVwYldGMGFXOXVLR0Z1YVcxaGRHbHZia1JsZEdGcGJITXVabkp2YlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1RVpYUmhhV3h6TG5SdkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNdVkyeGhjM05sY3l4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1RVpYUmhhV3h6TG1GdVkyaHZjbk1wWEhKY2JpQWdJQ0FnSUNBZ0lDQTZJSEJ5WlhCaGNtVlNaV2QxYkdGeVFXNXBiV0YwYVc5dUtHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNcE8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJtYVd4MFpYSkRjM05EYkdGemMyVnpLR05zWVhOelpYTXBJSHRjY2x4dUlDQWdJQ0FnTHk5eVpXMXZkbVVnWVd4c0lIUm9aU0JnYm1jdFlDQnpkSFZtWmx4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWTJ4aGMzTmxjeTV5WlhCc1lXTmxLQzljWEdKdVp5MWNYRk1yWEZ4aUwyY3NJQ2NuS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQm5aWFJWYm1seGRXVldZV3gxWlhNb1lTd2dZaWtnZTF4eVhHNGdJQ0FnSUNCcFppQW9hWE5UZEhKcGJtY29ZU2twSUdFZ1BTQmhMbk53YkdsMEtDY2dKeWs3WEhKY2JpQWdJQ0FnSUdsbUlDaHBjMU4wY21sdVp5aGlLU2tnWWlBOUlHSXVjM0JzYVhRb0p5QW5LVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR0V1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLSFpoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmlMbWx1WkdWNFQyWW9kbUZzS1NBOVBUMGdMVEU3WEhKY2JpQWdJQ0FnSUgwcExtcHZhVzRvSnlBbktUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ3Y21Wd1lYSmxRVzVqYUc5eVpXUkJibWx0WVhScGIyNG9ZMnhoYzNObGN5d2diM1YwUVc1amFHOXlMQ0JwYmtGdVkyaHZjaWtnZTF4eVhHNGdJQ0FnSUNCMllYSWdZMnh2Ym1VZ1BTQnFjVXhwZEdVb1oyVjBSRzl0VG05a1pTaHZkWFJCYm1Ob2IzSXBMbU5zYjI1bFRtOWtaU2gwY25WbEtTazdYSEpjYmlBZ0lDQWdJSFpoY2lCemRHRnlkR2x1WjBOc1lYTnpaWE1nUFNCbWFXeDBaWEpEYzNORGJHRnpjMlZ6S0dkbGRFTnNZWE56Vm1Gc0tHTnNiMjVsS1NrN1hISmNibHh5WEc0Z0lDQWdJQ0J2ZFhSQmJtTm9iM0l1WVdSa1EyeGhjM01vVGtkZlFVNUpUVUZVUlY5VFNFbE5YME5NUVZOVFgwNUJUVVVwTzF4eVhHNGdJQ0FnSUNCcGJrRnVZMmh2Y2k1aFpHUkRiR0Z6Y3loT1IxOUJUa2xOUVZSRlgxTklTVTFmUTB4QlUxTmZUa0ZOUlNrN1hISmNibHh5WEc0Z0lDQWdJQ0JqYkc5dVpTNWhaR1JEYkdGemN5aE9SMTlCVGtsTlFWUkZYMEZPUTBoUFVsOURURUZUVTE5T1FVMUZLVHRjY2x4dVhISmNiaUFnSUNBZ0lISnZiM1JDYjJSNVJXeGxiV1Z1ZEM1aGNIQmxibVFvWTJ4dmJtVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2RtRnlJR0Z1YVcxaGRHOXlTVzRzSUdGdWFXMWhkRzl5VDNWMElEMGdjSEpsY0dGeVpVOTFkRUZ1YVcxaGRHbHZiaWdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnZEdobElIVnpaWElnYldGNUlHNXZkQ0JsYm1RZ2RYQWdkWE5wYm1jZ2RHaGxJR0J2ZFhSZ0lHRnVhVzFoZEdsdmJpQmhibVJjY2x4dUlDQWdJQ0FnTHk4Z2IyNXNlU0J0WVd0cGJtY2dkWE5sSUc5bUlIUm9aU0JnYVc1Z0lHRnVhVzFoZEdsdmJpQnZjaUIyYVdObExYWmxjbk5oTGx4eVhHNGdJQ0FnSUNBdkx5QkpiaUJsYVhSb1pYSWdZMkZ6WlNCM1pTQnphRzkxYkdRZ1lXeHNiM2NnZEdocGN5QmhibVFnYm05MElHRnpjM1Z0WlNCMGFHVmNjbHh1SUNBZ0lDQWdMeThnWVc1cGJXRjBhVzl1SUdseklHOTJaWElnZFc1c1pYTnpJR0p2ZEdnZ1lXNXBiV0YwYVc5dWN5QmhjbVVnYm05MElIVnpaV1F1WEhKY2JpQWdJQ0FnSUdsbUlDZ2hZVzVwYldGMGIzSlBkWFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQmhibWx0WVhSdmNrbHVJRDBnY0hKbGNHRnlaVWx1UVc1cGJXRjBhVzl1S0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGaGJtbHRZWFJ2Y2tsdUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlc1a0tDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0IyWVhJZ2MzUmhjblJwYm1kQmJtbHRZWFJ2Y2lBOUlHRnVhVzFoZEc5eVQzVjBJSHg4SUdGdWFXMWhkRzl5U1c0N1hISmNibHh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdJQ0FnSUhOMFlYSjBPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCeWRXNXVaWEk3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHTjFjbkpsYm5SQmJtbHRZWFJwYjI0Z1BTQnpkR0Z5ZEdsdVowRnVhVzFoZEc5eUxuTjBZWEowS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBRVzVwYldGMGFXOXVMbVJ2Ym1Vb1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SQmJtbHRZWFJwYjI0Z1BTQnVkV3hzTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXRnVhVzFoZEc5eVNXNHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUnZja2x1SUQwZ2NISmxjR0Z5WlVsdVFXNXBiV0YwYVc5dUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGdWFXMWhkRzl5U1c0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUkJibWx0WVhScGIyNGdQU0JoYm1sdFlYUnZja2x1TG5OMFlYSjBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwUVc1cGJXRjBhVzl1TG1SdmJtVW9ablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SQmJtbHRZWFJwYjI0Z1BTQnVkV3hzTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1Ym1WeUxtTnZiWEJzWlhSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwUVc1cGJXRjBhVzl1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcGJpQjBhR1VnWlhabGJuUWdkR2hoZENCMGFHVnlaU0JwY3lCdWJ5QmdhVzVnSUdGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm1Rb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NuVnVibVZ5TG1OdmJYQnNaWFJsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCeWRXNXVaWElnUFNCdVpYY2dKQ1JCYm1sdFlYUmxVblZ1Ym1WeUtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNWtPaUJsYm1SR2JpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnVZMlZzT2lCbGJtUkdibHh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISjFibTVsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCbGJtUkdiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SQmJtbHRZWFJwYjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFFXNXBiV0YwYVc5dUxtVnVaQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnWTJGc1kzVnNZWFJsUVc1amFHOXlVM1I1YkdWektHRnVZMmh2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCemRIbHNaWE1nUFNCN2ZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR052YjNKa2N5QTlJR2RsZEVSdmJVNXZaR1VvWVc1amFHOXlLUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYVhSbGNtRjBaU0JrYVhKbFkzUnNlU0J6YVc1alpTQnpZV1poY21rZ2JXVnpjMlZ6SUhWd0lHRnVaQ0JrYjJWemJpZDBJSEpsZEhWeWJseHlYRzRnSUNBZ0lDQWdJQzh2SUdGc2JDQjBhR1VnYTJWNWN5Qm1iM0lnZEdobElHTnZiM0prY3lCdlltcGxZM1FnZDJobGJpQnBkR1Z5WVhSbFpGeHlYRzRnSUNBZ0lDQWdJR1p2Y2tWaFkyZ29XeWQzYVdSMGFDY3NKMmhsYVdkb2RDY3NKM1J2Y0Njc0oyeGxablFuWFN3Z1puVnVZM1JwYjI0b2EyVjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0JqYjI5eVpITmJhMlY1WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9hMlY1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1J2Y0NjNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnS3owZ1ltOWtlVTV2WkdVdWMyTnliMnhzVkc5d08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHNaV1owSnpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaU0FyUFNCaWIyUjVUbTlrWlM1elkzSnZiR3hNWldaME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2MzUjViR1Z6VzJ0bGVWMGdQU0JOWVhSb0xtWnNiMjl5S0haaGJIVmxLU0FySUNkd2VDYzdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjBlV3hsY3p0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnY0hKbGNHRnlaVTkxZEVGdWFXMWhkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1lXNXBiV0YwYjNJZ1BTQWtZVzVwYldGMFpVTnpjeWhqYkc5dVpTd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1lXUmtRMnhoYzNNNklFNUhYMDlWVkY5QlRrTklUMUpmUTB4QlUxTmZUa0ZOUlN4Y2NseHVJQ0FnSUNBZ0lDQWdJR1JsYkdGNU9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdabkp2YlRvZ1kyRnNZM1ZzWVhSbFFXNWphRzl5VTNSNWJHVnpLRzkxZEVGdVkyaHZjaWxjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdjbVZoWkNCMGFHVWdZMjl0YldWdWRDQjNhWFJvYVc0Z1lIQnlaWEJoY21WU1pXZDFiR0Z5UVc1cGJXRjBhVzl1WUNCMGJ5QjFibVJsY25OMFlXNWtYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2QyaDVJSFJvYVhNZ1kyaGxZMnNnYVhNZ2JtVmpaWE56WVhKNVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRnVhVzFoZEc5eUxpUWtkMmxzYkVGdWFXMWhkR1VnUHlCaGJtbHRZWFJ2Y2lBNklHNTFiR3c3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1oxYm1OMGFXOXVJR2RsZEVOc1lYTnpWbUZzS0dWc1pXMWxiblFwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZEM1aGRIUnlLQ2RqYkdGemN5Y3BJSHg4SUNjbk8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCd2NtVndZWEpsU1c1QmJtbHRZWFJwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVaR2x1WjBOc1lYTnpaWE1nUFNCbWFXeDBaWEpEYzNORGJHRnpjMlZ6S0dkbGRFTnNZWE56Vm1Gc0tHbHVRVzVqYUc5eUtTazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIUnZRV1JrSUQwZ1oyVjBWVzVwY1hWbFZtRnNkV1Z6S0dWdVpHbHVaME5zWVhOelpYTXNJSE4wWVhKMGFXNW5RMnhoYzNObGN5azdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIUnZVbVZ0YjNabElEMGdaMlYwVlc1cGNYVmxWbUZzZFdWektITjBZWEowYVc1blEyeGhjM05sY3l3Z1pXNWthVzVuUTJ4aGMzTmxjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCaGJtbHRZWFJ2Y2lBOUlDUmhibWx0WVhSbFEzTnpLR05zYjI1bExDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGJ6b2dZMkZzWTNWc1lYUmxRVzVqYUc5eVUzUjViR1Z6S0dsdVFXNWphRzl5S1N4Y2NseHVJQ0FnSUNBZ0lDQWdJR0ZrWkVOc1lYTnpPaUJPUjE5SlRsOUJUa05JVDFKZlEweEJVMU5mVGtGTlJTQXJJQ2NnSnlBcklIUnZRV1JrTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ0YjNabFEyeGhjM002SUU1SFgwOVZWRjlCVGtOSVQxSmZRMHhCVTFOZlRrRk5SU0FySUNjZ0p5QXJJSFJ2VW1WdGIzWmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNZWGs2SUhSeWRXVmNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2NtVmhaQ0IwYUdVZ1kyOXRiV1Z1ZENCM2FYUm9hVzRnWUhCeVpYQmhjbVZTWldkMWJHRnlRVzVwYldGMGFXOXVZQ0IwYnlCMWJtUmxjbk4wWVc1a1hISmNiaUFnSUNBZ0lDQWdMeThnZDJoNUlIUm9hWE1nWTJobFkyc2dhWE1nYm1WalpYTnpZWEo1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGdWFXMWhkRzl5TGlRa2QybHNiRUZ1YVcxaGRHVWdQeUJoYm1sdFlYUnZjaUE2SUc1MWJHdzdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHVnVaQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiRzl1WlM1eVpXMXZkbVVvS1R0Y2NseHVJQ0FnSUNBZ0lDQnZkWFJCYm1Ob2IzSXVjbVZ0YjNabFEyeGhjM01vVGtkZlFVNUpUVUZVUlY5VFNFbE5YME5NUVZOVFgwNUJUVVVwTzF4eVhHNGdJQ0FnSUNBZ0lHbHVRVzVqYUc5eUxuSmxiVzkyWlVOc1lYTnpLRTVIWDBGT1NVMUJWRVZmVTBoSlRWOURURUZUVTE5T1FVMUZLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlIQnlaWEJoY21WR2NtOXRWRzlCYm1Ob2IzSkJibWx0WVhScGIyNG9abkp2YlN3Z2RHOHNJR05zWVhOelpYTXNJR0Z1WTJodmNuTXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlHWnliMjFCYm1sdFlYUnBiMjRnUFNCd2NtVndZWEpsVW1WbmRXeGhja0Z1YVcxaGRHbHZiaWhtY205dExDQnViMjl3S1R0Y2NseHVJQ0FnSUNBZ2RtRnlJSFJ2UVc1cGJXRjBhVzl1SUQwZ2NISmxjR0Z5WlZKbFozVnNZWEpCYm1sdFlYUnBiMjRvZEc4c0lHNXZiM0FwTzF4eVhHNWNjbHh1SUNBZ0lDQWdkbUZ5SUdGdVkyaHZja0Z1YVcxaGRHbHZibk1nUFNCYlhUdGNjbHh1SUNBZ0lDQWdabTl5UldGamFDaGhibU5vYjNKekxDQm1kVzVqZEdsdmJpaGhibU5vYjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2IzVjBSV3hsYldWdWRDQTlJR0Z1WTJodmNsc25iM1YwSjEwN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVJXeGxiV1Z1ZENBOUlHRnVZMmh2Y2xzbmFXNG5YVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZVzVwYldGMGIzSWdQU0J3Y21Wd1lYSmxRVzVqYUc5eVpXUkJibWx0WVhScGIyNG9ZMnhoYzNObGN5d2diM1YwUld4bGJXVnVkQ3dnYVc1RmJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWVc1cGJXRjBiM0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR0Z1WTJodmNrRnVhVzFoZEdsdmJuTXVjSFZ6YUNoaGJtbHRZWFJ2Y2lrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUc1dklIQnZhVzUwSUdsdUlHUnZhVzVuSUdGdWVYUm9hVzVuSUhkb1pXNGdkR2hsY21VZ1lYSmxJRzV2SUdWc1pXMWxiblJ6SUhSdklHRnVhVzFoZEdWY2NseHVJQ0FnSUNBZ2FXWWdLQ0ZtY205dFFXNXBiV0YwYVc5dUlDWW1JQ0YwYjBGdWFXMWhkR2x2YmlBbUppQmhibU5vYjNKQmJtbHRZWFJwYjI1ekxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllYSWdZVzVwYldGMGFXOXVVblZ1Ym1WeWN5QTlJRnRkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG1jbTl0UVc1cGJXRjBhVzl1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2YmxKMWJtNWxjbk11Y0hWemFDaG1jbTl0UVc1cGJXRjBhVzl1TG5OMFlYSjBLQ2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGIwRnVhVzFoZEdsdmJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNVNkVzV1WlhKekxuQjFjMmdvZEc5QmJtbHRZWFJwYjI0dWMzUmhjblFvS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnWm05eVJXRmphQ2hoYm1Ob2IzSkJibWx0WVhScGIyNXpMQ0JtZFc1amRHbHZiaWhoYm1sdFlYUnBiMjRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1VW5WdWJtVnljeTV3ZFhOb0tHRnVhVzFoZEdsdmJpNXpkR0Z5ZENncEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ5ZFc1dVpYSWdQU0J1WlhjZ0pDUkJibWx0WVhSbFVuVnVibVZ5S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1a09pQmxibVJHYml4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGdVkyVnNPaUJsYm1SR2JpQXZMeUJEVTFNdFpISnBkbVZ1SUdGdWFXMWhkR2x2Ym5NZ1kyRnVibTkwSUdKbElHTmhibU5sYkd4bFpDd2diMjVzZVNCbGJtUmxaRnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdKQ1JCYm1sdFlYUmxVblZ1Ym1WeUxtRnNiQ2hoYm1sdFlYUnBiMjVTZFc1dVpYSnpMQ0JtZFc1amRHbHZiaWh6ZEdGMGRYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjblZ1Ym1WeUxtTnZiWEJzWlhSbEtITjBZWFIxY3lrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY25WdWJtVnlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR1Z1WkVadUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0pGWVdOb0tHRnVhVzFoZEdsdmJsSjFibTVsY25Nc0lHWjFibU4wYVc5dUtISjFibTVsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISjFibTVsY2k1bGJtUW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOU8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSEJ5WlhCaGNtVlNaV2QxYkdGeVFXNXBiV0YwYVc5dUtHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNcElIdGNjbHh1SUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCaGJtbHRZWFJwYjI1RVpYUmhhV3h6TG1Wc1pXMWxiblE3WEhKY2JpQWdJQ0FnSUhaaGNpQnZjSFJwYjI1eklEMGdZVzVwYldGMGFXOXVSR1YwWVdsc2N5NXZjSFJwYjI1eklIeDhJSHQ5TzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0dGdWFXMWhkR2x2YmtSbGRHRnBiSE11YzNSeWRXTjBkWEpoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVaWFpsYm5RZ1BTQmhibWx0WVhScGIyNUVaWFJoYVd4ekxtVjJaVzUwTzF4eVhHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWMzUnlkV04wZFhKaGJDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NWhjSEJzZVVOc1lYTnpaWE5GWVhKc2VTQTlJSFJ5ZFdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklIZGxJSE53WldOcFlXd2dZMkZ6WlNCMGFHVWdiR1ZoZG1VZ1lXNXBiV0YwYVc5dUlITnBibU5sSUhkbElIZGhiblFnZEc4Z1pXNXpkWEpsSUhSb1lYUmNjbHh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdaV3hsYldWdWRDQnBjeUJ5WlcxdmRtVmtJR0Z6SUhOdmIyNGdZWE1nZEdobElHRnVhVzFoZEdsdmJpQnBjeUJ2ZG1WeUxpQlBkR2hsY25kcGMyVmNjbHh1SUNBZ0lDQWdJQ0F2THlCaElHWnNhV05yWlhJZ2JXbG5hSFFnWVhCd1pXRnlJRzl5SUhSb1pTQmxiR1Z0Wlc1MElHMWhlU0J1YjNRZ1ltVWdjbVZ0YjNabFpDQmhkQ0JoYkd4Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWVc1cGJXRjBhVzl1UkdWMFlXbHNjeTVsZG1WdWRDQTlQVDBnSjJ4bFlYWmxKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXZia1J2Ym1VZ1BTQnZjSFJwYjI1ekxtUnZiVTl3WlhKaGRHbHZianRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUM4dklGZGxJR0Z6YzJsbmJpQjBhR1VnY0hKbGNHRnlZWFJwYjI1RGJHRnpjMlZ6SUdGeklIUm9aU0JoWTNSMVlXd2dZVzVwYldGMGFXOXVJR1YyWlc1MElITnBibU5sWEhKY2JpQWdJQ0FnSUM4dklIUm9aU0JwYm5SbGNtNWhiSE1nYjJZZ0pHRnVhVzFoZEdWRGMzTWdkMmxzYkNCcWRYTjBJSE4xWm1acGVDQjBhR1VnWlhabGJuUWdkRzlyWlc0Z2RtRnNkV1Z6WEhKY2JpQWdJQ0FnSUM4dklIZHBkR2dnWUMxaFkzUnBkbVZnSUhSdklIUnlhV2RuWlhJZ2RHaGxJR0Z1YVcxaGRHbHZiaTVjY2x4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWNISmxjR0Z5WVhScGIyNURiR0Z6YzJWektTQjdYSEpjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVsZG1WdWRDQTlJR052Ym1OaGRGZHBkR2hUY0dGalpTaHZjSFJwYjI1ekxtVjJaVzUwTENCdmNIUnBiMjV6TG5CeVpYQmhjbUYwYVc5dVEyeGhjM05sY3lrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhaaGNpQmhibWx0WVhSdmNpQTlJQ1JoYm1sdFlYUmxRM056S0dWc1pXMWxiblFzSUc5d2RHbHZibk1wTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnZEdobElHUnlhWFpsY2lCc2IyOXJkWEFnWTI5a1pTQnBibk5wWkdVZ2IyWWdKQ1JoYm1sdFlYUnBiMjRnWVhSMFpXMXdkSE1nZEc4Z2MzQmhkMjRnWVZ4eVhHNGdJQ0FnSUNBdkx5QmtjbWwyWlhJZ2IyNWxJR0o1SUc5dVpTQjFiblJwYkNCaElHUnlhWFpsY2lCeVpYUjFjbTV6SUdFdUpDUjNhV3hzUVc1cGJXRjBaU0JoYm1sdFlYUnZjaUJ2WW1wbFkzUXVYSEpjYmlBZ0lDQWdJQzh2SUNSaGJtbHRZWFJsUTNOeklIZHBiR3dnWVd4M1lYbHpJSEpsZEhWeWJpQmhiaUJ2WW1wbFkzUXNJR2h2ZDJWMlpYSXNJR2wwSUhkcGJHd2djR0Z6Y3lCcGJseHlYRzRnSUNBZ0lDQXZMeUJoSUdac1lXY2dZWE1nWVNCb2FXNTBJR0Z6SUhSdklIZG9aWFJvWlhJZ1lXNGdZVzVwYldGMGFXOXVJSGRoY3lCa1pYUmxZM1JsWkNCdmNpQnViM1JjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR0Z1YVcxaGRHOXlMaVFrZDJsc2JFRnVhVzFoZEdVZ1B5QmhibWx0WVhSdmNpQTZJRzUxYkd3N1hISmNiaUFnSUNCOVhISmNiaUFnZlYwN1hISmNibjFkTzF4eVhHNWNjbHh1THk4Z1ZFOUVUeWh0WVhSemEyOHBPaUIxYzJVZ1kyRmphR2x1WnlCb1pYSmxJSFJ2SUhOd1pXVmtJSFJvYVc1bmN5QjFjQ0JtYjNJZ1pHVjBaV04wYVc5dVhISmNiaTh2SUZSUFJFOG9iV0YwYzJ0dktUb2dZV1JrSUdSdlkzVnRaVzUwWVhScGIyNWNjbHh1THk4Z0lHSjVJSFJvWlNCMGFXMWxMaTR1WEhKY2JseHlYRzUyWVhJZ0pDUkJibWx0WVhSbFNuTlFjbTkyYVdSbGNpQTlJRnNuSkdGdWFXMWhkR1ZRY205MmFXUmxjaWNzSUdaMWJtTjBhVzl1S0NSaGJtbHRZWFJsVUhKdmRtbGtaWElwSUh0Y2NseHVJQ0IwYUdsekxpUm5aWFFnUFNCYkp5UnBibXBsWTNSdmNpY3NJQ2NrSkVGdWFXMWhkR1ZTZFc1dVpYSW5MQ0FuSkNScWNVeHBkR1VuTEZ4eVhHNGdJQ0FnSUNBZ1puVnVZM1JwYjI0b0pHbHVhbVZqZEc5eUxDQWdJQ1FrUVc1cGJXRjBaVkoxYm01bGNpd2dJQ0FrSkdweFRHbDBaU2tnZTF4eVhHNWNjbHh1SUNBZ0lIWmhjaUJoY0hCc2VVRnVhVzFoZEdsdmJrTnNZWE56WlhNZ1BTQmhjSEJzZVVGdWFXMWhkR2x2YmtOc1lYTnpaWE5HWVdOMGIzSjVLQ1FrYW5GTWFYUmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0x5OGdKR0Z1YVcxaGRHVktjeWhsYkdWdFpXNTBMQ0FuWlc1MFpYSW5LVHRjY2x4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MExDQmxkbVZ1ZEN3Z1kyeGhjM05sY3l3Z2IzQjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1UTJ4dmMyVmtJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5QjBhR1VnWUdOc1lYTnpaWE5nSUdGeVozVnRaVzUwSUdseklHOXdkR2x2Ym1Gc0lHRnVaQ0JwWmlCcGRDQnBjeUJ1YjNRZ2RYTmxaRnh5WEc0Z0lDQWdJQ0F2THlCMGFHVnVJSFJvWlNCamJHRnpjMlZ6SUhkcGJHd2dZbVVnY21WemIyeDJaV1FnWm5KdmJTQjBhR1VnWld4bGJXVnVkQ2R6SUdOc1lYTnpUbUZ0WlZ4eVhHNGdJQ0FnSUNBdkx5QndjbTl3WlhKMGVTQmhjeUIzWld4c0lHRnpJRzl3ZEdsdmJuTXVZV1JrUTJ4aGMzTXZiM0IwYVc5dWN5NXlaVzF2ZG1WRGJHRnpjeTVjY2x4dUlDQWdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJRE1nSmlZZ2FYTlBZbXBsWTNRb1kyeGhjM05sY3lrcElIdGNjbHh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnWTJ4aGMzTmxjenRjY2x4dUlDQWdJQ0FnSUNCamJHRnpjMlZ6SUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJSEJ5WlhCaGNtVkJibWx0WVhScGIyNVBjSFJwYjI1ektHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQnBaaUFvSVdOc1lYTnpaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiR0Z6YzJWeklEMGdaV3hsYldWdWRDNWhkSFJ5S0NkamJHRnpjeWNwSUh4OElDY25PMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtRmtaRU5zWVhOektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMlZ6SUNzOUlDY2dKeUFySUc5d2RHbHZibk11WVdSa1EyeGhjM003WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG5KbGJXOTJaVU5zWVhOektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMlZ6SUNzOUlDY2dKeUFySUc5d2RHbHZibk11Y21WdGIzWmxRMnhoYzNNN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQjJZWElnWTJ4aGMzTmxjMVJ2UVdSa0lEMGdiM0IwYVc5dWN5NWhaR1JEYkdGemN6dGNjbHh1SUNBZ0lDQWdkbUZ5SUdOc1lYTnpaWE5VYjFKbGJXOTJaU0E5SUc5d2RHbHZibk11Y21WdGIzWmxRMnhoYzNNN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCMGFHVWdiRzl2YTNWd1FXNXBiV0YwYVc5dWN5Qm1kVzVqZEdsdmJpQnlaWFIxY201eklHRWdjMlZ5YVdWeklHOW1JR0Z1YVcxaGRHbHZiaUJ2WW1wbFkzUnpJSFJvWVhRZ1lYSmxYSEpjYmlBZ0lDQWdJQzh2SUcxaGRHTm9aV1FnZFhBZ2QybDBhQ0J2Ym1VZ2IzSWdiVzl5WlNCdlppQjBhR1VnUTFOVElHTnNZWE56WlhNdUlGUm9aWE5sSUdGdWFXMWhkR2x2YmlCdlltcGxZM1J6SUdGeVpWeHlYRzRnSUNBZ0lDQXZMeUJrWldacGJtVmtJSFpwWVNCMGFHVWdiVzlrZFd4bExtRnVhVzFoZEdsdmJpQm1ZV04wYjNKNUlHWjFibU4wYVc5dUxpQkpaaUJ1YjNSb2FXNW5JR2x6SUdSbGRHVmpkR1ZrSUhSb1pXNWNjbHh1SUNBZ0lDQWdMeThnZDJVZ1pHOXVKM1FnY21WMGRYSnVJR0Z1ZVhSb2FXNW5JSGRvYVdOb0lIUm9aVzRnYldGclpYTWdKR0Z1YVcxaGRHbHZiaUJ4ZFdWeWVTQjBhR1VnYm1WNGRDQmtjbWwyWlhJdVhISmNiaUFnSUNBZ0lIWmhjaUJoYm1sdFlYUnBiMjV6SUQwZ2JHOXZhM1Z3UVc1cGJXRjBhVzl1Y3loamJHRnpjMlZ6S1R0Y2NseHVJQ0FnSUNBZ2RtRnlJR0psWm05eVpTd2dZV1owWlhJN1hISmNiaUFnSUNBZ0lHbG1JQ2hoYm1sdFlYUnBiMjV6TG14bGJtZDBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJoWm5SbGNrWnVMQ0JpWldadmNtVkdianRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5RZ1BUMGdKMnhsWVhabEp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1ltVm1iM0psUm00Z1BTQW5iR1ZoZG1Vbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnWVdaMFpYSkdiaUE5SUNkaFpuUmxja3hsWVhabEp6c2dMeThnVkU5RVR5aHRZWFJ6YTI4cE9pQm5aWFFnY21sa0lHOW1JSFJvYVhOY2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWW1WbWIzSmxSbTRnUFNBblltVm1iM0psSnlBcklHVjJaVzUwTG1Ob1lYSkJkQ2d3S1M1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnWlhabGJuUXVjM1ZpYzNSeUtERXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1lXWjBaWEpHYmlBOUlHVjJaVzUwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MElDRTlQU0FuWlc1MFpYSW5JQ1ltSUdWMlpXNTBJQ0U5UFNBbmJXOTJaU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR0psWm05eVpTQTlJSEJoWTJ0aFoyVkJibWx0WVhScGIyNXpLR1ZzWlcxbGJuUXNJR1YyWlc1MExDQnZjSFJwYjI1ekxDQmhibWx0WVhScGIyNXpMQ0JpWldadmNtVkdiaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR0ZtZEdWeUlDQTlJSEJoWTJ0aFoyVkJibWx0WVhScGIyNXpLR1ZzWlcxbGJuUXNJR1YyWlc1MExDQnZjSFJwYjI1ekxDQmhibWx0WVhScGIyNXpMQ0JoWm5SbGNrWnVLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdMeThnYm04Z2JXRjBZMmhwYm1jZ1lXNXBiV0YwYVc5dWMxeHlYRzRnSUNBZ0lDQnBaaUFvSVdKbFptOXlaU0FtSmlBaFlXWjBaWElwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHRndjR3g1VDNCMGFXOXVjeWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtUnZiVTl3WlhKaGRHbHZiaWdwTzF4eVhHNGdJQ0FnSUNBZ0lHRndjR3g1UVc1cGJXRjBhVzl1UTJ4aGMzTmxjeWhsYkdWdFpXNTBMQ0J2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdablZ1WTNScGIyNGdZMnh2YzJVb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1UTJ4dmMyVmtJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0JoY0hCc2VVOXdkR2x2Ym5Nb0tUdGNjbHh1SUNBZ0lDQWdJQ0JoY0hCc2VVRnVhVzFoZEdsdmJsTjBlV3hsY3lobGJHVnRaVzUwTENCdmNIUnBiMjV6S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnZG1GeUlISjFibTVsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQWdJQ0FnSkNSM2FXeHNRVzVwYldGMFpUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQmxibVE2SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tISjFibTVsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeWRXNXVaWEl1Wlc1a0tDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkc5elpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlkVzV1WlhJZ1BTQnVaWGNnSkNSQmJtbHRZWFJsVW5WdWJtVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEoxYm01bGNpNWpiMjF3YkdWMFpTaDBjblZsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWRXNXVaWEk3WEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0J6ZEdGeWREb2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY25WdWJtVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlkVzV1WlhJN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnY25WdWJtVnlJRDBnYm1WM0lDUWtRVzVwYldGMFpWSjFibTVsY2lncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHTnNiM05sUVdOMGFYWmxRVzVwYldGMGFXOXVjenRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJqYUdGcGJpQTlJRnRkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGlaV1p2Y21VcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhhVzR1Y0hWemFDaG1kVzVqZEdsdmJpaG1iaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2IzTmxRV04wYVhabFFXNXBiV0YwYVc5dWN5QTlJR0psWm05eVpTaG1iaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoamFHRnBiaTVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoYVc0dWNIVnphQ2htZFc1amRHbHZiaWhtYmlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRndjR3g1VDNCMGFXOXVjeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdadUtIUnlkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRndjR3g1VDNCMGFXOXVjeWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoaFpuUmxjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGcGJpNXdkWE5vS0daMWJtTjBhVzl1S0dadUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh2YzJWQlkzUnBkbVZCYm1sdFlYUnBiMjV6SUQwZ1lXWjBaWElvWm00cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCeWRXNXVaWEl1YzJWMFNHOXpkQ2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WkRvZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzVrUVc1cGJXRjBhVzl1Y3lncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallXNWpaV3c2SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVaRUZ1YVcxaGRHbHZibk1vZEhKMVpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDUWtRVzVwYldGMFpWSjFibTVsY2k1amFHRnBiaWhqYUdGcGJpd2diMjVEYjIxd2JHVjBaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NuVnVibVZ5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUc5dVEyOXRjR3hsZEdVb2MzVmpZMlZ6Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaU2h6ZFdOalpYTnpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjblZ1Ym1WeUxtTnZiWEJzWlhSbEtITjFZMk5sYzNNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdWdVpFRnVhVzFoZEdsdmJuTW9ZMkZ1WTJWc2JHVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlXNXBiV0YwYVc5dVEyeHZjMlZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tHTnNiM05sUVdOMGFYWmxRVzVwYldGMGFXOXVjeUI4ZkNCdWIyOXdLU2hqWVc1alpXeHNaV1FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyOXRjR3hsZEdVb1kyRnVZMlZzYkdWa0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHVjRaV04xZEdWQmJtbHRZWFJwYjI1R2JpaG1iaXdnWld4bGJXVnVkQ3dnWlhabGJuUXNJRzl3ZEdsdmJuTXNJRzl1Ukc5dVpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmhjbWR6TzF4eVhHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb1pYWmxiblFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyRnVhVzFoZEdVbk9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpJRDBnVzJWc1pXMWxiblFzSUc5d2RHbHZibk11Wm5KdmJTd2diM0IwYVc5dWN5NTBieXdnYjI1RWIyNWxYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYzJWMFEyeGhjM01uT2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21keklEMGdXMlZzWlcxbGJuUXNJR05zWVhOelpYTlViMEZrWkN3Z1kyeGhjM05sYzFSdlVtVnRiM1psTENCdmJrUnZibVZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkaFpHUkRiR0Z6Y3ljNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVozTWdQU0JiWld4bGJXVnVkQ3dnWTJ4aGMzTmxjMVJ2UVdSa0xDQnZia1J2Ym1WZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZHlaVzF2ZG1WRGJHRnpjeWM2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNNZ1BTQmJaV3hsYldWdWRDd2dZMnhoYzNObGMxUnZVbVZ0YjNabExDQnZia1J2Ym1WZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWR6SUQwZ1cyVnNaVzFsYm5Rc0lHOXVSRzl1WlYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWVhKbmN5NXdkWE5vS0c5d2RHbHZibk1wTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCbWJpNWhjSEJzZVNobWJpd2dZWEpuY3lrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOR2RXNWpkR2x2YmloMllXeDFaUzV6ZEdGeWRDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQjJZV3gxWlM1emRHRnlkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeDFaU0JwYm5OMFlXNWpaVzltSUNRa1FXNXBiV0YwWlZKMWJtNWxjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNWtiMjVsS0c5dVJHOXVaU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6Um5WdVkzUnBiMjRvZG1Gc2RXVXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUc5d2RHbHZibUZzSUc5dVJXNWtJQzhnYjI1RFlXNWpaV3dnWTJGc2JHSmhZMnRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzV2YjNBN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdkeWIzVndSWFpsYm5SbFpFRnVhVzFoZEdsdmJuTW9aV3hsYldWdWRDd2daWFpsYm5Rc0lHOXdkR2x2Ym5Nc0lHRnVhVzFoZEdsdmJuTXNJR1p1VG1GdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnZjR1Z5WVhScGIyNXpJRDBnVzEwN1hISmNiaUFnSUNBZ0lDQWdabTl5UldGamFDaGhibWx0WVhScGIyNXpMQ0JtZFc1amRHbHZiaWhoYm1rcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQmhibWx0WVhScGIyNGdQU0JoYm1sYlptNU9ZVzFsWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlXNXBiV0YwYVc5dUtTQnlaWFIxY200N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdibTkwWlNCMGFHRjBJR0ZzYkNCdlppQjBhR1Z6WlNCaGJtbHRZWFJwYjI1eklIZHBiR3dnY25WdUlHbHVJSEJoY21Gc2JHVnNYSEpjYmlBZ0lDQWdJQ0FnSUNCdmNHVnlZWFJwYjI1ekxuQjFjMmdvWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlkVzV1WlhJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxibVJRY205bmNtVnpjME5pTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzI5c2RtVmtJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2YmtGdWFXMWhkR2x2YmtOdmJYQnNaWFJsSUQwZ1puVnVZM1JwYjI0b2NtVnFaV04wWldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbGMyOXNkbVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabFpDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9aVzVrVUhKdlozSmxjM05EWWlCOGZDQnViMjl3S1NoeVpXcGxZM1JsWkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkVzV1WlhJdVkyOXRjR3hsZEdVb0lYSmxhbVZqZEdWa0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5ZFc1dVpYSWdQU0J1WlhjZ0pDUkJibWx0WVhSbFVuVnVibVZ5S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNUJibWx0WVhScGIyNURiMjF3YkdWMFpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGdVkyVnNPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRVzVwYldGMGFXOXVRMjl0Y0d4bGRHVW9kSEoxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WkZCeWIyZHlaWE56UTJJZ1BTQmxlR1ZqZFhSbFFXNXBiV0YwYVc5dVJtNG9ZVzVwYldGMGFXOXVMQ0JsYkdWdFpXNTBMQ0JsZG1WdWRDd2diM0IwYVc5dWN5d2dablZ1WTNScGIyNG9jbVZ6ZFd4MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOaGJtTmxiR3hsWkNBOUlISmxjM1ZzZENBOVBUMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IyNUJibWx0WVhScGIyNURiMjF3YkdWMFpTaGpZVzVqWld4c1pXUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5ZFc1dVpYSTdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzl3WlhKaGRHbHZibk03WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1oxYm1OMGFXOXVJSEJoWTJ0aFoyVkJibWx0WVhScGIyNXpLR1ZzWlcxbGJuUXNJR1YyWlc1MExDQnZjSFJwYjI1ekxDQmhibWx0WVhScGIyNXpMQ0JtYms1aGJXVXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiM0JsY21GMGFXOXVjeUE5SUdkeWIzVndSWFpsYm5SbFpFRnVhVzFoZEdsdmJuTW9aV3hsYldWdWRDd2daWFpsYm5Rc0lHOXdkR2x2Ym5Nc0lHRnVhVzFoZEdsdmJuTXNJR1p1VG1GdFpTazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdaWEpoZEdsdmJuTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1lTeGlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1p1VG1GdFpTQTlQVDBnSjJKbFptOXlaVk5sZEVOc1lYTnpKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ1ozSnZkWEJGZG1WdWRHVmtRVzVwYldGMGFXOXVjeWhsYkdWdFpXNTBMQ0FuY21WdGIzWmxRMnhoYzNNbkxDQnZjSFJwYjI1ekxDQmhibWx0WVhScGIyNXpMQ0FuWW1WbWIzSmxVbVZ0YjNabFEyeGhjM01uS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWWlBOUlHZHliM1Z3UlhabGJuUmxaRUZ1YVcxaGRHbHZibk1vWld4bGJXVnVkQ3dnSjJGa1pFTnNZWE56Snl3Z2IzQjBhVzl1Y3l3Z1lXNXBiV0YwYVc5dWN5d2dKMkpsWm05eVpVRmtaRU5zWVhOekp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHWnVUbUZ0WlNBOVBUMGdKM05sZEVOc1lYTnpKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ1ozSnZkWEJGZG1WdWRHVmtRVzVwYldGMGFXOXVjeWhsYkdWdFpXNTBMQ0FuY21WdGIzWmxRMnhoYzNNbkxDQnZjSFJwYjI1ekxDQmhibWx0WVhScGIyNXpMQ0FuY21WdGIzWmxRMnhoYzNNbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lpQTlJR2R5YjNWd1JYWmxiblJsWkVGdWFXMWhkR2x2Ym5Nb1pXeGxiV1Z1ZEN3Z0oyRmtaRU5zWVhOekp5d2diM0IwYVc5dWN5d2dZVzVwYldGMGFXOXVjeXdnSjJGa1pFTnNZWE56SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHRXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiM0JsY21GMGFXOXVjeUE5SUc5d1pYSmhkR2x2Ym5NdVkyOXVZMkYwS0dFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQmxjbUYwYVc5dWN5QTlJRzl3WlhKaGRHbHZibk11WTI5dVkyRjBLR0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdaWEpoZEdsdmJuTXViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZSUFJFOG9iV0YwYzJ0dktUb2dZV1JrSUdSdlkzVnRaVzUwWVhScGIyNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdjM1JoY25SQmJtbHRZWFJwYjI0b1kyRnNiR0poWTJzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnlkVzV1WlhKeklEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCbGNtRjBhVzl1Y3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eVJXRmphQ2h2Y0dWeVlYUnBiMjV6TENCbWRXNWpkR2x2YmloaGJtbHRZWFJsUm00cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkVzV1WlhKekxuQjFjMmdvWVc1cGJXRjBaVVp1S0NrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCeWRXNXVaWEp6TG14bGJtZDBhQ0EvSUNRa1FXNXBiV0YwWlZKMWJtNWxjaTVoYkd3b2NuVnVibVZ5Y3l3Z1kyRnNiR0poWTJzcElEb2dZMkZzYkdKaFkyc29LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaVzVrUm00b2NtVnFaV04wS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNrVmhZMmdvY25WdWJtVnljeXdnWm5WdVkzUnBiMjRvY25WdWJtVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBJRDhnY25WdWJtVnlMbU5oYm1ObGJDZ3BJRG9nY25WdWJtVnlMbVZ1WkNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnNiMjlyZFhCQmJtbHRZWFJwYjI1ektHTnNZWE56WlhNcElIdGNjbHh1SUNBZ0lDQWdZMnhoYzNObGN5QTlJR2x6UVhKeVlYa29ZMnhoYzNObGN5a2dQeUJqYkdGemMyVnpJRG9nWTJ4aGMzTmxjeTV6Y0d4cGRDZ25JQ2NwTzF4eVhHNGdJQ0FnSUNCMllYSWdiV0YwWTJobGN5QTlJRnRkTENCbWJHRm5UV0Z3SUQwZ2UzMDdYSEpjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2s5TURzZ2FTQThJR05zWVhOelpYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYTJ4aGMzTWdQU0JqYkdGemMyVnpXMmxkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVHWVdOMGIzSjVJRDBnSkdGdWFXMWhkR1ZRY205MmFXUmxjaTRrSkhKbFoybHpkR1Z5WldSQmJtbHRZWFJwYjI1elcydHNZWE56WFR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWVc1cGJXRjBhVzl1Um1GamRHOXllU0FtSmlBaFpteGhaMDFoY0Z0cmJHRnpjMTBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJRzFoZEdOb1pYTXVjSFZ6YUNna2FXNXFaV04wYjNJdVoyVjBLR0Z1YVcxaGRHbHZia1poWTNSdmNua3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHWnNZV2ROWVhCYmEyeGhjM05kSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHMWhkR05vWlhNN1hISmNiaUFnSUNCOVhISmNiaUFnZlYwN1hISmNibjFkTzF4eVhHNWNjbHh1ZG1GeUlDUWtRVzVwYldGMFpVcHpSSEpwZG1WeVVISnZkbWxrWlhJZ1BTQmJKeVFrWVc1cGJXRjBhVzl1VUhKdmRtbGtaWEluTENCbWRXNWpkR2x2Ymlna0pHRnVhVzFoZEdsdmJsQnliM1pwWkdWeUtTQjdYSEpjYmlBZ0pDUmhibWx0WVhScGIyNVFjbTkyYVdSbGNpNWtjbWwyWlhKekxuQjFjMmdvSnlRa1lXNXBiV0YwWlVwelJISnBkbVZ5SnlrN1hISmNiaUFnZEdocGN5NGtaMlYwSUQwZ1d5Y2tKR0Z1YVcxaGRHVktjeWNzSUNja0pFRnVhVzFoZEdWU2RXNXVaWEluTENCbWRXNWpkR2x2Ymlna0pHRnVhVzFoZEdWS2N5d2dKQ1JCYm1sdFlYUmxVblZ1Ym1WeUtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2FXNXBkRVJ5YVhabGNrWnVLR0Z1YVcxaGRHbHZia1JsZEdGcGJITXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNdVpuSnZiU0FtSmlCaGJtbHRZWFJwYjI1RVpYUmhhV3h6TG5SdktTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHWnliMjFCYm1sdFlYUnBiMjRnUFNCd2NtVndZWEpsUVc1cGJXRjBhVzl1S0dGdWFXMWhkR2x2YmtSbGRHRnBiSE11Wm5KdmJTazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIUnZRVzVwYldGMGFXOXVJRDBnY0hKbGNHRnlaVUZ1YVcxaGRHbHZiaWhoYm1sdFlYUnBiMjVFWlhSaGFXeHpMblJ2S1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVdaeWIyMUJibWx0WVhScGIyNGdKaVlnSVhSdlFXNXBiV0YwYVc5dUtTQnlaWFIxY200N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnpkR0Z5ZERvZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoYm1sdFlYUnBiMjVTZFc1dVpYSnpJRDBnVzEwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm5KdmJVRnVhVzFoZEdsdmJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZibEoxYm01bGNuTXVjSFZ6YUNobWNtOXRRVzVwYldGMGFXOXVMbk4wWVhKMEtDa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHOUJibWx0WVhScGIyNHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVTZFc1dVpYSnpMbkIxYzJnb2RHOUJibWx0WVhScGIyNHVjM1JoY25Rb0tTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FrUVc1cGJXRjBaVkoxYm01bGNpNWhiR3dvWVc1cGJXRjBhVzl1VW5WdWJtVnljeXdnWkc5dVpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NuVnVibVZ5SUQwZ2JtVjNJQ1FrUVc1cGJXRjBaVkoxYm01bGNpaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzVrT2lCbGJtUkdia1poWTNSdmNua29LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVc1alpXdzZJR1Z1WkVadVJtRmpkRzl5ZVNncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISjFibTVsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHVnVaRVp1Um1GamRHOXllU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0pGWVdOb0tHRnVhVzFoZEdsdmJsSjFibTVsY25Nc0lHWjFibU4wYVc5dUtISjFibTVsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGRDQjBhR2x6SUhCdmFXNTBJSGRsSUdOaGJtNXZkQ0JqWVc1alpXd2dZVzVwYldGMGFXOXVjeUJtYjNJZ1ozSnZkWEJ6SUdwMWMzUWdlV1YwTGlBeExqVXJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKMWJtNWxjaTVsYm1Rb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHUnZibVVvYzNSaGRIVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY25WdWJtVnlMbU52YlhCc1pYUmxLSE4wWVhSMWN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21Wd1lYSmxRVzVwYldGMGFXOXVLR0Z1YVcxaGRHbHZia1JsZEdGcGJITXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlIQnlaWEJoY21WQmJtbHRZWFJwYjI0b1lXNXBiV0YwYVc5dVJHVjBZV2xzY3lrZ2UxeHlYRzRnSUNBZ0lDQXZMeUJVVDBSUEtHMWhkSE5yYnlrNklHMWhhMlVnYzNWeVpTQjBieUJqYUdWamF5Qm1iM0lnWjNKdmRYQmxaQ0JoYm1sdFlYUnBiMjV6SUdGdVpDQmtaV3hsWjJGMFpTQmtiM2R1SUhSdklHNXZjbTFoYkNCaGJtbHRZWFJwYjI1elhISmNiaUFnSUNBZ0lIWmhjaUJsYkdWdFpXNTBJRDBnWVc1cGJXRjBhVzl1UkdWMFlXbHNjeTVsYkdWdFpXNTBPMXh5WEc0Z0lDQWdJQ0IyWVhJZ1pYWmxiblFnUFNCaGJtbHRZWFJwYjI1RVpYUmhhV3h6TG1WMlpXNTBPMXh5WEc0Z0lDQWdJQ0IyWVhJZ2IzQjBhVzl1Y3lBOUlHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNdWIzQjBhVzl1Y3p0Y2NseHVJQ0FnSUNBZ2RtRnlJR05zWVhOelpYTWdQU0JoYm1sdFlYUnBiMjVFWlhSaGFXeHpMbU5zWVhOelpYTTdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQWtKR0Z1YVcxaGRHVktjeWhsYkdWdFpXNTBMQ0JsZG1WdWRDd2dZMnhoYzNObGN5d2diM0IwYVc5dWN5azdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWMDdYSEpjYm4xZE8xeHlYRzVjY2x4dWRtRnlJRTVIWDBGT1NVMUJWRVZmUVZSVVVsOU9RVTFGSUQwZ0oyUmhkR0V0Ym1jdFlXNXBiV0YwWlNjN1hISmNiblpoY2lCT1IxOUJUa2xOUVZSRlgxQkpUbDlFUVZSQklEMGdKeVJ1WjBGdWFXMWhkR1ZRYVc0bk8xeHlYRzUyWVhJZ0pDUkJibWx0WVhSbFVYVmxkV1ZRY205MmFXUmxjaUE5SUZzbkpHRnVhVzFoZEdWUWNtOTJhV1JsY2ljc0lHWjFibU4wYVc5dUtDUmhibWx0WVhSbFVISnZkbWxrWlhJcElIdGNjbHh1SUNCMllYSWdVRkpGWDBSSlIwVlRWRjlUVkVGVVJTQTlJREU3WEhKY2JpQWdkbUZ5SUZKVlRrNUpUa2RmVTFSQlZFVWdQU0F5TzF4eVhHNGdJSFpoY2lCUFRrVmZVMUJCUTBVZ1BTQW5JQ2M3WEhKY2JseHlYRzRnSUhaaGNpQnlkV3hsY3lBOUlIUm9hWE11Y25Wc1pYTWdQU0I3WEhKY2JpQWdJQ0J6YTJsd09pQmJYU3hjY2x4dUlDQWdJR05oYm1ObGJEb2dXMTBzWEhKY2JpQWdJQ0JxYjJsdU9pQmJYVnh5WEc0Z0lIMDdYSEpjYmx4eVhHNGdJR1oxYm1OMGFXOXVJRzFoYTJWVWNuVjBhSGxEYzNORGJHRnpjMDFoY0NoamJHRnpjMU4wY21sdVp5a2dlMXh5WEc0Z0lDQWdhV1lnS0NGamJHRnpjMU4wY21sdVp5a2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjJZWElnYTJWNWN5QTlJR05zWVhOelUzUnlhVzVuTG5Od2JHbDBLRTlPUlY5VFVFRkRSU2s3WEhKY2JpQWdJQ0IyWVhJZ2JXRndJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2NseHVYSEpjYmlBZ0lDQm1iM0pGWVdOb0tHdGxlWE1zSUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh5WEc0Z0lDQWdJQ0J0WVhCYmEyVjVYU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnRZWEE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JtZFc1amRHbHZiaUJvWVhOTllYUmphR2x1WjBOc1lYTnpaWE1vYm1WM1EyeGhjM05UZEhKcGJtY3NJR04xY25KbGJuUkRiR0Z6YzFOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnYVdZZ0tHNWxkME5zWVhOelUzUnlhVzVuSUNZbUlHTjFjbkpsYm5SRGJHRnpjMU4wY21sdVp5a2dlMXh5WEc0Z0lDQWdJQ0IyWVhJZ1kzVnljbVZ1ZEVOc1lYTnpUV0Z3SUQwZ2JXRnJaVlJ5ZFhSb2VVTnpjME5zWVhOelRXRndLR04xY25KbGJuUkRiR0Z6YzFOMGNtbHVaeWs3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhkRGJHRnpjMU4wY21sdVp5NXpjR3hwZENoUFRrVmZVMUJCUTBVcExuTnZiV1VvWm5WdVkzUnBiMjRvWTJ4aGMzTk9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTjFjbkpsYm5SRGJHRnpjMDFoY0Z0amJHRnpjMDVoYldWZE8xeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR1oxYm1OMGFXOXVJR2x6UVd4c2IzZGxaQ2h5ZFd4bFZIbHdaU3dnWld4bGJXVnVkQ3dnWTNWeWNtVnVkRUZ1YVcxaGRHbHZiaXdnY0hKbGRtbHZkWE5CYm1sdFlYUnBiMjRwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJ5ZFd4bGMxdHlkV3hsVkhsd1pWMHVjMjl0WlNobWRXNWpkR2x2YmlobWJpa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTRvWld4bGJXVnVkQ3dnWTNWeWNtVnVkRUZ1YVcxaGRHbHZiaXdnY0hKbGRtbHZkWE5CYm1sdFlYUnBiMjRwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCbWRXNWpkR2x2YmlCb1lYTkJibWx0WVhScGIyNURiR0Z6YzJWektHRnVhVzFoZEdsdmJpd2dZVzVrS1NCN1hISmNiaUFnSUNCMllYSWdZU0E5SUNoaGJtbHRZWFJwYjI0dVlXUmtRMnhoYzNNZ2ZId2dKeWNwTG14bGJtZDBhQ0ErSURBN1hISmNiaUFnSUNCMllYSWdZaUE5SUNoaGJtbHRZWFJwYjI0dWNtVnRiM1psUTJ4aGMzTWdmSHdnSnljcExteGxibWQwYUNBK0lEQTdYSEpjYmlBZ0lDQnlaWFIxY200Z1lXNWtJRDhnWVNBbUppQmlJRG9nWVNCOGZDQmlPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjblZzWlhNdWFtOXBiaTV3ZFhOb0tHWjFibU4wYVc5dUtHVnNaVzFsYm5Rc0lHNWxkMEZ1YVcxaGRHbHZiaXdnWTNWeWNtVnVkRUZ1YVcxaGRHbHZiaWtnZTF4eVhHNGdJQ0FnTHk4Z2FXWWdkR2hsSUc1bGR5QmhibWx0WVhScGIyNGdhWE1nWTJ4aGMzTXRZbUZ6WldRZ2RHaGxiaUIzWlNCallXNGdhblZ6ZENCMFlXTnJJSFJvWVhRZ2IyNWNjbHh1SUNBZ0lISmxkSFZ5YmlBaGJtVjNRVzVwYldGMGFXOXVMbk4wY25WamRIVnlZV3dnSmlZZ2FHRnpRVzVwYldGMGFXOXVRMnhoYzNObGN5aHVaWGRCYm1sdFlYUnBiMjRwTzF4eVhHNGdJSDBwTzF4eVhHNWNjbHh1SUNCeWRXeGxjeTV6YTJsd0xuQjFjMmdvWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnYm1WM1FXNXBiV0YwYVc5dUxDQmpkWEp5Wlc1MFFXNXBiV0YwYVc5dUtTQjdYSEpjYmlBZ0lDQXZMeUIwYUdWeVpTQnBjeUJ1YnlCdVpXVmtJSFJ2SUdGdWFXMWhkR1VnWVc1NWRHaHBibWNnYVdZZ2JtOGdZMnhoYzNObGN5QmhjbVVnWW1WcGJtY2dZV1JrWldRZ1lXNWtYSEpjYmlBZ0lDQXZMeUIwYUdWeVpTQnBjeUJ1YnlCemRISjFZM1IxY21Gc0lHRnVhVzFoZEdsdmJpQjBhR0YwSUhkcGJHd2dZbVVnZEhKcFoyZGxjbVZrWEhKY2JpQWdJQ0J5WlhSMWNtNGdJVzVsZDBGdWFXMWhkR2x2Ymk1emRISjFZM1IxY21Gc0lDWW1JQ0ZvWVhOQmJtbHRZWFJwYjI1RGJHRnpjMlZ6S0c1bGQwRnVhVzFoZEdsdmJpazdYSEpjYmlBZ2ZTazdYSEpjYmx4eVhHNGdJSEoxYkdWekxuTnJhWEF1Y0hWemFDaG1kVzVqZEdsdmJpaGxiR1Z0Wlc1MExDQnVaWGRCYm1sdFlYUnBiMjRzSUdOMWNuSmxiblJCYm1sdFlYUnBiMjRwSUh0Y2NseHVJQ0FnSUM4dklIZG9lU0J6YUc5MWJHUWdkMlVnZEhKcFoyZGxjaUJoSUc1bGR5QnpkSEoxWTNSMWNtRnNJR0Z1YVcxaGRHbHZiaUJwWmlCMGFHVWdaV3hsYldWdWRDQjNhV3hzWEhKY2JpQWdJQ0F2THlCaVpTQnlaVzF2ZG1Wa0lHWnliMjBnZEdobElFUlBUU0JoYm5sM1lYay9YSEpjYmlBZ0lDQnlaWFIxY200Z1kzVnljbVZ1ZEVGdWFXMWhkR2x2Ymk1bGRtVnVkQ0E5UFNBbmJHVmhkbVVuSUNZbUlHNWxkMEZ1YVcxaGRHbHZiaTV6ZEhKMVkzUjFjbUZzTzF4eVhHNGdJSDBwTzF4eVhHNWNjbHh1SUNCeWRXeGxjeTV6YTJsd0xuQjFjMmdvWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnYm1WM1FXNXBiV0YwYVc5dUxDQmpkWEp5Wlc1MFFXNXBiV0YwYVc5dUtTQjdYSEpjYmlBZ0lDQXZMeUJwWmlCMGFHVnlaU0JwY3lCaGJpQnZibWR2YVc1bklHTjFjbkpsYm5RZ1lXNXBiV0YwYVc5dUlIUm9aVzRnWkc5dUozUWdaWFpsYmlCaWIzUm9aWElnY25WdWJtbHVaeUIwYUdVZ1kyeGhjM010WW1GelpXUWdZVzVwYldGMGFXOXVYSEpjYmlBZ0lDQnlaWFIxY200Z1kzVnljbVZ1ZEVGdWFXMWhkR2x2Ymk1emRISjFZM1IxY21Gc0lDWW1JR04xY25KbGJuUkJibWx0WVhScGIyNHVjM1JoZEdVZ1BUMDlJRkpWVGs1SlRrZGZVMVJCVkVVZ0ppWWdJVzVsZDBGdWFXMWhkR2x2Ymk1emRISjFZM1IxY21Gc08xeHlYRzRnSUgwcE8xeHlYRzVjY2x4dUlDQnlkV3hsY3k1allXNWpaV3d1Y0hWemFDaG1kVzVqZEdsdmJpaGxiR1Z0Wlc1MExDQnVaWGRCYm1sdFlYUnBiMjRzSUdOMWNuSmxiblJCYm1sdFlYUnBiMjRwSUh0Y2NseHVJQ0FnSUM4dklIUm9aWEpsSUdOaGJpQnVaWFpsY2lCaVpTQjBkMjhnYzNSeWRXTjBkWEpoYkNCaGJtbHRZWFJwYjI1eklISjFibTVwYm1jZ1lYUWdkR2hsSUhOaGJXVWdkR2x0WlZ4eVhHNGdJQ0FnY21WMGRYSnVJR04xY25KbGJuUkJibWx0WVhScGIyNHVjM1J5ZFdOMGRYSmhiQ0FtSmlCdVpYZEJibWx0WVhScGIyNHVjM1J5ZFdOMGRYSmhiRHRjY2x4dUlDQjlLVHRjY2x4dVhISmNiaUFnY25Wc1pYTXVZMkZ1WTJWc0xuQjFjMmdvWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnYm1WM1FXNXBiV0YwYVc5dUxDQmpkWEp5Wlc1MFFXNXBiV0YwYVc5dUtTQjdYSEpjYmlBZ0lDQXZMeUJwWmlCMGFHVWdjSEpsZG1sdmRYTWdZVzVwYldGMGFXOXVJR2x6SUdGc2NtVmhaSGtnY25WdWJtbHVaeXdnWW5WMElIUm9aU0J1WlhjZ1lXNXBiV0YwYVc5dUlIZHBiR3hjY2x4dUlDQWdJQzh2SUdKbElIUnlhV2RuWlhKbFpDd2dZblYwSUhSb1pTQnVaWGNnWVc1cGJXRjBhVzl1SUdseklITjBjblZqZEhWeVlXeGNjbHh1SUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwUVc1cGJXRjBhVzl1TG5OMFlYUmxJRDA5UFNCU1ZVNU9TVTVIWDFOVVFWUkZJQ1ltSUc1bGQwRnVhVzFoZEdsdmJpNXpkSEoxWTNSMWNtRnNPMXh5WEc0Z0lIMHBPMXh5WEc1Y2NseHVJQ0J5ZFd4bGN5NWpZVzVqWld3dWNIVnphQ2htZFc1amRHbHZiaWhsYkdWdFpXNTBMQ0J1WlhkQmJtbHRZWFJwYjI0c0lHTjFjbkpsYm5SQmJtbHRZWFJwYjI0cElIdGNjbHh1SUNBZ0lDOHZJR05oYm1ObGJDQjBhR1VnWVc1cGJXRjBhVzl1SUdsbUlHTnNZWE56WlhNZ1lXUmtaV1FnTHlCeVpXMXZkbVZrSUdsdUlHSnZkR2dnWVc1cGJXRjBhVzl1SUdOaGJtTmxiQ0JsWVdOb0lHOTBhR1Z5SUc5MWRDeGNjbHh1SUNBZ0lDOHZJR0oxZENCdmJteDVJR2xtSUhSb1pTQmpkWEp5Wlc1MElHRnVhVzFoZEdsdmJpQnBjMjRuZENCemRISjFZM1IxY21Gc1hISmNibHh5WEc0Z0lDQWdhV1lnS0dOMWNuSmxiblJCYm1sdFlYUnBiMjR1YzNSeWRXTjBkWEpoYkNrZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc1Y2NseHVJQ0FnSUhaaGNpQnVRU0E5SUc1bGQwRnVhVzFoZEdsdmJpNWhaR1JEYkdGemN6dGNjbHh1SUNBZ0lIWmhjaUJ1VWlBOUlHNWxkMEZ1YVcxaGRHbHZiaTV5WlcxdmRtVkRiR0Z6Y3p0Y2NseHVJQ0FnSUhaaGNpQmpRU0E5SUdOMWNuSmxiblJCYm1sdFlYUnBiMjR1WVdSa1EyeGhjM003WEhKY2JpQWdJQ0IyWVhJZ1kxSWdQU0JqZFhKeVpXNTBRVzVwYldGMGFXOXVMbkpsYlc5MlpVTnNZWE56TzF4eVhHNWNjbHh1SUNBZ0lDOHZJR1ZoY214NUlHUmxkR1ZqZEdsdmJpQjBieUJ6WVhabElIUm9aU0JuYkc5aVlXd2dRMUJWSUhOb2IzSjBZV2RsSURvcFhISmNiaUFnSUNCcFppQW9LR2x6Vlc1a1pXWnBibVZrS0c1QktTQW1KaUJwYzFWdVpHVm1hVzVsWkNodVVpa3BJSHg4SUNocGMxVnVaR1ZtYVc1bFpDaGpRU2tnSmlZZ2FYTlZibVJsWm1sdVpXUW9ZMUlwS1NrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUdoaGMwMWhkR05vYVc1blEyeGhjM05sY3lodVFTd2dZMUlwSUh4OElHaGhjMDFoZEdOb2FXNW5RMnhoYzNObGN5aHVVaXdnWTBFcE8xeHlYRzRnSUgwcE8xeHlYRzVjY2x4dUlDQjBhR2x6TGlSblpYUWdQU0JiSnlRa2NrRkdKeXdnSnlSeWIyOTBVMk52Y0dVbkxDQW5KSEp2YjNSRmJHVnRaVzUwSnl3Z0p5UmtiMk4xYldWdWRDY3NJQ2NrSkVoaGMyaE5ZWEFuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbkpDUmhibWx0WVhScGIyNG5MQ0FuSkNSQmJtbHRZWFJsVW5WdWJtVnlKeXdnSnlSMFpXMXdiR0YwWlZKbGNYVmxjM1FuTENBbkpDUnFjVXhwZEdVbkxDQW5KQ1JtYjNKalpWSmxabXh2ZHljc1hISmNiaUFnSUNBZ0lDQm1kVzVqZEdsdmJpZ2tKSEpCUml3Z0lDQWtjbTl2ZEZOamIzQmxMQ0FnSUNSeWIyOTBSV3hsYldWdWRDd2dJQ0FrWkc5amRXMWxiblFzSUNBZ0pDUklZWE5vVFdGd0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ1JoYm1sdFlYUnBiMjRzSUNBZ0pDUkJibWx0WVhSbFVuVnVibVZ5TENBZ0lDUjBaVzF3YkdGMFpWSmxjWFZsYzNRc0lDQWdKQ1JxY1V4cGRHVXNJQ0FnSkNSbWIzSmpaVkpsWm14dmR5a2dlMXh5WEc1Y2NseHVJQ0FnSUhaaGNpQmhZM1JwZG1WQmJtbHRZWFJwYjI1elRHOXZhM1Z3SUQwZ2JtVjNJQ1FrU0dGemFFMWhjQ2dwTzF4eVhHNGdJQ0FnZG1GeUlHUnBjMkZpYkdWa1JXeGxiV1Z1ZEhOTWIyOXJkWEFnUFNCdVpYY2dKQ1JJWVhOb1RXRndLQ2s3WEhKY2JpQWdJQ0IyWVhJZ1lXNXBiV0YwYVc5dWMwVnVZV0pzWldRZ1BTQnVkV3hzTzF4eVhHNWNjbHh1SUNBZ0lHWjFibU4wYVc5dUlIQnZjM1JFYVdkbGMzUlVZWE5yUm1GamRHOXllU2dwSUh0Y2NseHVJQ0FnSUNBZ2RtRnlJSEJ2YzNSRWFXZGxjM1JEWVd4c1pXUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHWnVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYjI1c2VTQnBjM04xWlNCaElHTmhiR3dnZEc4Z2NHOXpkRVJwWjJWemRDQmlaV1p2Y21WY2NseHVJQ0FnSUNBZ0lDQXZMeUJwZENCb1lYTWdabWx5YzNRZ2NHRnpjMlZrTGlCVWFHbHpJSEJ5WlhabGJuUnpJR0Z1ZVNCallXeHNZbUZqYTNOY2NseHVJQ0FnSUNBZ0lDQXZMeUJtY205dElHNXZkQ0JtYVhKcGJtY2diMjVqWlNCMGFHVWdZVzVwYldGMGFXOXVJR2hoY3lCamIyMXdiR1YwWldSY2NseHVJQ0FnSUNBZ0lDQXZMeUJ6YVc1alpTQnBkQ0IzYVd4c0lHSmxJRzkxZENCdlppQjBhR1VnWkdsblpYTjBJR041WTJ4bExseHlYRzRnSUNBZ0lDQWdJR2xtSUNod2IzTjBSR2xuWlhOMFEyRnNiR1ZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JtYmlncE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBa2NtOXZkRk5qYjNCbExpUWtjRzl6ZEVScFoyVnpkQ2htZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5emRFUnBaMlZ6ZEVOaGJHeGxaQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1YyRnBkQ0IxYm5ScGJDQmhiR3dnWkdseVpXTjBhWFpsSUdGdVpDQnliM1YwWlMxeVpXeGhkR1ZrSUhSbGJYQnNZWFJsY3lCaGNtVWdaRzkzYm14dllXUmxaQ0JoYm1SY2NseHVJQ0FnSUM4dklHTnZiWEJwYkdWa0xpQlVhR1VnSkhSbGJYQnNZWFJsVW1WeGRXVnpkQzUwYjNSaGJGQmxibVJwYm1kU1pYRjFaWE4wY3lCMllYSnBZV0pzWlNCclpXVndjeUIwY21GamF5QnZabHh5WEc0Z0lDQWdMeThnWVd4c0lHOW1JSFJvWlNCeVpXMXZkR1VnZEdWdGNHeGhkR1Z6SUdKbGFXNW5JR04xY25KbGJuUnNlU0JrYjNkdWJHOWhaR1ZrTGlCSlppQjBhR1Z5WlNCaGNtVWdibTljY2x4dUlDQWdJQzh2SUhSbGJYQnNZWFJsY3lCamRYSnlaVzUwYkhrZ1pHOTNibXh2WVdScGJtY2dkR2hsYmlCMGFHVWdkMkYwWTJobGNpQjNhV3hzSUhOMGFXeHNJR1pwY21VZ1lXNTVkMkY1TGx4eVhHNGdJQ0FnZG1GeUlHUmxjbVZuYVhOMFpYSlhZWFJqYUNBOUlDUnliMjkwVTJOdmNHVXVKSGRoZEdOb0tGeHlYRzRnSUNBZ0lDQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJQ1IwWlcxd2JHRjBaVkpsY1hWbGMzUXVkRzkwWVd4UVpXNWthVzVuVW1WeGRXVnpkSE1nUFQwOUlEQTdJSDBzWEhKY2JpQWdJQ0FnSUdaMWJtTjBhVzl1S0dselJXMXdkSGtwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVdselJXMXdkSGtwSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNCa1pYSmxaMmx6ZEdWeVYyRjBZMmdvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1RtOTNJSFJvWVhRZ1lXeHNJSFJsYlhCc1lYUmxjeUJvWVhabElHSmxaVzRnWkc5M2JteHZZV1JsWkN3Z0pHRnVhVzFoZEdVZ2QybHNiQ0IzWVdsMElIVnVkR2xzWEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hsSUhCdmMzUWdaR2xuWlhOMElIRjFaWFZsSUdseklHVnRjSFI1SUdKbFptOXlaU0JsYm1GaWJHbHVaeUJoYm1sdFlYUnBiMjV6TGlCQ2VTQm9ZWFpwYm1jZ2RIZHZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1kyRnNiSE1nZEc4Z0pIQnZjM1JFYVdkbGMzUWdZMkZzYkhNZ2QyVWdZMkZ1SUdWdWMzVnlaU0IwYUdGMElIUm9aU0JtYkdGbklHbHpJR1Z1WVdKc1pXUWdZWFFnZEdobFhISmNiaUFnSUNBZ0lDQWdMeThnZG1WeWVTQmxibVFnYjJZZ2RHaGxJSEJ2YzNRZ1pHbG5aWE4wSUhGMVpYVmxMaUJUYVc1alpTQmhiR3dnYjJZZ2RHaGxJR0Z1YVcxaGRHbHZibk1nYVc0Z0pHRnVhVzFoZEdWY2NseHVJQ0FnSUNBZ0lDQXZMeUIxYzJVZ0pIQnZjM1JFYVdkbGMzUXNJR2wwSjNNZ2FXMXdiM0owWVc1MElIUm9ZWFFnZEdobElHTnZaR1VnWW1Wc2IzY2daWGhsWTNWMFpYTWdZWFFnZEdobElHVnVaQzVjY2x4dUlDQWdJQ0FnSUNBdkx5QlVhR2x6SUdKaGMybGpZV3hzZVNCdFpXRnVjeUIwYUdGMElIUm9aU0J3WVdkbElHbHpJR1oxYkd4NUlHUnZkMjVzYjJGa1pXUWdZVzVrSUdOdmJYQnBiR1ZrSUdKbFptOXlaVnh5WEc0Z0lDQWdJQ0FnSUM4dklHRnVlU0JoYm1sdFlYUnBiMjV6SUdGeVpTQjBjbWxuWjJWeVpXUXVYSEpjYmlBZ0lDQWdJQ0FnSkhKdmIzUlRZMjl3WlM0a0pIQnZjM1JFYVdkbGMzUW9ablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWtjbTl2ZEZOamIzQmxMaVFrY0c5emRFUnBaMlZ6ZENobWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMlVnWTJobFkyc2dabTl5SUc1MWJHd2daR2x5WldOMGJIa2dhVzRnZEdobElHVjJaVzUwSUhSb1lYUWdkR2hsSUdGd2NHeHBZMkYwYVc5dUlHRnNjbVZoWkhrZ1kyRnNiR1ZrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUM1bGJtRmliR1ZrS0NrZ2QybDBhQ0IzYUdGMFpYWmxjaUJoY21kMWJXVnVkSE1nZEdoaGRDQnBkQ0J3Y205MmFXUmxaQ0JwZENCM2FYUm9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoYm1sdFlYUnBiMjV6Ulc1aFlteGxaQ0E5UFQwZ2JuVnNiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2Ym5ORmJtRmliR1ZrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnZG1GeUlHTmhiR3hpWVdOclVtVm5hWE4wY25rZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh5WEc1Y2NseHVJQ0FnSUM4dklISmxiV1Z0WW1WeUlIUm9ZWFFnZEdobElHTnNZWE56VG1GdFpVWnBiSFJsY2lCcGN5QnpaWFFnWkhWeWFXNW5JSFJvWlNCd2NtOTJhV1JsY2k5amIyNW1hV2RjY2x4dUlDQWdJQzh2SUhOMFlXZGxJSFJvWlhKbFptOXlaU0IzWlNCallXNGdiM0IwYVcxcGVtVWdhR1Z5WlNCaGJtUWdjMlYwZFhBZ1lTQm9aV3h3WlhJZ1puVnVZM1JwYjI1Y2NseHVJQ0FnSUhaaGNpQmpiR0Z6YzA1aGJXVkdhV3gwWlhJZ1BTQWtZVzVwYldGMFpWQnliM1pwWkdWeUxtTnNZWE56VG1GdFpVWnBiSFJsY2lncE8xeHlYRzRnSUNBZ2RtRnlJR2x6UVc1cGJXRjBZV0pzWlVOc1lYTnpUbUZ0WlNBOUlDRmpiR0Z6YzA1aGJXVkdhV3gwWlhKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdkSEoxWlRzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dablZ1WTNScGIyNG9ZMnhoYzNOT1lXMWxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJ4aGMzTk9ZVzFsUm1sc2RHVnlMblJsYzNRb1kyeGhjM05PWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUhaaGNpQmhjSEJzZVVGdWFXMWhkR2x2YmtOc1lYTnpaWE1nUFNCaGNIQnNlVUZ1YVcxaGRHbHZia05zWVhOelpYTkdZV04wYjNKNUtDUWthbkZNYVhSbEtUdGNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZCYm1sdFlYUnBiMjVFWlhSaGFXeHpLR1ZzWlcxbGJuUXNJR0Z1YVcxaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnYldWeVoyVkJibWx0WVhScGIyNUVaWFJoYVd4ektHVnNaVzFsYm5Rc0lHRnVhVzFoZEdsdmJpd2dlMzBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRWxGT1MweE1TQm9ZWE1nYm04Z2JXVjBhRzlrSUZ3aVkyOXVkR0ZwYm5OY0lpQnBiaUJUVmtjZ1pXeGxiV1Z1ZENCaGJtUWdhVzRnVG05a1pTNXdjbTkwYjNSNWNHVXVJRUoxWnlBak1UQXlOVGt1WEhKY2JpQWdJQ0IyWVhJZ1kyOXVkR0ZwYm5NZ1BTQjNhVzVrYjNjdVRtOWtaUzV3Y205MGIzUjVjR1V1WTI5dWRHRnBibk1nZkh3Z1puVnVZM1JwYjI0b1lYSm5LU0I3WEhKY2JpQWdJQ0FnSUM4dklHcHphR2x1ZENCaWFYUjNhWE5sT2lCbVlXeHpaVnh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3lBOVBUMGdZWEpuSUh4OElDRWhLSFJvYVhNdVkyOXRjR0Z5WlVSdlkzVnRaVzUwVUc5emFYUnBiMjRvWVhKbktTQW1JREUyS1R0Y2NseHVJQ0FnSUNBZ0x5OGdhbk5vYVc1MElHSnBkSGRwYzJVNklIUnlkV1ZjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z1ptbHVaRU5oYkd4aVlXTnJjeWh3WVhKbGJuUXNJR1ZzWlcxbGJuUXNJR1YyWlc1MEtTQjdYSEpjYmlBZ0lDQWdJSFpoY2lCMFlYSm5aWFJPYjJSbElEMGdaMlYwUkc5dFRtOWtaU2hsYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnZG1GeUlIUmhjbWRsZEZCaGNtVnVkRTV2WkdVZ1BTQm5aWFJFYjIxT2IyUmxLSEJoY21WdWRDazdYSEpjYmx4eVhHNGdJQ0FnSUNCMllYSWdiV0YwWTJobGN5QTlJRnRkTzF4eVhHNGdJQ0FnSUNCMllYSWdaVzUwY21sbGN5QTlJR05oYkd4aVlXTnJVbVZuYVhOMGNubGJaWFpsYm5SZE8xeHlYRzRnSUNBZ0lDQnBaaUFvWlc1MGNtbGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHWnZja1ZoWTJnb1pXNTBjbWxsY3l3Z1puVnVZM1JwYjI0b1pXNTBjbmtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoamIyNTBZV2x1Y3k1allXeHNLR1Z1ZEhKNUxtNXZaR1VzSUhSaGNtZGxkRTV2WkdVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhkR05vWlhNdWNIVnphQ2hsYm5SeWVTNWpZV3hzWW1GamF5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHVjJaVzUwSUQwOVBTQW5iR1ZoZG1VbklDWW1JR052Ym5SaGFXNXpMbU5oYkd3b1pXNTBjbmt1Ym05a1pTd2dkR0Z5WjJWMFVHRnlaVzUwVG05a1pTa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiV0YwWTJobGN5NXdkWE5vS0dWdWRISjVMbU5oYkd4aVlXTnJLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRzFoZEdOb1pYTTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnWm1sc2RHVnlSbkp2YlZKbFoybHpkSEo1S0d4cGMzUXNJRzFoZEdOb1EyOXVkR0ZwYm1WeUxDQnRZWFJqYUVOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJqYjI1MFlXbHVaWEpPYjJSbElEMGdaWGgwY21GamRFVnNaVzFsYm5ST2IyUmxLRzFoZEdOb1EyOXVkR0ZwYm1WeUtUdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlHeHBjM1F1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLR1Z1ZEhKNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHbHpUV0YwWTJnZ1BTQmxiblJ5ZVM1dWIyUmxJRDA5UFNCamIyNTBZV2x1WlhKT2IyUmxJQ1ltWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNnaGJXRjBZMmhEWVd4c1ltRmpheUI4ZkNCbGJuUnllUzVqWVd4c1ltRmpheUE5UFQwZ2JXRjBZMmhEWVd4c1ltRmpheWs3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNGcGMwMWhkR05vTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJqYkdWaGJuVndSWFpsYm5STWFYTjBaVzVsY25Nb2NHaGhjMlVzSUdWc1pXMWxiblFwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLSEJvWVhObElEMDlQU0FuWTJ4dmMyVW5JQ1ltSUNGbGJHVnRaVzUwV3pCZExuQmhjbVZ1ZEU1dlpHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ1pXeGxiV1Z1ZENCcGN5QnViM1FnWVhSMFlXTm9aV1FnZEc4Z1lTQndZWEpsYm5ST2IyUmxMQ0JwZENCb1lYTWdZbVZsYmlCeVpXMXZkbVZrSUdKNVhISmNiaUFnSUNBZ0lDQWdMeThnZEdobElHUnZiVTl3WlhKaGRHbHZiaXdnWVc1a0lIZGxJR05oYmlCellXWmxiSGtnY21WdGIzWmxJSFJvWlNCbGRtVnVkQ0JqWVd4c1ltRmphM05jY2x4dUlDQWdJQ0FnSUNBa1lXNXBiV0YwWlM1dlptWW9aV3hsYldWdWRDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCMllYSWdKR0Z1YVcxaGRHVWdQU0I3WEhKY2JpQWdJQ0FnSUc5dU9pQm1kVzVqZEdsdmJpaGxkbVZ1ZEN3Z1kyOXVkR0ZwYm1WeUxDQmpZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnViMlJsSUQwZ1pYaDBjbUZqZEVWc1pXMWxiblJPYjJSbEtHTnZiblJoYVc1bGNpazdYSEpjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnRTWldkcGMzUnllVnRsZG1WdWRGMGdQU0JqWVd4c1ltRmphMUpsWjJsemRISjVXMlYyWlc1MFhTQjhmQ0JiWFR0Y2NseHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamExSmxaMmx6ZEhKNVcyVjJaVzUwWFM1d2RYTm9LSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHNXZaR1U2SUc1dlpHVXNYSEpjYmlBZ0lDQWdJQ0FnSUNCallXeHNZbUZqYXpvZ1kyRnNiR0poWTJ0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnVW1WdGIzWmxJSFJvWlNCallXeHNZbUZqYXlCM2FHVnVJSFJvWlNCbGJHVnRaVzUwSUdseklISmxiVzkyWldRZ1puSnZiU0IwYUdVZ1JFOU5YSEpjYmlBZ0lDQWdJQ0FnYW5GTWFYUmxLR052Ym5SaGFXNWxjaWt1YjI0b0p5UmtaWE4wY205NUp5d2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1UkdWMFlXbHNjeUE5SUdGamRHbDJaVUZ1YVcxaGRHbHZibk5NYjI5cmRYQXVaMlYwS0c1dlpHVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFlXNXBiV0YwYVc5dVJHVjBZV2xzY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIwYUdWeVpTZHpJR0Z1SUdGdWFXMWhkR2x2YmlCdmJtZHZhVzVuTENCMGFHVWdZMkZzYkdKaFkyc2dZMkZzYkdsdVp5QmpiMlJsSUhkcGJHd2djbVZ0YjNabFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0JsZG1WdWRDQnNhWE4wWlc1bGNuTXVJRWxtSUhkbEoyUWdjbVZ0YjNabElHaGxjbVVzSUhSb1pTQmpZV3hzWW1GamEzTWdkMjkxYkdRZ1ltVWdjbVZ0YjNabFpGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmlaV1p2Y21VZ2RHaGxJR0Z1YVcxaGRHbHZiaUJsYm1SelhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSaGJtbHRZWFJsTG05bVppaGxkbVZ1ZEN3Z1kyOXVkR0ZwYm1WeUxDQmpZV3hzWW1GamF5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdJQ0J2Wm1ZNklHWjFibU4wYVc5dUtHVjJaVzUwTENCamIyNTBZV2x1WlhJc0lHTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREVnSmlZZ0lXbHpVM1J5YVc1bktHRnlaM1Z0Wlc1MGMxc3dYU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaUE5SUdGeVozVnRaVzUwYzFzd1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdWMlpXNTBWSGx3WlNCcGJpQmpZV3hzWW1GamExSmxaMmx6ZEhKNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOclVtVm5hWE4wY25sYlpYWmxiblJVZVhCbFhTQTlJR1pwYkhSbGNrWnliMjFTWldkcGMzUnllU2hqWVd4c1ltRmphMUpsWjJsemRISjVXMlYyWlc1MFZIbHdaVjBzSUdOdmJuUmhhVzVsY2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVkSEpwWlhNZ1BTQmpZV3hzWW1GamExSmxaMmx6ZEhKNVcyVjJaVzUwWFR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVdWdWRISnBaWE1wSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkydFNaV2RwYzNSeWVWdGxkbVZ1ZEYwZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEMDlQU0F4WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnYm5Wc2JGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBNklHWnBiSFJsY2taeWIyMVNaV2RwYzNSeWVTaGxiblJ5YVdWekxDQmpiMjUwWVdsdVpYSXNJR05oYkd4aVlXTnJLVHRjY2x4dUlDQWdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQWdJSEJwYmpvZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z2NHRnlaVzUwUld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHRnpjMlZ5ZEVGeVp5aHBjMFZzWlcxbGJuUW9aV3hsYldWdWRDa3NJQ2RsYkdWdFpXNTBKeXdnSjI1dmRDQmhiaUJsYkdWdFpXNTBKeWs3WEhKY2JpQWdJQ0FnSUNBZ1lYTnpaWEowUVhKbktHbHpSV3hsYldWdWRDaHdZWEpsYm5SRmJHVnRaVzUwS1N3Z0ozQmhjbVZ1ZEVWc1pXMWxiblFuTENBbmJtOTBJR0Z1SUdWc1pXMWxiblFuS1R0Y2NseHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtUmhkR0VvVGtkZlFVNUpUVUZVUlY5UVNVNWZSRUZVUVN3Z2NHRnlaVzUwUld4bGJXVnVkQ2s3WEhKY2JpQWdJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdJQ0J3ZFhOb09pQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MExDQmxkbVZ1ZEN3Z2IzQjBhVzl1Y3l3Z1pHOXRUM0JsY21GMGFXOXVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEhKY2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1a2IyMVBjR1Z5WVhScGIyNGdQU0JrYjIxUGNHVnlZWFJwYjI0N1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIRjFaWFZsUVc1cGJXRjBhVzl1S0dWc1pXMWxiblFzSUdWMlpXNTBMQ0J2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUhSb2FYTWdiV1YwYUc5a0lHaGhjeUJtYjNWeUlITnBaMjVoZEhWeVpYTTZYSEpjYmlBZ0lDQWdJQzh2SUNBb0tTQXRJR2RzYjJKaGJDQm5aWFIwWlhKY2NseHVJQ0FnSUNBZ0x5OGdJQ2hpYjI5c0tTQXRJR2RzYjJKaGJDQnpaWFIwWlhKY2NseHVJQ0FnSUNBZ0x5OGdJQ2hsYkdWdFpXNTBLU0F0SUdWc1pXMWxiblFnWjJWMGRHVnlYSEpjYmlBZ0lDQWdJQzh2SUNBb1pXeGxiV1Z1ZEN3Z1ltOXZiQ2tnTFNCbGJHVnRaVzUwSUhObGRIUmxjanhHTXpjK1hISmNiaUFnSUNBZ0lHVnVZV0pzWldRNklHWjFibU4wYVc5dUtHVnNaVzFsYm5Rc0lHSnZiMndwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhKblEyOTFiblFnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1lYSm5RMjkxYm5RZ1BUMDlJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUNncElDMGdSMnh2WW1Gc0lHZGxkSFJsY2x4eVhHNGdJQ0FnSUNBZ0lDQWdZbTl2YkNBOUlDRWhZVzVwYldGMGFXOXVjMFZ1WVdKc1pXUTdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJvWVhORmJHVnRaVzUwSUQwZ2FYTkZiR1Z0Wlc1MEtHVnNaVzFsYm5RcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doYUdGelJXeGxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QW9ZbTl2YkNrZ0xTQkhiRzlpWVd3Z2MyVjBkR1Z5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0p2YjJ3Z1BTQmhibWx0WVhScGIyNXpSVzVoWW14bFpDQTlJQ0VoWld4bGJXVnVkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnViMlJsSUQwZ1oyVjBSRzl0VG05a1pTaGxiR1Z0Wlc1MEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGNtZERiM1Z1ZENBOVBUMGdNU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDaGxiR1Z0Wlc1MEtTQXRJRVZzWlcxbGJuUWdaMlYwZEdWeVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ltOXZiQ0E5SUNGa2FYTmhZbXhsWkVWc1pXMWxiblJ6VEc5dmEzVndMbWRsZENodWIyUmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUFvWld4bGJXVnVkQ3dnWW05dmJDa2dMU0JGYkdWdFpXNTBJSE5sZEhSbGNseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdWa1JXeGxiV1Z1ZEhOTWIyOXJkWEF1Y0hWMEtHNXZaR1VzSUNGaWIyOXNLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHSnZiMnc3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlDUmhibWx0WVhSbE8xeHlYRzVjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSEYxWlhWbFFXNXBiV0YwYVc5dUtHVnNaVzFsYm5Rc0lHVjJaVzUwTENCcGJtbDBhV0ZzVDNCMGFXOXVjeWtnZTF4eVhHNGdJQ0FnSUNBdkx5QjNaU0JoYkhkaGVYTWdiV0ZyWlNCaElHTnZjSGtnYjJZZ2RHaGxJRzl3ZEdsdmJuTWdjMmx1WTJWY2NseHVJQ0FnSUNBZ0x5OGdkR2hsY21VZ2MyaHZkV3hrSUc1bGRtVnlJR0psSUdGdWVTQnphV1JsSUdWbVptVmpkSE1nYjI1Y2NseHVJQ0FnSUNBZ0x5OGdkR2hsSUdsdWNIVjBJR1JoZEdFZ2QyaGxiaUJ5ZFc1dWFXNW5JR0FrWVc1cGJXRjBaVU56YzJBdVhISmNiaUFnSUNBZ0lIWmhjaUJ2Y0hScGIyNXpJRDBnWTI5d2VTaHBibWwwYVdGc1QzQjBhVzl1Y3lrN1hISmNibHh5WEc0Z0lDQWdJQ0IyWVhJZ2JtOWtaU3dnY0dGeVpXNTBPMXh5WEc0Z0lDQWdJQ0JsYkdWdFpXNTBJRDBnYzNSeWFYQkRiMjF0Wlc1MGMwWnliMjFGYkdWdFpXNTBLR1ZzWlcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJRzV2WkdVZ1BTQm5aWFJFYjIxT2IyUmxLR1ZzWlcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUhCaGNtVnVkQ0E5SUdWc1pXMWxiblF1Y0dGeVpXNTBLQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJRzl3ZEdsdmJuTWdQU0J3Y21Wd1lYSmxRVzVwYldGMGFXOXVUM0IwYVc5dWN5aHZjSFJwYjI1ektUdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklIZGxJR055WldGMFpTQmhJR1poYTJVZ2NuVnVibVZ5SUhkcGRHZ2dZU0IzYjNKcmFXNW5JSEJ5YjIxcGMyVXVYSEpjYmlBZ0lDQWdJQzh2SUZSb1pYTmxJRzFsZEdodlpITWdkMmxzYkNCaVpXTnZiV1VnWVhaaGFXeGhZbXhsSUdGbWRHVnlJSFJvWlNCa2FXZGxjM1FnYUdGeklIQmhjM05sWkZ4eVhHNGdJQ0FnSUNCMllYSWdjblZ1Ym1WeUlEMGdibVYzSUNRa1FXNXBiV0YwWlZKMWJtNWxjaWdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnZEdocGN5QnBjeUIxYzJWa0lIUnZJSFJ5YVdkblpYSWdZMkZzYkdKaFkydHpJR2x1SUhCdmMzUkVhV2RsYzNRZ2JXOWtaVnh5WEc0Z0lDQWdJQ0IyWVhJZ2NuVnVTVzVPWlhoMFVHOXpkRVJwWjJWemRFOXlUbTkzSUQwZ2NHOXpkRVJwWjJWemRGUmhjMnRHWVdOMGIzSjVLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvYVhOQmNuSmhlU2h2Y0hScGIyNXpMbUZrWkVOc1lYTnpLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVlXUmtRMnhoYzNNZ1BTQnZjSFJwYjI1ekxtRmtaRU5zWVhOekxtcHZhVzRvSnlBbktUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVZV1JrUTJ4aGMzTWdKaVlnSVdselUzUnlhVzVuS0c5d2RHbHZibk11WVdSa1EyeGhjM01wS1NCN1hISmNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NWhaR1JEYkdGemN5QTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHBjMEZ5Y21GNUtHOXdkR2x2Ym5NdWNtVnRiM1psUTJ4aGMzTXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1eVpXMXZkbVZEYkdGemN5QTlJRzl3ZEdsdmJuTXVjbVZ0YjNabFEyeGhjM011YW05cGJpZ25JQ2NwTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1eVpXMXZkbVZEYkdGemN5QW1KaUFoYVhOVGRISnBibWNvYjNCMGFXOXVjeTV5WlcxdmRtVkRiR0Z6Y3lrcElIdGNjbHh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbkpsYlc5MlpVTnNZWE56SUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11Wm5KdmJTQW1KaUFoYVhOUFltcGxZM1FvYjNCMGFXOXVjeTVtY205dEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11Wm5KdmJTQTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuUnZJQ1ltSUNGcGMwOWlhbVZqZENodmNIUnBiMjV6TG5SdktTa2dlMXh5WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11ZEc4Z1BTQnVkV3hzTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0F2THlCMGFHVnlaU0JoY21VZ2MybDBkV0YwYVc5dWN5QjNhR1Z5WlNCaElHUnBjbVZqZEdsMlpTQnBjM04xWlhNZ1lXNGdZVzVwYldGMGFXOXVJR1p2Y2x4eVhHNGdJQ0FnSUNBdkx5QmhJR3B4VEdsMFpTQjNjbUZ3Y0dWeUlIUm9ZWFFnWTI5dWRHRnBibk1nYjI1c2VTQmpiMjF0Wlc1MElHNXZaR1Z6TGk0dUlFbG1JSFJvYVhOY2NseHVJQ0FnSUNBZ0x5OGdhR0Z3Y0dWdWN5QjBhR1Z1SUhSb1pYSmxJR2x6SUc1dklIZGhlU0IzWlNCallXNGdjR1Z5Wm05eWJTQmhiaUJoYm1sdFlYUnBiMjVjY2x4dUlDQWdJQ0FnYVdZZ0tDRnViMlJsS1NCN1hISmNiaUFnSUNBZ0lDQWdZMnh2YzJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjblZ1Ym1WeU8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCMllYSWdZMnhoYzNOT1lXMWxJRDBnVzI1dlpHVXVZMnhoYzNOT1lXMWxMQ0J2Y0hScGIyNXpMbUZrWkVOc1lYTnpMQ0J2Y0hScGIyNXpMbkpsYlc5MlpVTnNZWE56WFM1cWIybHVLQ2NnSnlrN1hISmNiaUFnSUNBZ0lHbG1JQ2doYVhOQmJtbHRZWFJoWW14bFEyeGhjM05PWVcxbEtHTnNZWE56VG1GdFpTa3BJSHRjY2x4dUlDQWdJQ0FnSUNCamJHOXpaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWRXNXVaWEk3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCcGMxTjBjblZqZEhWeVlXd2dQU0JiSjJWdWRHVnlKeXdnSjIxdmRtVW5MQ0FuYkdWaGRtVW5YUzVwYm1SbGVFOW1LR1YyWlc1MEtTQStQU0F3TzF4eVhHNWNjbHh1SUNBZ0lDQWdkbUZ5SUdSdlkzVnRaVzUwU0dsa1pHVnVJRDBnSkdSdlkzVnRaVzUwV3pCZExtaHBaR1JsYmp0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUhSb2FYTWdhWE1nWVNCb1lYSmtJR1JwYzJGaWJHVWdiMllnWVd4c0lHRnVhVzFoZEdsdmJuTWdabTl5SUhSb1pTQmhjSEJzYVdOaGRHbHZiaUJ2Y2lCdmJseHlYRzRnSUNBZ0lDQXZMeUIwYUdVZ1pXeGxiV1Z1ZENCcGRITmxiR1lzSUhSb1pYSmxabTl5WlNBZ2RHaGxjbVVnYVhNZ2JtOGdibVZsWkNCMGJ5QmpiMjUwYVc1MVpTQm1kWEowYUdWeVhISmNiaUFnSUNBZ0lDOHZJSEJoYzNRZ2RHaHBjeUJ3YjJsdWRDQnBaaUJ1YjNRZ1pXNWhZbXhsWkZ4eVhHNGdJQ0FnSUNBdkx5QkJibWx0WVhScGIyNXpJR0Z5WlNCaGJITnZJR1JwYzJGaWJHVmtJR2xtSUhSb1pTQmtiMk4xYldWdWRDQnBjeUJqZFhKeVpXNTBiSGtnYUdsa1pHVnVJQ2h3WVdkbElHbHpJRzV2ZENCMmFYTnBZbXhsWEhKY2JpQWdJQ0FnSUM4dklIUnZJSFJvWlNCMWMyVnlLU3dnWW1WallYVnpaU0JpY205M2MyVnljeUJ6Ykc5M0lHUnZkMjRnYjNJZ1pHOGdibTkwSUdac2RYTm9JR05oYkd4eklIUnZJSEpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlZ4eVhHNGdJQ0FnSUNCMllYSWdjMnRwY0VGdWFXMWhkR2x2Ym5NZ1BTQWhZVzVwYldGMGFXOXVjMFZ1WVdKc1pXUWdmSHdnWkc5amRXMWxiblJJYVdSa1pXNGdmSHdnWkdsellXSnNaV1JGYkdWdFpXNTBjMHh2YjJ0MWNDNW5aWFFvYm05a1pTazdYSEpjYmlBZ0lDQWdJSFpoY2lCbGVHbHpkR2x1WjBGdWFXMWhkR2x2YmlBOUlDZ2hjMnRwY0VGdWFXMWhkR2x2Ym5NZ0ppWWdZV04wYVhabFFXNXBiV0YwYVc5dWMweHZiMnQxY0M1blpYUW9ibTlrWlNrcElIeDhJSHQ5TzF4eVhHNGdJQ0FnSUNCMllYSWdhR0Z6UlhocGMzUnBibWRCYm1sdFlYUnBiMjRnUFNBaElXVjRhWE4wYVc1blFXNXBiV0YwYVc5dUxuTjBZWFJsTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnZEdobGNtVWdhWE1nYm04Z2NHOXBiblFnYVc0Z2RISmhkbVZ5YzJsdVp5QjBhR1VnYzJGdFpTQmpiMnhzWldOMGFXOXVJRzltSUhCaGNtVnVkQ0JoYm1ObGMzUnZjbk1nYVdZZ1lTQm1iMnhzYjNkMWNGeHlYRzRnSUNBZ0lDQXZMeUJoYm1sdFlYUnBiMjRnZDJsc2JDQmlaU0J5ZFc0Z2IyNGdkR2hsSUhOaGJXVWdaV3hsYldWdWRDQjBhR0YwSUdGc2NtVmhaSGtnWkdsa0lHRnNiQ0IwYUdGMElHTm9aV05yYVc1bklIZHZjbXRjY2x4dUlDQWdJQ0FnYVdZZ0tDRnphMmx3UVc1cGJXRjBhVzl1Y3lBbUppQW9JV2hoYzBWNGFYTjBhVzVuUVc1cGJXRjBhVzl1SUh4OElHVjRhWE4wYVc1blFXNXBiV0YwYVc5dUxuTjBZWFJsSUNFOUlGQlNSVjlFU1VkRlUxUmZVMVJCVkVVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYzJ0cGNFRnVhVzFoZEdsdmJuTWdQU0FoWVhKbFFXNXBiV0YwYVc5dWMwRnNiRzkzWldRb1pXeGxiV1Z1ZEN3Z2NHRnlaVzUwTENCbGRtVnVkQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNoemEybHdRVzVwYldGMGFXOXVjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRU5oYkd4aVlXTnJjeUJ6YUc5MWJHUWdabWx5WlNCbGRtVnVJR2xtSUhSb1pTQmtiMk4xYldWdWRDQnBjeUJvYVdSa1pXNGdLSEpsWjNKbGMzTnBiMjRnWm1sNElHWnZjaUJwYzNOMVpTQWpNVFF4TWpBcFhISmNiaUFnSUNBZ0lDQWdhV1lnS0dSdlkzVnRaVzUwU0dsa1pHVnVLU0J1YjNScFpubFFjbTluY21WemN5aHlkVzV1WlhJc0lHVjJaVzUwTENBbmMzUmhjblFuS1R0Y2NseHVJQ0FnSUNBZ0lDQmpiRzl6WlNncE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoa2IyTjFiV1Z1ZEVocFpHUmxiaWtnYm05MGFXWjVVSEp2WjNKbGMzTW9jblZ1Ym1WeUxDQmxkbVZ1ZEN3Z0oyTnNiM05sSnlrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISjFibTVsY2p0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHbHpVM1J5ZFdOMGRYSmhiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnNiM05sUTJocGJHUkJibWx0WVhScGIyNXpLR1ZzWlcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQjJZWElnYm1WM1FXNXBiV0YwYVc5dUlEMGdlMXh5WEc0Z0lDQWdJQ0FnSUhOMGNuVmpkSFZ5WVd3NklHbHpVM1J5ZFdOMGRYSmhiQ3hjY2x4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwT2lCbGJHVnRaVzUwTEZ4eVhHNGdJQ0FnSUNBZ0lHVjJaVzUwT2lCbGRtVnVkQ3hjY2x4dUlDQWdJQ0FnSUNCaFpHUkRiR0Z6Y3pvZ2IzQjBhVzl1Y3k1aFpHUkRiR0Z6Y3l4Y2NseHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WRGJHRnpjem9nYjNCMGFXOXVjeTV5WlcxdmRtVkRiR0Z6Y3l4Y2NseHVJQ0FnSUNBZ0lDQmpiRzl6WlRvZ1kyeHZjMlVzWEhKY2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3pvZ2IzQjBhVzl1Y3l4Y2NseHVJQ0FnSUNBZ0lDQnlkVzV1WlhJNklISjFibTVsY2x4eVhHNGdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHaGhjMFY0YVhOMGFXNW5RVzVwYldGMGFXOXVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE5yYVhCQmJtbHRZWFJwYjI1R2JHRm5JRDBnYVhOQmJHeHZkMlZrS0NkemEybHdKeXdnWld4bGJXVnVkQ3dnYm1WM1FXNXBiV0YwYVc5dUxDQmxlR2x6ZEdsdVowRnVhVzFoZEdsdmJpazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tITnJhWEJCYm1sdFlYUnBiMjVHYkdGbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aWGhwYzNScGJtZEJibWx0WVhScGIyNHVjM1JoZEdVZ1BUMDlJRkpWVGs1SlRrZGZVMVJCVkVVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeHZjMlVvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEoxYm01bGNqdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsY21kbFFXNXBiV0YwYVc5dVJHVjBZV2xzY3lobGJHVnRaVzUwTENCbGVHbHpkR2x1WjBGdWFXMWhkR2x2Yml3Z2JtVjNRVzVwYldGMGFXOXVLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVjRhWE4wYVc1blFXNXBiV0YwYVc5dUxuSjFibTVsY2p0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdOaGJtTmxiRUZ1YVcxaGRHbHZia1pzWVdjZ1BTQnBjMEZzYkc5M1pXUW9KMk5oYm1ObGJDY3NJR1ZzWlcxbGJuUXNJRzVsZDBGdWFXMWhkR2x2Yml3Z1pYaHBjM1JwYm1kQmJtbHRZWFJwYjI0cE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoallXNWpaV3hCYm1sdFlYUnBiMjVHYkdGbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aWGhwYzNScGJtZEJibWx0WVhScGIyNHVjM1JoZEdVZ1BUMDlJRkpWVGs1SlRrZGZVMVJCVkVVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hwY3lCM2FXeHNJR1Z1WkNCMGFHVWdZVzVwYldGMGFXOXVJSEpwWjJoMElHRjNZWGtnWVc1a0lHbDBJR2x6SUhOaFptVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkRzhnWkc4Z2MyOGdjMmx1WTJVZ2RHaGxJR0Z1YVcxaGRHbHZiaUJwY3lCaGJISmxZV1I1SUhKMWJtNXBibWNnWVc1a0lIUm9aVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ5ZFc1dVpYSWdZMkZzYkdKaFkyc2dZMjlrWlNCM2FXeHNJSEoxYmlCcGJpQmhjM2x1WTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsZUdsemRHbHVaMEZ1YVcxaGRHbHZiaTV5ZFc1dVpYSXVaVzVrS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dWNGFYTjBhVzVuUVc1cGJXRjBhVzl1TG5OMGNuVmpkSFZ5WVd3cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hwY3lCdFpXRnVjeUIwYUdGMElIUm9aU0JoYm1sdFlYUnBiMjRnYVhNZ2NYVmxkV1ZrSUdsdWRHOGdZU0JrYVdkbGMzUXNJR0oxZEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCb1lYTnVKM1FnYzNSaGNuUmxaQ0I1WlhRdUlGUm9aWEpsWm05eVpTQnBkQ0JwY3lCellXWmxJSFJ2SUhKMWJpQjBhR1VnWTJ4dmMyVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiV1YwYUc5a0lIZG9hV05vSUhkcGJHd2dZMkZzYkNCMGFHVWdjblZ1Ym1WeUlHMWxkR2h2WkhNZ2FXNGdZWE41Ym1NdVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWNGFYTjBhVzVuUVc1cGJXRjBhVzl1TG1Oc2IzTmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjBhR2x6SUhkcGJHd2diV1Z5WjJVZ2RHaGxJRzVsZHlCaGJtbHRZWFJwYjI0Z2IzQjBhVzl1Y3lCcGJuUnZJR1Y0YVhOMGFXNW5JR0Z1YVcxaGRHbHZiaUJ2Y0hScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxjbWRsUVc1cGJXRjBhVzl1UkdWMFlXbHNjeWhsYkdWdFpXNTBMQ0JsZUdsemRHbHVaMEZ1YVcxaGRHbHZiaXdnYm1WM1FXNXBiV0YwYVc5dUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxlR2x6ZEdsdVowRnVhVzFoZEdsdmJpNXlkVzV1WlhJN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUdFZ2FtOXBibVZrSUdGdWFXMWhkR2x2YmlCdFpXRnVjeUIwYUdGMElIUm9hWE1nWVc1cGJXRjBhVzl1SUhkcGJHd2dkR0ZyWlNCdmRtVnlJSFJvWlNCbGVHbHpkR2x1WnlCdmJtVmNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklITnZJR0Z1SUdWNFlXMXdiR1VnZDI5MWJHUWdhVzUyYjJ4MlpTQmhJR3hsWVhabElHRnVhVzFoZEdsdmJpQjBZV3RwYm1jZ2IzWmxjaUJoYmlCbGJuUmxjaTRnVkdobGJpQjNhR1Z1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ2NHOXpkRVJwWjJWemRDQnJhV05yY3lCcGJpQjBhR1VnWlc1MFpYSWdkMmxzYkNCaVpTQnBaMjV2Y21Wa0xseHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHcHZhVzVCYm1sdFlYUnBiMjVHYkdGbklEMGdhWE5CYkd4dmQyVmtLQ2RxYjJsdUp5d2daV3hsYldWdWRDd2dibVYzUVc1cGJXRjBhVzl1TENCbGVHbHpkR2x1WjBGdWFXMWhkR2x2YmlrN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FtOXBia0Z1YVcxaGRHbHZia1pzWVdjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Y0YVhOMGFXNW5RVzVwYldGMGFXOXVMbk4wWVhSbElEMDlQU0JTVlU1T1NVNUhYMU5VUVZSRktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxRVzVwYldGMGFXOXVSR1YwWVdsc2N5aGxiR1Z0Wlc1MExDQnVaWGRCYm1sdFlYUnBiMjRwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z3Y0d4NVIyVnVaWEpoZEdWa1VISmxjR0Z5WVhScGIyNURiR0Z6YzJWektHVnNaVzFsYm5Rc0lHbHpVM1J5ZFdOMGRYSmhiQ0EvSUdWMlpXNTBJRG9nYm5Wc2JDd2diM0IwYVc5dWN5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBJRDBnYm1WM1FXNXBiV0YwYVc5dUxtVjJaVzUwSUQwZ1pYaHBjM1JwYm1kQmJtbHRZWFJwYjI0dVpYWmxiblE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUcxbGNtZGxRVzVwYldGMGFXOXVSR1YwWVdsc2N5aGxiR1Z0Wlc1MExDQmxlR2x6ZEdsdVowRnVhVzFoZEdsdmJpd2dibVYzUVc1cGJXRjBhVzl1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTkzWlNCeVpYUjFjbTRnZEdobElITmhiV1VnY25WdWJtVnlJSE5wYm1ObElHOXViSGtnZEdobElHOXdkR2x2YmlCMllXeDFaWE1nYjJZZ2RHaHBjeUJoYm1sdFlYUnBiMjRnZDJsc2JGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZZbVVnWm1Wa0lHbHVkRzhnZEdobElHQmxlR2x6ZEdsdVowRnVhVzFoZEdsdmJtQXVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVjRhWE4wYVc1blFXNXBiV0YwYVc5dUxuSjFibTVsY2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJ1YjNKdFlXeHBlbUYwYVc5dUlHbHVJSFJvYVhNZ1kyRnpaU0J0WldGdWN5QjBhR0YwSUdsMElISmxiVzkyWlhNZ2NtVmtkVzVrWVc1MElFTlRVeUJqYkdGemMyVnpJSFJvWVhSY2NseHVJQ0FnSUNBZ0lDQXZMeUJoYkhKbFlXUjVJR1Y0YVhOMElDaGhaR1JEYkdGemN5a2diM0lnWkc4Z2JtOTBJR1Y0YVhOMElDaHlaVzF2ZG1WRGJHRnpjeWtnYjI0Z2RHaGxJR1ZzWlcxbGJuUmNjbHh1SUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZCYm1sdFlYUnBiMjVFWlhSaGFXeHpLR1ZzWlcxbGJuUXNJRzVsZDBGdWFXMWhkR2x2YmlrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUM4dklIZG9aVzRnZEdobElHOXdkR2x2Ym5NZ1lYSmxJRzFsY21kbFpDQmhibVFnWTJ4bFlXNWxaQ0IxY0NCM1pTQnRZWGtnWlc1a0lIVndJRzV2ZENCb1lYWnBibWNnZEc4Z1pHOWNjbHh1SUNBZ0lDQWdMeThnWVc0Z1lXNXBiV0YwYVc5dUlHRjBJR0ZzYkN3Z2RHaGxjbVZtYjNKbElIZGxJSE5vYjNWc1pDQmphR1ZqYXlCMGFHbHpJR0psWm05eVpTQnBjM04xYVc1bklHRWdjRzl6ZEZ4eVhHNGdJQ0FnSUNBdkx5QmthV2RsYzNRZ1kyRnNiR0poWTJzdUlGTjBjblZqZEhWeVlXd2dZVzVwYldGMGFXOXVjeUIzYVd4c0lHRnNkMkY1Y3lCeWRXNGdibThnYldGMGRHVnlJSGRvWVhRdVhISmNiaUFnSUNBZ0lIWmhjaUJwYzFaaGJHbGtRVzVwYldGMGFXOXVJRDBnYm1WM1FXNXBiV0YwYVc5dUxuTjBjblZqZEhWeVlXdzdYSEpjYmlBZ0lDQWdJR2xtSUNnaGFYTldZV3hwWkVGdWFXMWhkR2x2YmlrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUdGdWFXMWhkR1VnS0daeWIyMHZkRzhwSUdOaGJpQmlaU0J4ZFdsamEyeDVJR05vWldOclpXUWdabWx5YzNRc0lHOTBhR1Z5ZDJselpTQjNaU0JqYUdWamF5QnBaaUJoYm5rZ1kyeGhjM05sY3lCaGNtVWdjSEpsYzJWdWRGeHlYRzRnSUNBZ0lDQWdJR2x6Vm1Gc2FXUkJibWx0WVhScGIyNGdQU0FvYm1WM1FXNXBiV0YwYVc5dUxtVjJaVzUwSUQwOVBTQW5ZVzVwYldGMFpTY2dKaVlnVDJKcVpXTjBMbXRsZVhNb2JtVjNRVzVwYldGMGFXOXVMbTl3ZEdsdmJuTXVkRzhnZkh3Z2UzMHBMbXhsYm1kMGFDQStJREFwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhmQ0JvWVhOQmJtbHRZWFJwYjI1RGJHRnpjMlZ6S0c1bGQwRnVhVzFoZEdsdmJpazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2doYVhOV1lXeHBaRUZ1YVcxaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHTnNiM05sS0NrN1hISmNiaUFnSUNBZ0lDQWdZMnhsWVhKRmJHVnRaVzUwUVc1cGJXRjBhVzl1VTNSaGRHVW9aV3hsYldWdWRDazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEoxYm01bGNqdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdkR2hsSUdOdmRXNTBaWElnYTJWbGNITWdkSEpoWTJzZ2IyWWdZMkZ1WTJWc2JHVmtJR0Z1YVcxaGRHbHZibk5jY2x4dUlDQWdJQ0FnZG1GeUlHTnZkVzUwWlhJZ1BTQW9aWGhwYzNScGJtZEJibWx0WVhScGIyNHVZMjkxYm5SbGNpQjhmQ0F3S1NBcklERTdYSEpjYmlBZ0lDQWdJRzVsZDBGdWFXMWhkR2x2Ymk1amIzVnVkR1Z5SUQwZ1kyOTFiblJsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJRzFoY210RmJHVnRaVzUwUVc1cGJXRjBhVzl1VTNSaGRHVW9aV3hsYldWdWRDd2dVRkpGWDBSSlIwVlRWRjlUVkVGVVJTd2dibVYzUVc1cGJXRjBhVzl1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ1J5YjI5MFUyTnZjR1V1SkNSd2IzTjBSR2xuWlhOMEtHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmhibWx0WVhScGIyNUVaWFJoYVd4eklEMGdZV04wYVhabFFXNXBiV0YwYVc5dWMweHZiMnQxY0M1blpYUW9ibTlrWlNrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdGdWFXMWhkR2x2YmtOaGJtTmxiR3hsWkNBOUlDRmhibWx0WVhScGIyNUVaWFJoYVd4ek8xeHlYRzRnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZia1JsZEdGcGJITWdQU0JoYm1sdFlYUnBiMjVFWlhSaGFXeHpJSHg4SUh0OU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QnBaaUJoWkdSRGJHRnpjeTl5WlcxdmRtVkRiR0Z6Y3lCcGN5QmpZV3hzWldRZ1ltVm1iM0psSUhOdmJXVjBhR2x1WnlCc2FXdGxJR1Z1ZEdWeUlIUm9aVzRnZEdobFhISmNiaUFnSUNBZ0lDQWdMeThnY21WbmFYTjBaWEpsWkNCd1lYSmxiblFnWld4bGJXVnVkQ0J0WVhrZ2JtOTBJR0psSUhCeVpYTmxiblF1SUZSb1pTQmpiMlJsSUdKbGJHOTNJSGRwYkd3Z1pXNXpkWEpsWEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hoZENCaElHWnBibUZzSUhaaGJIVmxJR1p2Y2lCd1lYSmxiblFnWld4bGJXVnVkQ0JwY3lCdlluUmhhVzVsWkZ4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhKbGJuUkZiR1Z0Wlc1MElEMGdaV3hsYldWdWRDNXdZWEpsYm5Rb0tTQjhmQ0JiWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1lXNXBiV0YwWlM5emRISjFZM1IxY21Gc0wyTnNZWE56TFdKaGMyVmtJR0Z1YVcxaGRHbHZibk1nWVd4c0lHaGhkbVVnY21WeGRXbHlaVzFsYm5SekxpQlBkR2hsY25kcGMyVWdkR2hsY21WY2NseHVJQ0FnSUNBZ0lDQXZMeUJwY3lCdWJ5QndiMmx1ZENCcGJpQndaWEptYjNKdGFXNW5JR0Z1SUdGdWFXMWhkR2x2Ymk0Z1ZHaGxJSEJoY21WdWRDQnViMlJsSUcxMWMzUWdZV3h6YnlCaVpTQnpaWFF1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2x6Vm1Gc2FXUkJibWx0WVhScGIyNGdQU0J3WVhKbGJuUkZiR1Z0Wlc1MExteGxibWQwYUNBK0lEQmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW1KaUFvWVc1cGJXRjBhVzl1UkdWMFlXbHNjeTVsZG1WdWRDQTlQVDBnSjJGdWFXMWhkR1VuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIeDhJR0Z1YVcxaGRHbHZia1JsZEdGcGJITXVjM1J5ZFdOMGRYSmhiRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOGZDQm9ZWE5CYm1sdFlYUnBiMjVEYkdGemMyVnpLR0Z1YVcxaGRHbHZia1JsZEdGcGJITXBLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QnRaV0Z1Y3lCMGFHRjBJSFJvWlNCd2NtVjJhVzkxY3lCaGJtbHRZWFJwYjI0Z2QyRnpJR05oYm1ObGJHeGxaRnh5WEc0Z0lDQWdJQ0FnSUM4dklHVjJaVzRnYVdZZ2RHaGxJR1p2Ykd4dmR5MTFjQ0JoYm1sdFlYUnBiMjRnYVhNZ2RHaGxJSE5oYldVZ1pYWmxiblJjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZVzVwYldGMGFXOXVRMkZ1WTJWc2JHVmtJSHg4SUdGdWFXMWhkR2x2YmtSbGRHRnBiSE11WTI5MWJuUmxjaUFoUFQwZ1kyOTFiblJsY2lCOGZDQWhhWE5XWVd4cFpFRnVhVzFoZEdsdmJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhV1lnWVc1dmRHaGxjaUJoYm1sdFlYUnBiMjRnWkdsa0lHNXZkQ0IwWVd0bElHOTJaWElnZEdobGJpQjNaU0J1WldWa1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGJ5QnRZV3RsSUhOMWNtVWdkR2hoZENCMGFHVWdaRzl0VDNCbGNtRjBhVzl1SUdGdVpDQnZjSFJwYjI1eklHRnlaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhR0Z1Wkd4bFpDQmhZMk52Y21ScGJtZHNlVnh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR0Z1YVcxaGRHbHZia05oYm1ObGJHeGxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoY0hCc2VVRnVhVzFoZEdsdmJrTnNZWE56WlhNb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGd2NHeDVRVzVwYldGMGFXOXVVM1I1YkdWektHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHbG1JSFJvWlNCbGRtVnVkQ0JqYUdGdVoyVmtJR1p5YjIwZ2MyOXRaWFJvYVc1bklHeHBhMlVnWlc1MFpYSWdkRzhnYkdWaGRtVWdkR2hsYmlCM1pTQmtiMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhWFFzSUc5MGFHVnlkMmx6WlNCcFppQnBkQ2R6SUhSb1pTQnpZVzFsSUhSb1pXNGdkR2hsSUdWdVpDQnlaWE4xYkhRZ2QybHNiQ0JpWlNCMGFHVWdjMkZ0WlNCMGIyOWNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGhibWx0WVhScGIyNURZVzVqWld4c1pXUWdmSHdnS0dselUzUnlkV04wZFhKaGJDQW1KaUJoYm1sdFlYUnBiMjVFWlhSaGFXeHpMbVYyWlc1MElDRTlQU0JsZG1WdWRDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NWtiMjFQY0dWeVlYUnBiMjRvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY25WdWJtVnlMbVZ1WkNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHbHVJSFJvWlNCbGRtVnVkQ0IwYUdGMElIUm9aU0JsYkdWdFpXNTBJR0Z1YVcxaGRHbHZiaUIzWVhNZ2JtOTBJR05oYm1ObGJHeGxaQ0J2Y2lCaElHWnZiR3h2ZHkxMWNDQmhibWx0WVhScGIyNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHbHpiaWQwSUdGc2JHOTNaV1FnZEc4Z1lXNXBiV0YwWlNCbWNtOXRJR2hsY21VZ2RHaGxiaUIzWlNCdVpXVmtJSFJ2SUdOc1pXRnlJSFJvWlNCemRHRjBaU0J2WmlCMGFHVWdaV3hsYldWdWRGeHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MyOGdkR2hoZENCaGJua2dablYwZFhKbElHRnVhVzFoZEdsdmJuTWdkMjl1SjNRZ2NtVmhaQ0IwYUdVZ1pYaHdhWEpsWkNCaGJtbHRZWFJwYjI0Z1pHRjBZUzVjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doYVhOV1lXeHBaRUZ1YVcxaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGNrVnNaVzFsYm5SQmJtbHRZWFJwYjI1VGRHRjBaU2hsYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUIwYUdseklHTnZiV0pwYm1Wa0lHMTFiSFJwY0d4bElHTnNZWE56SUhSdklHRmtaRU5zWVhOeklDOGdjbVZ0YjNabFEyeGhjM01nYVc1MGJ5QmhJSE5sZEVOc1lYTnpJR1YyWlc1MFhISmNiaUFnSUNBZ0lDQWdMeThnYzI4Z2JHOXVaeUJoY3lCaElITjBjblZqZEhWeVlXd2daWFpsYm5RZ1pHbGtJRzV2ZENCMFlXdGxJRzkyWlhJZ2RHaGxJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0FnSUdWMlpXNTBJRDBnSVdGdWFXMWhkR2x2YmtSbGRHRnBiSE11YzNSeWRXTjBkWEpoYkNBbUppQm9ZWE5CYm1sdFlYUnBiMjVEYkdGemMyVnpLR0Z1YVcxaGRHbHZia1JsZEdGcGJITXNJSFJ5ZFdVcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z0ozTmxkRU5zWVhOekoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBNklHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNdVpYWmxiblE3WEhKY2JseHlYRzRnSUNBZ0lDQWdJRzFoY210RmJHVnRaVzUwUVc1cGJXRjBhVzl1VTNSaGRHVW9aV3hsYldWdWRDd2dVbFZPVGtsT1IxOVRWRUZVUlNrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFlXeFNkVzV1WlhJZ1BTQWtKR0Z1YVcxaGRHbHZiaWhsYkdWdFpXNTBMQ0JsZG1WdWRDd2dZVzVwYldGMGFXOXVSR1YwWVdsc2N5NXZjSFJwYjI1ektUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hwY3lCM2FXeHNJSFZ3WkdGMFpTQjBhR1VnY25WdWJtVnlKM01nWm14dmR5MWpiMjUwY205c0lHVjJaVzUwY3lCaVlYTmxaQ0J2Ymx4eVhHNGdJQ0FnSUNBZ0lDOHZJSFJvWlNCZ2NtVmhiRkoxYm01bGNtQWdiMkpxWldOMExseHlYRzRnSUNBZ0lDQWdJSEoxYm01bGNpNXpaWFJJYjNOMEtISmxZV3hTZFc1dVpYSXBPMXh5WEc0Z0lDQWdJQ0FnSUc1dmRHbG1lVkJ5YjJkeVpYTnpLSEoxYm01bGNpd2daWFpsYm5Rc0lDZHpkR0Z5ZENjc0lIdDlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVZoYkZKMWJtNWxjaTVrYjI1bEtHWjFibU4wYVc5dUtITjBZWFIxY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTJ4dmMyVW9JWE4wWVhSMWN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllYSWdZVzVwYldGMGFXOXVSR1YwWVdsc2N5QTlJR0ZqZEdsMlpVRnVhVzFoZEdsdmJuTk1iMjlyZFhBdVoyVjBLRzV2WkdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHRnVhVzFoZEdsdmJrUmxkR0ZwYkhNZ0ppWWdZVzVwYldGMGFXOXVSR1YwWVdsc2N5NWpiM1Z1ZEdWeUlEMDlQU0JqYjNWdWRHVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVJXeGxiV1Z1ZEVGdWFXMWhkR2x2YmxOMFlYUmxLR2RsZEVSdmJVNXZaR1VvWld4bGJXVnVkQ2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2JtOTBhV1o1VUhKdlozSmxjM01vY25WdWJtVnlMQ0JsZG1WdWRDd2dKMk5zYjNObEp5d2dlMzBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnlkVzV1WlhJN1hISmNibHh5WEc0Z0lDQWdJQ0JtZFc1amRHbHZiaUJ1YjNScFpubFFjbTluY21WemN5aHlkVzV1WlhJc0lHVjJaVzUwTENCd2FHRnpaU3dnWkdGMFlTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKMWJrbHVUbVY0ZEZCdmMzUkVhV2RsYzNSUGNrNXZkeWhtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCallXeHNZbUZqYTNNZ1BTQm1hVzVrUTJGc2JHSmhZMnR6S0hCaGNtVnVkQ3dnWld4bGJXVnVkQ3dnWlhabGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR05oYkd4aVlXTnJjeTVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWkc4Z2JtOTBJRzl3ZEdsdGFYcGxJSFJvYVhNZ1kyRnNiQ0JvWlhKbElIUnZJRkpCUmlCaVpXTmhkWE5sWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHUnZiaWQwSUd0dWIzY2dhRzkzSUdobFlYWjVJSFJvWlNCallXeHNZbUZqYXlCamIyUmxJR2hsY21VZ2QybHNiRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJpWlNCaGJtUWdhV1lnZEdocGN5QmpiMlJsSUdseklHSjFabVpsY21Wa0lIUm9aVzRnZEdocGN5QmpZVzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYkdWaFpDQjBieUJoSUhCbGNtWnZjbTFoYm1ObElISmxaM0psYzNOcGIyNHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDUWtja0ZHS0daMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZja1ZoWTJnb1kyRnNiR0poWTJ0ekxDQm1kVzVqZEdsdmJpaGpZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvWld4bGJXVnVkQ3dnY0doaGMyVXNJR1JoZEdFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWldGdWRYQkZkbVZ1ZEV4cGMzUmxibVZ5Y3lod2FHRnpaU3dnWld4bGJXVnVkQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZVzUxY0VWMlpXNTBUR2x6ZEdWdVpYSnpLSEJvWVhObExDQmxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCeWRXNXVaWEl1Y0hKdlozSmxjM01vWlhabGJuUXNJSEJvWVhObExDQmtZWFJoS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnWTJ4dmMyVW9jbVZxWldOMEtTQjdJQzh2SUdwemFHbHVkQ0JwWjI1dmNtVTZiR2x1WlZ4eVhHNGdJQ0FnSUNBZ0lHTnNaV0Z5UjJWdVpYSmhkR1ZrUTJ4aGMzTmxjeWhsYkdWdFpXNTBMQ0J2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnSUNCaGNIQnNlVUZ1YVcxaGRHbHZia05zWVhOelpYTW9aV3hsYldWdWRDd2diM0IwYVc5dWN5azdYSEpjYmlBZ0lDQWdJQ0FnWVhCd2JIbEJibWx0WVhScGIyNVRkSGxzWlhNb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrN1hISmNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NWtiMjFQY0dWeVlYUnBiMjRvS1R0Y2NseHVJQ0FnSUNBZ0lDQnlkVzV1WlhJdVkyOXRjR3hsZEdVb0lYSmxhbVZqZENrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJqYkc5elpVTm9hV3hrUVc1cGJXRjBhVzl1Y3lobGJHVnRaVzUwS1NCN1hISmNiaUFnSUNBZ0lIWmhjaUJ1YjJSbElEMGdaMlYwUkc5dFRtOWtaU2hsYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnZG1GeUlHTm9hV3hrY21WdUlEMGdibTlrWlM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkYkp5QXJJRTVIWDBGT1NVMUJWRVZmUVZSVVVsOU9RVTFGSUNzZ0oxMG5LVHRjY2x4dUlDQWdJQ0FnWm05eVJXRmphQ2hqYUdsc1pISmxiaXdnWm5WdVkzUnBiMjRvWTJocGJHUXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjM1JoZEdVZ1BTQndZWEp6WlVsdWRDaGphR2xzWkM1blpYUkJkSFJ5YVdKMWRHVW9Ua2RmUVU1SlRVRlVSVjlCVkZSU1gwNUJUVVVwS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1UkdWMFlXbHNjeUE5SUdGamRHbDJaVUZ1YVcxaGRHbHZibk5NYjI5cmRYQXVaMlYwS0dOb2FXeGtLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZVzVwYldGMGFXOXVSR1YwWVdsc2N5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoemRHRjBaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGSlZUazVKVGtkZlUxUkJWRVU2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1UkdWMFlXbHNjeTV5ZFc1dVpYSXVaVzVrS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dabUZzYkhNZ2RHaHliM1ZuYUNBcUwxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJTUlY5RVNVZEZVMVJmVTFSQlZFVTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV04wYVhabFFXNXBiV0YwYVc5dWMweHZiMnQxY0M1eVpXMXZkbVVvWTJocGJHUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z1kyeGxZWEpGYkdWdFpXNTBRVzVwYldGMGFXOXVVM1JoZEdVb1pXeGxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnYm05a1pTQTlJR2RsZEVSdmJVNXZaR1VvWld4bGJXVnVkQ2s3WEhKY2JpQWdJQ0FnSUc1dlpHVXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtFNUhYMEZPU1UxQlZFVmZRVlJVVWw5T1FVMUZLVHRjY2x4dUlDQWdJQ0FnWVdOMGFYWmxRVzVwYldGMGFXOXVjMHh2YjJ0MWNDNXlaVzF2ZG1Vb2JtOWtaU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2FYTk5ZWFJqYUdsdVowVnNaVzFsYm5Rb2JtOWtaVTl5Uld4dFFTd2dibTlrWlU5eVJXeHRRaWtnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWjJWMFJHOXRUbTlrWlNodWIyUmxUM0pGYkcxQktTQTlQVDBnWjJWMFJHOXRUbTlrWlNodWIyUmxUM0pGYkcxQ0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlGUm9hWE1nWm00Z2NtVjBkWEp1Y3lCbVlXeHpaU0JwWmlCaGJua2diMllnZEdobElHWnZiR3h2ZDJsdVp5QnBjeUIwY25WbE9seHlYRzRnSUNBZ0lDb2dZU2tnWVc1cGJXRjBhVzl1Y3lCdmJpQmhibmtnY0dGeVpXNTBJR1ZzWlcxbGJuUWdZWEpsSUdScGMyRmliR1ZrTENCaGJtUWdZVzVwYldGMGFXOXVjeUJ2YmlCMGFHVWdaV3hsYldWdWRDQmhjbVZ1SjNRZ1pYaHdiR2xqYVhSc2VTQmhiR3h2ZDJWa1hISmNiaUFnSUNBZ0tpQmlLU0JoSUhCaGNtVnVkQ0JsYkdWdFpXNTBJR2hoY3lCaGJpQnZibWR2YVc1bklITjBjblZqZEhWeVlXd2dZVzVwYldGMGFXOXVMQ0JoYm1RZ1lXNXBiV0YwWlVOb2FXeGtjbVZ1SUdseklHWmhiSE5sWEhKY2JpQWdJQ0FnS2lCaktTQjBhR1VnWld4bGJXVnVkQ0JwY3lCdWIzUWdZU0JqYUdsc1pDQnZaaUIwYUdVZ1ltOWtlVnh5WEc0Z0lDQWdJQ29nWkNrZ2RHaGxJR1ZzWlcxbGJuUWdhWE1nYm05MElHRWdZMmhwYkdRZ2IyWWdkR2hsSUNSeWIyOTBSV3hsYldWdWRGeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmhjbVZCYm1sdFlYUnBiMjV6UVd4c2IzZGxaQ2hsYkdWdFpXNTBMQ0J3WVhKbGJuUkZiR1Z0Wlc1MExDQmxkbVZ1ZENrZ2UxeHlYRzRnSUNBZ0lDQjJZWElnWW05a2VVVnNaVzFsYm5RZ1BTQnFjVXhwZEdVb0pHUnZZM1Z0Wlc1MFd6QmRMbUp2WkhrcE8xeHlYRzRnSUNBZ0lDQjJZWElnWW05a2VVVnNaVzFsYm5SRVpYUmxZM1JsWkNBOUlHbHpUV0YwWTJocGJtZEZiR1Z0Wlc1MEtHVnNaVzFsYm5Rc0lHSnZaSGxGYkdWdFpXNTBLU0I4ZkNCbGJHVnRaVzUwV3pCZExtNXZaR1ZPWVcxbElEMDlQU0FuU0ZSTlRDYzdYSEpjYmlBZ0lDQWdJSFpoY2lCeWIyOTBSV3hsYldWdWRFUmxkR1ZqZEdWa0lEMGdhWE5OWVhSamFHbHVaMFZzWlcxbGJuUW9aV3hsYldWdWRDd2dKSEp2YjNSRmJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ2RtRnlJSEJoY21WdWRFRnVhVzFoZEdsdmJrUmxkR1ZqZEdWa0lEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lIWmhjaUJoYm1sdFlYUmxRMmhwYkdSeVpXNDdYSEpjYmlBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwUkdsellXSnNaV1FnUFNCa2FYTmhZbXhsWkVWc1pXMWxiblJ6VEc5dmEzVndMbWRsZENoblpYUkViMjFPYjJSbEtHVnNaVzFsYm5RcEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUhaaGNpQndZWEpsYm5SSWIzTjBJRDBnYW5GTWFYUmxMbVJoZEdFb1pXeGxiV1Z1ZEZzd1hTd2dUa2RmUVU1SlRVRlVSVjlRU1U1ZlJFRlVRU2s3WEhKY2JpQWdJQ0FnSUdsbUlDaHdZWEpsYm5SSWIzTjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NHRnlaVzUwUld4bGJXVnVkQ0E5SUhCaGNtVnVkRWh2YzNRN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhCaGNtVnVkRVZzWlcxbGJuUWdQU0JuWlhSRWIyMU9iMlJsS0hCaGNtVnVkRVZzWlcxbGJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2QyaHBiR1VnS0hCaGNtVnVkRVZzWlcxbGJuUXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9JWEp2YjNSRmJHVnRaVzUwUkdWMFpXTjBaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUdGdVozVnNZWElnWkc5bGMyNG5kQ0IzWVc1MElIUnZJR0YwZEdWdGNIUWdkRzhnWVc1cGJXRjBaU0JsYkdWdFpXNTBjeUJ2ZFhSemFXUmxJRzltSUhSb1pTQmhjSEJzYVdOaGRHbHZibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkR2hsY21WbWIzSmxJSGRsSUc1bFpXUWdkRzhnWlc1emRYSmxJSFJvWVhRZ2RHaGxJSEp2YjNSRmJHVnRaVzUwSUdseklHRnVJR0Z1WTJWemRHOXlJRzltSUhSb1pTQmpkWEp5Wlc1MElHVnNaVzFsYm5SY2NseHVJQ0FnSUNBZ0lDQWdJSEp2YjNSRmJHVnRaVzUwUkdWMFpXTjBaV1FnUFNCcGMwMWhkR05vYVc1blJXeGxiV1Z1ZENod1lYSmxiblJGYkdWdFpXNTBMQ0FrY205dmRFVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hCaGNtVnVkRVZzWlcxbGJuUXVibTlrWlZSNWNHVWdJVDA5SUVWTVJVMUZUbFJmVGs5RVJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdibThnY0c5cGJuUWdhVzRnYVc1emNHVmpkR2x1WnlCMGFHVWdJMlJ2WTNWdFpXNTBJR1ZzWlcxbGJuUmNjbHh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxkR0ZwYkhNZ1BTQmhZM1JwZG1WQmJtbHRZWFJwYjI1elRHOXZhM1Z3TG1kbGRDaHdZWEpsYm5SRmJHVnRaVzUwS1NCOGZDQjdmVHRjY2x4dUlDQWdJQ0FnSUNBdkx5QmxhWFJvWlhJZ1lXNGdaVzUwWlhJc0lHeGxZWFpsSUc5eUlHMXZkbVVnWVc1cGJXRjBhVzl1SUhkcGJHd2dZMjl0YldWdVkyVmNjbHh1SUNBZ0lDQWdJQ0F2THlCMGFHVnlaV1p2Y21VZ2QyVWdZMkZ1SjNRZ1lXeHNiM2NnWVc1NUlHRnVhVzFoZEdsdmJuTWdkRzhnZEdGclpTQndiR0ZqWlZ4eVhHNGdJQ0FnSUNBZ0lDOHZJR0oxZENCcFppQmhJSEJoY21WdWRDQmhibWx0WVhScGIyNGdhWE1nWTJ4aGMzTXRZbUZ6WldRZ2RHaGxiaUIwYUdGMEozTWdiMnRjY2x4dUlDQWdJQ0FnSUNCcFppQW9JWEJoY21WdWRFRnVhVzFoZEdsdmJrUmxkR1ZqZEdWa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllYSWdjR0Z5Wlc1MFJXeGxiV1Z1ZEVScGMyRmliR1ZrSUQwZ1pHbHpZV0pzWldSRmJHVnRaVzUwYzB4dmIydDFjQzVuWlhRb2NHRnlaVzUwUld4bGJXVnVkQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIQmhjbVZ1ZEVWc1pXMWxiblJFYVhOaFlteGxaQ0E5UFQwZ2RISjFaU0FtSmlCbGJHVnRaVzUwUkdsellXSnNaV1FnSVQwOUlHWmhiSE5sS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHUnBjMkZpYkdVZ1lXNXBiV0YwYVc5dWN5QnBaaUIwYUdVZ2RYTmxjaUJvWVhOdUozUWdaWGh3YkdsamFYUnNlU0JsYm1GaWJHVmtJR0Z1YVcxaGRHbHZibk1nYjI0Z2RHaGxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR04xY25KbGJuUWdaV3hsYldWdWRGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwUkdsellXSnNaV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYkdWdFpXNTBJR2x6SUdScGMyRmliR1ZrSUhacFlTQndZWEpsYm5RZ1pXeGxiV1Z1ZEN3Z2JtOGdibVZsWkNCMGJ5QmphR1ZqYXlCaGJubDBhR2x1WnlCbGJITmxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h3WVhKbGJuUkZiR1Z0Wlc1MFJHbHpZV0pzWldRZ1BUMDlJR1poYkhObEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5SRWFYTmhZbXhsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2NHRnlaVzUwUVc1cGJXRjBhVzl1UkdWMFpXTjBaV1FnUFNCa1pYUmhhV3h6TG5OMGNuVmpkSFZ5WVd3N1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVhOVmJtUmxabWx1WldRb1lXNXBiV0YwWlVOb2FXeGtjbVZ1S1NCOGZDQmhibWx0WVhSbFEyaHBiR1J5Wlc0Z1BUMDlJSFJ5ZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHcHhUR2wwWlM1a1lYUmhLSEJoY21WdWRFVnNaVzFsYm5Rc0lFNUhYMEZPU1UxQlZFVmZRMGhKVEVSU1JVNWZSRUZVUVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FYTkVaV1pwYm1Wa0tIWmhiSFZsS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJsUTJocGJHUnlaVzRnUFNCMllXeDFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUhSb1pYSmxJR2x6SUc1dklHNWxaV1FnZEc4Z1kyOXVkR2x1ZFdVZ2RISmhkbVZ5YzJsdVp5QmhkQ0IwYUdseklIQnZhVzUwWEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSEJoY21WdWRFRnVhVzFoZEdsdmJrUmxkR1ZqZEdWa0lDWW1JR0Z1YVcxaGRHVkRhR2xzWkhKbGJpQTlQVDBnWm1Gc2MyVXBJR0p5WldGck8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9JV0p2WkhsRmJHVnRaVzUwUkdWMFpXTjBaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHRnNjMjhnYm1WbFpDQjBieUJsYm5OMWNtVWdkR2hoZENCMGFHVWdaV3hsYldWdWRDQnBjeUJ2Y2lCM2FXeHNJR0psSUdFZ2NHRnlkQ0J2WmlCMGFHVWdZbTlrZVNCbGJHVnRaVzUwWEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ2ZEdobGNuZHBjMlVnYVhRZ2FYTWdjRzlwYm5Sc1pYTnpJSFJ2SUdWMlpXNGdhWE56ZFdVZ1lXNGdZVzVwYldGMGFXOXVJSFJ2SUdKbElISmxibVJsY21Wa1hISmNiaUFnSUNBZ0lDQWdJQ0JpYjJSNVJXeGxiV1Z1ZEVSbGRHVmpkR1ZrSUQwZ2FYTk5ZWFJqYUdsdVowVnNaVzFsYm5Rb2NHRnlaVzUwUld4bGJXVnVkQ3dnWW05a2VVVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0dKdlpIbEZiR1Z0Wlc1MFJHVjBaV04wWldRZ0ppWWdjbTl2ZEVWc1pXMWxiblJFWlhSbFkzUmxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnU1dZZ1ltOTBhQ0JpYjJSNUlHRnVaQ0J5YjI5MElHaGhkbVVnWW1WbGJpQm1iM1Z1WkN3Z1lXNTVJRzkwYUdWeUlHTm9aV05yY3lCaGNtVWdjRzlwYm5Sc1pYTnpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZWE1nYm04Z1lXNXBiV0YwYVc5dUlHUmhkR0VnYzJodmRXeGtJR3hwZG1VZ2IzVjBjMmxrWlNCMGFHVWdZWEJ3YkdsallYUnBiMjVjY2x4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z5YjI5MFJXeGxiV1Z1ZEVSbGRHVmpkR1ZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCSlppQnVieUJ5YjI5MFJXeGxiV1Z1ZENCcGN5QmtaWFJsWTNSbFpDd2dZMmhsWTJzZ2FXWWdkR2hsSUhCaGNtVnVkRVZzWlcxbGJuUWdhWE1nY0dsdWJtVmtJSFJ2SUdGdWIzUm9aWElnWld4bGJXVnVkRnh5WEc0Z0lDQWdJQ0FnSUNBZ2NHRnlaVzUwU0c5emRDQTlJR3B4VEdsMFpTNWtZWFJoS0hCaGNtVnVkRVZzWlcxbGJuUXNJRTVIWDBGT1NVMUJWRVZmVUVsT1gwUkJWRUVwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCaGNtVnVkRWh2YzNRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hsSUhCcGJpQjBZWEpuWlhRZ1pXeGxiV1Z1ZENCaVpXTnZiV1Z6SUhSb1pTQnVaWGgwSUhCaGNtVnVkQ0JsYkdWdFpXNTBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbVZ1ZEVWc1pXMWxiblFnUFNCblpYUkViMjFPYjJSbEtIQmhjbVZ1ZEVodmMzUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIQmhjbVZ1ZEVWc1pXMWxiblFnUFNCd1lYSmxiblJGYkdWdFpXNTBMbkJoY21WdWRFNXZaR1U3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSFpoY2lCaGJHeHZkMEZ1YVcxaGRHbHZiaUE5SUNnaGNHRnlaVzUwUVc1cGJXRjBhVzl1UkdWMFpXTjBaV1FnZkh3Z1lXNXBiV0YwWlVOb2FXeGtjbVZ1S1NBbUppQmxiR1Z0Wlc1MFJHbHpZV0pzWldRZ0lUMDlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCaGJHeHZkMEZ1YVcxaGRHbHZiaUFtSmlCeWIyOTBSV3hsYldWdWRFUmxkR1ZqZEdWa0lDWW1JR0p2WkhsRmJHVnRaVzUwUkdWMFpXTjBaV1E3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1puVnVZM1JwYjI0Z2JXRnlhMFZzWlcxbGJuUkJibWx0WVhScGIyNVRkR0YwWlNobGJHVnRaVzUwTENCemRHRjBaU3dnWkdWMFlXbHNjeWtnZTF4eVhHNGdJQ0FnSUNCa1pYUmhhV3h6SUQwZ1pHVjBZV2xzY3lCOGZDQjdmVHRjY2x4dUlDQWdJQ0FnWkdWMFlXbHNjeTV6ZEdGMFpTQTlJSE4wWVhSbE8xeHlYRzVjY2x4dUlDQWdJQ0FnZG1GeUlHNXZaR1VnUFNCblpYUkViMjFPYjJSbEtHVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ0lDQnViMlJsTG5ObGRFRjBkSEpwWW5WMFpTaE9SMTlCVGtsTlFWUkZYMEZVVkZKZlRrRk5SU3dnYzNSaGRHVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2RtRnlJRzlzWkZaaGJIVmxJRDBnWVdOMGFYWmxRVzVwYldGMGFXOXVjMHh2YjJ0MWNDNW5aWFFvYm05a1pTazdYSEpjYmlBZ0lDQWdJSFpoY2lCdVpYZFdZV3gxWlNBOUlHOXNaRlpoYkhWbFhISmNiaUFnSUNBZ0lDQWdJQ0EvSUdWNGRHVnVaQ2h2YkdSV1lXeDFaU3dnWkdWMFlXbHNjeWxjY2x4dUlDQWdJQ0FnSUNBZ0lEb2daR1YwWVdsc2N6dGNjbHh1SUNBZ0lDQWdZV04wYVhabFFXNXBiV0YwYVc5dWMweHZiMnQxY0M1d2RYUW9ibTlrWlN3Z2JtVjNWbUZzZFdVcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxZE8xeHlYRzU5WFR0Y2NseHVYSEpjYm5aaGNpQWtKRUZ1YVcxaGRHbHZibEJ5YjNacFpHVnlJRDBnV3lja1lXNXBiV0YwWlZCeWIzWnBaR1Z5Snl3Z1puVnVZM1JwYjI0b0pHRnVhVzFoZEdWUWNtOTJhV1JsY2lrZ2UxeHlYRzRnSUhaaGNpQk9SMTlCVGtsTlFWUkZYMUpGUmw5QlZGUlNJRDBnSjI1bkxXRnVhVzFoZEdVdGNtVm1KenRjY2x4dVhISmNiaUFnZG1GeUlHUnlhWFpsY25NZ1BTQjBhR2x6TG1SeWFYWmxjbk1nUFNCYlhUdGNjbHh1WEhKY2JpQWdkbUZ5SUZKVlRrNUZVbDlUVkU5U1FVZEZYMHRGV1NBOUlDY2tKR0Z1YVcxaGRHbHZibEoxYm01bGNpYzdYSEpjYmx4eVhHNGdJR1oxYm1OMGFXOXVJSE5sZEZKMWJtNWxjaWhsYkdWdFpXNTBMQ0J5ZFc1dVpYSXBJSHRjY2x4dUlDQWdJR1ZzWlcxbGJuUXVaR0YwWVNoU1ZVNU9SVkpmVTFSUFVrRkhSVjlMUlZrc0lISjFibTVsY2lrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCbWRXNWpkR2x2YmlCeVpXMXZkbVZTZFc1dVpYSW9aV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdaV3hsYldWdWRDNXlaVzF2ZG1WRVlYUmhLRkpWVGs1RlVsOVRWRTlTUVVkRlgwdEZXU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JtZFc1amRHbHZiaUJuWlhSU2RXNXVaWElvWld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJR1ZzWlcxbGJuUXVaR0YwWVNoU1ZVNU9SVkpmVTFSUFVrRkhSVjlMUlZrcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2RHaHBjeTRrWjJWMElEMGdXeWNrSkdweFRHbDBaU2NzSUNja2NtOXZkRk5qYjNCbEp5d2dKeVJwYm1wbFkzUnZjaWNzSUNja0pFRnVhVzFoZEdWU2RXNXVaWEluTENBbkpDUklZWE5vVFdGd0p5d2dKeVFrY2tGR1UyTm9aV1IxYkdWeUp5eGNjbHh1SUNBZ0lDQWdJR1oxYm1OMGFXOXVLQ1FrYW5GTWFYUmxMQ0FnSUNSeWIyOTBVMk52Y0dVc0lDQWdKR2x1YW1WamRHOXlMQ0FnSUNRa1FXNXBiV0YwWlZKMWJtNWxjaXdnSUNBa0pFaGhjMmhOWVhBc0lDQWdKQ1J5UVVaVFkyaGxaSFZzWlhJcElIdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1lXNXBiV0YwYVc5dVVYVmxkV1VnUFNCYlhUdGNjbHh1SUNBZ0lIWmhjaUJoY0hCc2VVRnVhVzFoZEdsdmJrTnNZWE56WlhNZ1BTQmhjSEJzZVVGdWFXMWhkR2x2YmtOc1lYTnpaWE5HWVdOMGIzSjVLQ1FrYW5GTWFYUmxLVHRjY2x4dVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCemIzSjBRVzVwYldGMGFXOXVjeWhoYm1sdFlYUnBiMjV6S1NCN1hISmNiaUFnSUNBZ0lIWmhjaUIwY21WbElEMGdleUJqYUdsc1pISmxiam9nVzEwZ2ZUdGNjbHh1SUNBZ0lDQWdkbUZ5SUdrc0lHeHZiMnQxY0NBOUlHNWxkeUFrSkVoaGMyaE5ZWEFvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUhSb2FYTWdhWE1nWkc5dVpTQm1hWEp6ZENCaVpXWnZjbVZvWVc1a0lITnZJSFJvWVhRZ2RHaGxJR2hoYzJodFlYQmNjbHh1SUNBZ0lDQWdMeThnYVhNZ1ptbHNiR1ZrSUhkcGRHZ2dZU0JzYVhOMElHOW1JSFJvWlNCbGJHVnRaVzUwY3lCMGFHRjBJSGRwYkd3Z1ltVWdZVzVwYldGMFpXUmNjbHh1SUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHRnVhVzFoZEdsdmJuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVc1cGJXRjBhVzl1SUQwZ1lXNXBiV0YwYVc5dWMxdHBYVHRjY2x4dUlDQWdJQ0FnSUNCc2IyOXJkWEF1Y0hWMEtHRnVhVzFoZEdsdmJpNWtiMjFPYjJSbExDQmhibWx0WVhScGIyNXpXMmxkSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWkc5dFRtOWtaVG9nWVc1cGJXRjBhVzl1TG1SdmJVNXZaR1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQm1iam9nWVc1cGJXRjBhVzl1TG1adUxGeHlYRzRnSUNBZ0lDQWdJQ0FnWTJocGJHUnlaVzQ2SUZ0ZFhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQmhibWx0WVhScGIyNXpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdjSEp2WTJWemMwNXZaR1VvWVc1cGJXRjBhVzl1YzF0cFhTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCbWJHRjBkR1Z1S0hSeVpXVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NISnZZMlZ6YzA1dlpHVW9aVzUwY25rcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1Y0hKdlkyVnpjMlZrS1NCeVpYUjFjbTRnWlc1MGNuazdYSEpjYmlBZ0lDQWdJQ0FnWlc1MGNua3VjSEp2WTJWemMyVmtJRDBnZEhKMVpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1ZzWlcxbGJuUk9iMlJsSUQwZ1pXNTBjbmt1Wkc5dFRtOWtaVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjR0Z5Wlc1MFRtOWtaU0E5SUdWc1pXMWxiblJPYjJSbExuQmhjbVZ1ZEU1dlpHVTdYSEpjYmlBZ0lDQWdJQ0FnYkc5dmEzVndMbkIxZENobGJHVnRaVzUwVG05a1pTd2daVzUwY25rcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdjR0Z5Wlc1MFJXNTBjbms3WEhKY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0hCaGNtVnVkRTV2WkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhCaGNtVnVkRVZ1ZEhKNUlEMGdiRzl2YTNWd0xtZGxkQ2h3WVhKbGJuUk9iMlJsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNod1lYSmxiblJGYm5SeWVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhCaGNtVnVkRVZ1ZEhKNUxuQnliMk5sYzNObFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY21WdWRFVnVkSEo1SUQwZ2NISnZZMlZ6YzA1dlpHVW9jR0Z5Wlc1MFJXNTBjbmtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdjR0Z5Wlc1MFRtOWtaU0E5SUhCaGNtVnVkRTV2WkdVdWNHRnlaVzUwVG05a1pUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ2h3WVhKbGJuUkZiblJ5ZVNCOGZDQjBjbVZsS1M1amFHbHNaSEpsYmk1d2RYTm9LR1Z1ZEhKNUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVzUwY25rN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdac1lYUjBaVzRvZEhKbFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjWFZsZFdVZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdhVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElIUnlaV1V1WTJocGJHUnlaVzR1YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhGMVpYVmxMbkIxYzJnb2RISmxaUzVqYUdsc1pISmxibHRwWFNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY21WdFlXbHVhVzVuVEdWMlpXeEZiblJ5YVdWeklEMGdjWFZsZFdVdWJHVnVaM1JvTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhoMFRHVjJaV3hGYm5SeWFXVnpJRDBnTUR0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY205M0lEMGdXMTA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnhkV1YxWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdjWFZsZFdWYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ0WVdsdWFXNW5UR1YyWld4RmJuUnlhV1Z6SUR3OUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ0WVdsdWFXNW5UR1YyWld4RmJuUnlhV1Z6SUQwZ2JtVjRkRXhsZG1Wc1JXNTBjbWxsY3p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRFeGxkbVZzUlc1MGNtbGxjeUE5SURBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tISnZkeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEp2ZHlBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnY205M0xuQjFjMmdvWlc1MGNua3VabTRwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdaVzUwY25rdVkyaHBiR1J5Wlc0dVptOXlSV0ZqYUNobWRXNWpkR2x2YmloamFHbHNaRVZ1ZEhKNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJNWlhabGJFVnVkSEpwWlhNckt6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NYVmxkV1V1Y0hWemFDaGphR2xzWkVWdWRISjVLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnRZV2x1YVc1blRHVjJaV3hGYm5SeWFXVnpMUzA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9jbTkzTG14bGJtZDBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuQjFjMmdvY205M0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCVVQwUlBLRzFoZEhOcmJ5azZJR1J2WTNWdFpXNTBJSFJvWlNCemFXZHVZWFIxY21VZ2FXNGdZU0JpWlhSMFpYSWdkMkY1WEhKY2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9aV3hsYldWdWRDd2daWFpsYm5Rc0lHOXdkR2x2Ym5NcElIdGNjbHh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJSEJ5WlhCaGNtVkJibWx0WVhScGIyNVBjSFJwYjI1ektHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQjJZWElnYVhOVGRISjFZM1IxY21Gc0lEMGdXeWRsYm5SbGNpY3NJQ2R0YjNabEp5d2dKMnhsWVhabEoxMHVhVzVrWlhoUFppaGxkbVZ1ZENrZ1BqMGdNRHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZJSFJvWlhKbElHbHpJRzV2SUdGdWFXMWhkR2x2YmlCaGRDQjBhR1VnWTNWeWNtVnVkQ0J0YjIxbGJuUXNJR2h2ZDJWMlpYSmNjbHh1SUNBZ0lDQWdMeThnZEdobGMyVWdjblZ1Ym1WeUlHMWxkR2h2WkhNZ2QybHNiQ0JuWlhRZ2JHRjBaWElnZFhCa1lYUmxaQ0IzYVhSb0lIUm9aVnh5WEc0Z0lDQWdJQ0F2THlCdFpYUm9iMlJ6SUd4bFlXUnBibWNnYVc1MGJ5QjBhR1VnWkhKcGRtVnlKM01nWlc1a0wyTmhibU5sYkNCdFpYUm9iMlJ6WEhKY2JpQWdJQ0FnSUM4dklHWnZjaUJ1YjNjZ2RHaGxlU0JxZFhOMElITjBiM0FnZEdobElHRnVhVzFoZEdsdmJpQm1jbTl0SUhOMFlYSjBhVzVuWEhKY2JpQWdJQ0FnSUhaaGNpQnlkVzV1WlhJZ1BTQnVaWGNnSkNSQmJtbHRZWFJsVW5WdWJtVnlLSHRjY2x4dUlDQWdJQ0FnSUNCbGJtUTZJR1oxYm1OMGFXOXVLQ2tnZXlCamJHOXpaU2dwT3lCOUxGeHlYRzRnSUNBZ0lDQWdJR05oYm1ObGJEb2dablZ1WTNScGIyNG9LU0I3SUdOc2IzTmxLSFJ5ZFdVcE95QjlYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0NGa2NtbDJaWEp6TG14bGJtZDBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnNiM05sS0NrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISjFibTVsY2p0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYzJWMFVuVnVibVZ5S0dWc1pXMWxiblFzSUhKMWJtNWxjaWs3WEhKY2JseHlYRzRnSUNBZ0lDQjJZWElnWTJ4aGMzTmxjeUE5SUcxbGNtZGxRMnhoYzNObGN5aGxiR1Z0Wlc1MExtRjBkSElvSjJOc1lYTnpKeWtzSUcxbGNtZGxRMnhoYzNObGN5aHZjSFJwYjI1ekxtRmtaRU5zWVhOekxDQnZjSFJwYjI1ekxuSmxiVzkyWlVOc1lYTnpLU2s3WEhKY2JpQWdJQ0FnSUhaaGNpQjBaVzF3UTJ4aGMzTmxjeUE5SUc5d2RHbHZibk11ZEdWdGNFTnNZWE56WlhNN1hISmNiaUFnSUNBZ0lHbG1JQ2gwWlcxd1EyeGhjM05sY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR05zWVhOelpYTWdLejBnSnlBbklDc2dkR1Z0Y0VOc1lYTnpaWE03WEhKY2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1MFpXMXdRMnhoYzNObGN5QTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhaaGNpQndjbVZ3WVhKbFEyeGhjM05PWVcxbE8xeHlYRzRnSUNBZ0lDQnBaaUFvYVhOVGRISjFZM1IxY21Gc0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY0hKbGNHRnlaVU5zWVhOelRtRnRaU0E5SUNkdVp5MG5JQ3NnWlhabGJuUWdLeUJRVWtWUVFWSkZYME5NUVZOVFgxTlZSa1pKV0R0Y2NseHVJQ0FnSUNBZ0lDQWtKR3B4VEdsMFpTNWhaR1JEYkdGemN5aGxiR1Z0Wlc1MExDQndjbVZ3WVhKbFEyeGhjM05PWVcxbEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1lXNXBiV0YwYVc5dVVYVmxkV1V1Y0hWemFDaDdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2RHaHBjeUJrWVhSaElHbHpJSFZ6WldRZ1lua2dkR2hsSUhCdmMzUkVhV2RsYzNRZ1kyOWtaU0JoYm1RZ2NHRnpjMlZrSUdsdWRHOWNjbHh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdaSEpwZG1WeUlITjBaWEFnWm5WdVkzUnBiMjVjY2x4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwT2lCbGJHVnRaVzUwTEZ4eVhHNGdJQ0FnSUNBZ0lHTnNZWE56WlhNNklHTnNZWE56WlhNc1hISmNiaUFnSUNBZ0lDQWdaWFpsYm5RNklHVjJaVzUwTEZ4eVhHNGdJQ0FnSUNBZ0lITjBjblZqZEhWeVlXdzZJR2x6VTNSeWRXTjBkWEpoYkN4Y2NseHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ek9pQnZjSFJwYjI1ekxGeHlYRzRnSUNBZ0lDQWdJR0psWm05eVpWTjBZWEowT2lCaVpXWnZjbVZUZEdGeWRDeGNjbHh1SUNBZ0lDQWdJQ0JqYkc5elpUb2dZMnh2YzJWY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNCbGJHVnRaVzUwTG05dUtDY2taR1Z6ZEhKdmVTY3NJR2hoYm1Sc1pVUmxjM1J5YjNsbFpFVnNaVzFsYm5RcE8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk4Z2QyVWdiMjVzZVNCM1lXNTBJSFJvWlhKbElIUnZJR0psSUc5dVpTQm1kVzVqZEdsdmJpQmpZV3hzWldRZ2QybDBhR2x1SUhSb1pTQndiM04wSUdScFoyVnpkRnh5WEc0Z0lDQWdJQ0F2THlCaWJHOWpheTRnVkdocGN5QjNZWGtnZDJVZ1kyRnVJR2R5YjNWd0lHRnVhVzFoZEdsdmJuTWdabTl5SUdGc2JDQjBhR1VnWVc1cGJXRjBhVzl1Y3lCMGFHRjBYSEpjYmlBZ0lDQWdJQzh2SUhkbGNtVWdZWEJoY25RZ2IyWWdkR2hsSUhOaGJXVWdjRzl6ZEVScFoyVnpkQ0JtYkhWemFDQmpZV3hzTGx4eVhHNGdJQ0FnSUNCcFppQW9ZVzVwYldGMGFXOXVVWFZsZFdVdWJHVnVaM1JvSUQ0Z01Ta2djbVYwZFhKdUlISjFibTVsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQ1J5YjI5MFUyTnZjR1V1SkNSd2IzTjBSR2xuWlhOMEtHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmhibWx0WVhScGIyNXpJRDBnVzEwN1hISmNiaUFnSUNBZ0lDQWdabTl5UldGamFDaGhibWx0WVhScGIyNVJkV1YxWlN3Z1puVnVZM1JwYjI0b1pXNTBjbmtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUhSb1pTQmxiR1Z0Wlc1MElIZGhjeUJrWlhOMGNtOTVaV1FnWldGeWJIa2diMjRnZDJocFkyZ2djbVZ0YjNabFpDQjBhR1VnY25WdWJtVnlYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5Qm1iM0p0SUdsMGN5QnpkRzl5WVdkbExpQlVhR2x6SUcxbFlXNXpJSGRsSUdOaGJpZDBJR0Z1YVcxaGRHVWdkR2hwY3lCbGJHVnRaVzUwWEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJoZENCaGJHd2dZVzVrSUdsMElHRnNjbVZoWkhrZ2FHRnpJR0psWlc0Z1kyeHZjMlZrSUdSMVpTQjBieUJrWlhOMGNuVmpkR2x2Ymk1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoblpYUlNkVzV1WlhJb1pXNTBjbmt1Wld4bGJXVnVkQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1Y3k1d2RYTm9LR1Z1ZEhKNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNUxtTnNiM05sS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRzV2ZHlCaGJua2dablYwZFhKbElHRnVhVzFoZEdsdmJuTWdkMmxzYkNCaVpTQnBiaUJoYm05MGFHVnlJSEJ2YzNSRWFXZGxjM1JjY2x4dUlDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1UmRXVjFaUzVzWlc1bmRHZ2dQU0F3TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1ozSnZkWEJsWkVGdWFXMWhkR2x2Ym5NZ1BTQm5jbTkxY0VGdWFXMWhkR2x2Ym5Nb1lXNXBiV0YwYVc5dWN5azdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIUnZRbVZUYjNKMFpXUkJibWx0WVhScGIyNXpJRDBnVzEwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdadmNrVmhZMmdvWjNKdmRYQmxaRUZ1YVcxaGRHbHZibk1zSUdaMWJtTjBhVzl1S0dGdWFXMWhkR2x2YmtWdWRISjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBiMEpsVTI5eWRHVmtRVzVwYldGMGFXOXVjeTV3ZFhOb0tIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOXRUbTlrWlRvZ1oyVjBSRzl0VG05a1pTaGhibWx0WVhScGIyNUZiblJ5ZVM1bWNtOXRJRDhnWVc1cGJXRjBhVzl1Ulc1MGNua3Vabkp2YlM1bGJHVnRaVzUwSURvZ1lXNXBiV0YwYVc5dVJXNTBjbmt1Wld4bGJXVnVkQ2tzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p1T2lCbWRXNWpkR2x2YmlCMGNtbG5aMlZ5UVc1cGJXRjBhVzl1VTNSaGNuUW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FYUW5jeUJwYlhCdmNuUmhiblFnZEdoaGRDQjNaU0JoY0hCc2VTQjBhR1VnWUc1bkxXRnVhVzFoZEdWZ0lFTlRVeUJqYkdGemN5QmhibVFnZEdobFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR1Z0Y0c5eVlYSjVJR05zWVhOelpYTWdZbVZtYjNKbElIZGxJR1J2SUdGdWVTQmtjbWwyWlhJZ2FXNTJiMnRwYm1jZ2MybHVZMlVnZEdobGMyVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEVTFNZ1kyeGhjM05sY3lCdFlYa2dZbVVnY21WeGRXbHlaV1FnWm05eUlIQnliM0JsY2lCRFUxTWdaR1YwWldOMGFXOXVMbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZia1Z1ZEhKNUxtSmxabTl5WlZOMFlYSjBLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6ZEdGeWRFRnVhVzFoZEdsdmJrWnVMQ0JqYkc5elpVWnVJRDBnWVc1cGJXRjBhVzl1Ulc1MGNua3VZMnh2YzJVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsdUlIUm9aU0JsZG1WdWRDQjBhR0YwSUhSb1pTQmxiR1Z0Wlc1MElIZGhjeUJ5WlcxdmRtVmtJR0psWm05eVpTQjBhR1VnWkdsblpYTjBJSEoxYm5NZ2IzSmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJrZFhKcGJtY2dkR2hsSUZKQlJpQnpaWEYxWlc1amFXNW5JSFJvWlc0Z2QyVWdjMmh2ZFd4a0lHNXZkQ0IwY21sbloyVnlJSFJvWlNCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJoY21kbGRFVnNaVzFsYm5RZ1BTQmhibWx0WVhScGIyNUZiblJ5ZVM1aGJtTm9iM0p6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdLR0Z1YVcxaGRHbHZia1Z1ZEhKNUxtWnliMjB1Wld4bGJXVnVkQ0I4ZkNCaGJtbHRZWFJwYjI1RmJuUnllUzUwYnk1bGJHVnRaVzUwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR0Z1YVcxaGRHbHZia1Z1ZEhKNUxtVnNaVzFsYm5RN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoblpYUlNkVzV1WlhJb2RHRnlaMlYwUld4bGJXVnVkQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2Y0dWeVlYUnBiMjRnUFNCcGJuWnZhMlZHYVhKemRFUnlhWFpsY2loaGJtbHRZWFJwYjI1RmJuUnllU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0JsY21GMGFXOXVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowUVc1cGJXRjBhVzl1Um00Z1BTQnZjR1Z5WVhScGIyNHVjM1JoY25RN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWE4wWVhKMFFXNXBiV0YwYVc5dVJtNHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc2IzTmxSbTRvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0Z1YVcxaGRHbHZibEoxYm01bGNpQTlJSE4wWVhKMFFXNXBiV0YwYVc5dVJtNG9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2YmxKMWJtNWxjaTVrYjI1bEtHWjFibU4wYVc5dUtITjBZWFIxY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkc5elpVWnVLQ0Z6ZEdGMGRYTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjR1JoZEdWQmJtbHRZWFJwYjI1U2RXNXVaWEp6S0dGdWFXMWhkR2x2YmtWdWRISjVMQ0JoYm1sdFlYUnBiMjVTZFc1dVpYSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklIZGxJRzVsWldRZ2RHOGdjMjl5ZENCbFlXTm9JRzltSUhSb1pTQmhibWx0WVhScGIyNXpJR2x1SUc5eVpHVnlJRzltSUhCaGNtVnVkQ0IwYnlCamFHbHNaRnh5WEc0Z0lDQWdJQ0FnSUM4dklISmxiR0YwYVc5dWMyaHBjSE11SUZSb2FYTWdaVzV6ZFhKbGN5QjBhR0YwSUhSb1pTQmphR2xzWkNCamJHRnpjMlZ6SUdGeVpTQmhjSEJzYVdWa0lHRjBJSFJvWlZ4eVhHNGdJQ0FnSUNBZ0lDOHZJSEpwWjJoMElIUnBiV1V1WEhKY2JpQWdJQ0FnSUNBZ0pDUnlRVVpUWTJobFpIVnNaWElvYzI5eWRFRnVhVzFoZEdsdmJuTW9kRzlDWlZOdmNuUmxaRUZ1YVcxaGRHbHZibk1wS1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnY25WdWJtVnlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdWRTlFVHlodFlYUnphMjhwT2lCamFHRnVaMlVnZEc4Z2NtVm1aWEpsYm1ObElHNXZaR1Z6WEhKY2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdkbGRFRnVZMmh2Y2s1dlpHVnpLRzV2WkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1UwVk1SVU5VVDFJZ1BTQW5XeWNnS3lCT1IxOUJUa2xOUVZSRlgxSkZSbDlCVkZSU0lDc2dKMTBuTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwZEdWdGN5QTlJRzV2WkdVdWFHRnpRWFIwY21saWRYUmxLRTVIWDBGT1NVMUJWRVZmVWtWR1gwRlVWRklwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCYmJtOWtaVjFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUc1dlpHVXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaFRSVXhGUTFSUFVpazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHRnVZMmh2Y25NZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSkZZV05vS0dsMFpXMXpMQ0JtZFc1amRHbHZiaWh1YjJSbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllYSWdZWFIwY2lBOUlHNXZaR1V1WjJWMFFYUjBjbWxpZFhSbEtFNUhYMEZPU1UxQlZFVmZVa1ZHWDBGVVZGSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR0YwZEhJZ0ppWWdZWFIwY2k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVc1amFHOXljeTV3ZFhOb0tHNXZaR1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhibU5vYjNKek8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCbmNtOTFjRUZ1YVcxaGRHbHZibk1vWVc1cGJXRjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCd2NtVndZWEpsWkVGdWFXMWhkR2x2Ym5NZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjbVZtVEc5dmEzVndJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdabTl5UldGamFDaGhibWx0WVhScGIyNXpMQ0JtZFc1amRHbHZiaWhoYm1sdFlYUnBiMjRzSUdsdVpHVjRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjJZWElnWld4bGJXVnVkQ0E5SUdGdWFXMWhkR2x2Ymk1bGJHVnRaVzUwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUc1dlpHVWdQU0JuWlhSRWIyMU9iMlJsS0dWc1pXMWxiblFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdWMlpXNTBJRDBnWVc1cGJXRjBhVzl1TG1WMlpXNTBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEdWeVQzSk5iM1psSUQwZ1d5ZGxiblJsY2ljc0lDZHRiM1psSjEwdWFXNWtaWGhQWmlobGRtVnVkQ2tnUGowZ01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQmhibU5vYjNKT2IyUmxjeUE5SUdGdWFXMWhkR2x2Ymk1emRISjFZM1IxY21Gc0lEOGdaMlYwUVc1amFHOXlUbTlrWlhNb2JtOWtaU2tnT2lCYlhUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWVc1amFHOXlUbTlrWlhNdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmthWEpsWTNScGIyNGdQU0JsYm5SbGNrOXlUVzkyWlNBL0lDZDBieWNnT2lBblpuSnZiU2M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSkZZV05vS0dGdVkyaHZjazV2WkdWekxDQm1kVzVqZEdsdmJpaGhibU5vYjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYTJWNUlEMGdZVzVqYUc5eUxtZGxkRUYwZEhKcFluVjBaU2hPUjE5QlRrbE5RVlJGWDFKRlJsOUJWRlJTS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXWk1iMjlyZFhCYmEyVjVYU0E5SUhKbFpreHZiMnQxY0Z0clpYbGRJSHg4SUh0OU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxaa3h2YjJ0MWNGdHJaWGxkVzJScGNtVmpkR2x2YmwwZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVKUkRvZ2FXNWtaWGdzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwT2lCcWNVeHBkR1VvWVc1amFHOXlLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NISmxjR0Z5WldSQmJtbHRZWFJwYjI1ekxuQjFjMmdvWVc1cGJXRjBhVzl1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSFZ6WldSSmJtUnBZMlZ6VEc5dmEzVndJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdGdVkyaHZja2R5YjNWd2N5QTlJSHQ5TzF4eVhHNGdJQ0FnSUNBZ0lHWnZja1ZoWTJnb2NtVm1URzl2YTNWd0xDQm1kVzVqZEdsdmJpaHZjR1Z5WVhScGIyNXpMQ0JyWlhrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQm1jbTl0SUQwZ2IzQmxjbUYwYVc5dWN5NW1jbTl0TzF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhSdklEMGdiM0JsY21GMGFXOXVjeTUwYnp0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV1p5YjIwZ2ZId2dJWFJ2S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHOXViSGtnYjI1bElHOW1JSFJvWlhObElHbHpJSE5sZENCMGFHVnlaV1p2Y21VZ2QyVWdZMkZ1SjNRZ2FHRjJaU0JoYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGJtTm9iM0lnWVc1cGJXRjBhVzl1SUhOcGJtTmxJR0ZzYkNCMGFISmxaU0J3YVdWalpYTWdZWEpsSUhKbGNYVnBjbVZrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGJtUmxlQ0E5SUdaeWIyMGdQeUJtY205dExtRnVhVzFoZEdsdmJrbEVJRG9nZEc4dVlXNXBiV0YwYVc5dVNVUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwYm1SbGVFdGxlU0E5SUdsdVpHVjRMblJ2VTNSeWFXNW5LQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRYTmxaRWx1WkdsalpYTk1iMjlyZFhCYmFXNWtaWGhMWlhsZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sWkVsdVpHbGpaWE5NYjI5cmRYQmJhVzVrWlhoTFpYbGRJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVZ3WVhKbFpFRnVhVzFoZEdsdmJuTXVjSFZ6YUNoaGJtbHRZWFJwYjI1elcybHVaR1Y0WFNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJtY205dFFXNXBiV0YwYVc5dUlEMGdZVzVwYldGMGFXOXVjMXRtY205dExtRnVhVzFoZEdsdmJrbEVYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUIwYjBGdWFXMWhkR2x2YmlBOUlHRnVhVzFoZEdsdmJuTmJkRzh1WVc1cGJXRjBhVzl1U1VSZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHeHZiMnQxY0V0bGVTQTlJR1p5YjIwdVlXNXBiV0YwYVc5dVNVUXVkRzlUZEhKcGJtY29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doWVc1amFHOXlSM0p2ZFhCelcyeHZiMnQxY0V0bGVWMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdkeWIzVndJRDBnWVc1amFHOXlSM0p2ZFhCelcyeHZiMnQxY0V0bGVWMGdQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpoYkRvZ2RISjFaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JpWldadmNtVlRkR0Z5ZERvZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dFFXNXBiV0YwYVc5dUxtSmxabTl5WlZOMFlYSjBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIwRnVhVzFoZEdsdmJpNWlaV1p2Y21WVGRHRnlkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHZjMlU2SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlVGdWFXMWhkR2x2Ymk1amJHOXpaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOUJibWx0WVhScGIyNHVZMnh2YzJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelpYTTZJR056YzBOc1lYTnpaWE5KYm5SbGNuTmxZM1JwYjI0b1puSnZiVUZ1YVcxaGRHbHZiaTVqYkdGemMyVnpMQ0IwYjBGdWFXMWhkR2x2Ymk1amJHRnpjMlZ6S1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJtY205dFFXNXBiV0YwYVc5dUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUIwYjBGdWFXMWhkR2x2Yml4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJtTm9iM0p6T2lCYlhTQXZMeUJVVDBSUEtHMWhkSE5yYnlrNklHTm9ZVzVuWlNCMGJ5QnlaV1psY21WdVkyVWdibTlrWlhOY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWlNCaGJtTm9iM0lnWVc1cGJXRjBhVzl1Y3lCeVpYRjFhWEpsSUhSb1lYUWdkR2hsSUdaeWIyMGdZVzVrSUhSdklHVnNaVzFsYm5SeklHSnZkR2dnYUdGMlpTQmhkQ0JzWldGemRGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnZibVVnYzJoaGNtVmtJRU5UVXlCamJHRnpjeUIzYUdsamFDQmxabVpsWTNScGRtVnNlU0J0WVhKeWFXVnpJSFJvWlNCMGQyOGdaV3hsYldWdWRITWdkRzluWlhSb1pYSWdkRzhnZFhObFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0J6WVcxbElHRnVhVzFoZEdsdmJpQmtjbWwyWlhJZ1lXNWtJSFJ2SUhCeWIzQmxjbXg1SUhObGNYVmxibU5sSUhSb1pTQmhibU5vYjNJZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aM0p2ZFhBdVkyeGhjM05sY3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVndZWEpsWkVGdWFXMWhkR2x2Ym5NdWNIVnphQ2huY205MWNDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxjR0Z5WldSQmJtbHRZWFJwYjI1ekxuQjFjMmdvWm5KdmJVRnVhVzFoZEdsdmJpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpsY0dGeVpXUkJibWx0WVhScGIyNXpMbkIxYzJnb2RHOUJibWx0WVhScGIyNHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ1lXNWphRzl5UjNKdmRYQnpXMnh2YjJ0MWNFdGxlVjB1WVc1amFHOXljeTV3ZFhOb0tIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0oyOTFkQ2M2SUdaeWIyMHVaV3hsYldWdWRDd2dKMmx1SnpvZ2RHOHVaV3hsYldWdWRGeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbVZ3WVhKbFpFRnVhVzFoZEdsdmJuTTdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHTnpjME5zWVhOelpYTkpiblJsY25ObFkzUnBiMjRvWVN4aUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWVNBOUlHRXVjM0JzYVhRb0p5QW5LVHRjY2x4dUlDQWdJQ0FnSUNCaUlEMGdZaTV6Y0d4cGRDZ25JQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WVhSamFHVnpJRDBnVzEwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lTNXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdGaElEMGdZVnRwWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoaFlTNXpkV0p6ZEhKcGJtY29NQ3d6S1NBOVBUMGdKMjVuTFNjcElHTnZiblJwYm5WbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0F3T3lCcUlEd2dZaTVzWlc1bmRHZzdJR29yS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZV0VnUFQwOUlHSmJhbDBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmphR1Z6TG5CMWMyZ29ZV0VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRjBZMmhsY3k1cWIybHVLQ2NnSnlrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdsdWRtOXJaVVpwY25OMFJISnBkbVZ5S0dGdWFXMWhkR2x2YmtSbGRHRnBiSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUIzWlNCc2IyOXdJR2x1SUhKbGRtVnljMlVnYjNKa1pYSWdjMmx1WTJVZ2RHaGxJRzF2Y21VZ1oyVnVaWEpoYkNCa2NtbDJaWEp6SUNoc2FXdGxJRU5UVXlCaGJtUWdTbE1wWEhKY2JpQWdJQ0FnSUNBZ0x5OGdiV0Y1SUdGMGRHVnRjSFFnYlc5eVpTQmxiR1Z0Wlc1MGN5d2dZblYwSUdOMWMzUnZiU0JrY21sMlpYSnpJR0Z5WlNCdGIzSmxJSEJoY25ScFkzVnNZWEpjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdaSEpwZG1WeWN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHUnlhWFpsY2s1aGJXVWdQU0JrY21sMlpYSnpXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdaaFkzUnZjbmtnUFNBa2FXNXFaV04wYjNJdVoyVjBLR1J5YVhabGNrNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdSeWFYWmxjaUE5SUdaaFkzUnZjbmtvWVc1cGJXRjBhVzl1UkdWMFlXbHNjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWkhKcGRtVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmtjbWwyWlhJN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCaVpXWnZjbVZUZEdGeWRDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwTG1Ga1pFTnNZWE56S0U1SFgwRk9TVTFCVkVWZlEweEJVMU5PUVUxRktUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHVnRjRU5zWVhOelpYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDUWthbkZNYVhSbExtRmtaRU5zWVhOektHVnNaVzFsYm5Rc0lIUmxiWEJEYkdGemMyVnpLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hCeVpYQmhjbVZEYkdGemMwNWhiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ1FrYW5GTWFYUmxMbkpsYlc5MlpVTnNZWE56S0dWc1pXMWxiblFzSUhCeVpYQmhjbVZEYkdGemMwNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdjSEpsY0dGeVpVTnNZWE56VG1GdFpTQTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQm1kVzVqZEdsdmJpQjFjR1JoZEdWQmJtbHRZWFJwYjI1U2RXNXVaWEp6S0dGdWFXMWhkR2x2Yml3Z2JtVjNVblZ1Ym1WeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnVhVzFoZEdsdmJpNW1jbTl0SUNZbUlHRnVhVzFoZEdsdmJpNTBieWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkWEJrWVhSbEtHRnVhVzFoZEdsdmJpNW1jbTl0TG1Wc1pXMWxiblFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkWEJrWVhSbEtHRnVhVzFoZEdsdmJpNTBieTVsYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkWEJrWVhSbEtHRnVhVzFoZEdsdmJpNWxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFZ3WkdGMFpTaGxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMllYSWdjblZ1Ym1WeUlEMGdaMlYwVW5WdWJtVnlLR1ZzWlcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEoxYm01bGNpa2djblZ1Ym1WeUxuTmxkRWh2YzNRb2JtVjNVblZ1Ym1WeUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1oxYm1OMGFXOXVJR2hoYm1Sc1pVUmxjM1J5YjNsbFpFVnNaVzFsYm5Rb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISjFibTVsY2lBOUlHZGxkRkoxYm01bGNpaGxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2NuVnVibVZ5SUNZbUlDaGxkbVZ1ZENBaFBUMGdKMnhsWVhabEp5QjhmQ0FoYjNCMGFXOXVjeTRrSkdSdmJVOXdaWEpoZEdsdmJrWnBjbVZrS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY25WdWJtVnlMbVZ1WkNncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdablZ1WTNScGIyNGdZMnh2YzJVb2NtVnFaV04wWldRcElIc2dMeThnYW5Ob2FXNTBJR2xuYm05eVpUcHNhVzVsWEhKY2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1dlptWW9KeVJrWlhOMGNtOTVKeXdnYUdGdVpHeGxSR1Z6ZEhKdmVXVmtSV3hsYldWdWRDazdYSEpjYmlBZ0lDQWdJQ0FnY21WdGIzWmxVblZ1Ym1WeUtHVnNaVzFsYm5RcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCaGNIQnNlVUZ1YVcxaGRHbHZia05zWVhOelpYTW9aV3hsYldWdWRDd2diM0IwYVc5dWN5azdYSEpjYmlBZ0lDQWdJQ0FnWVhCd2JIbEJibWx0WVhScGIyNVRkSGxzWlhNb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrN1hISmNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NWtiMjFQY0dWeVlYUnBiMjRvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUmxiWEJEYkdGemMyVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWtKR3B4VEdsMFpTNXlaVzF2ZG1WRGJHRnpjeWhsYkdWdFpXNTBMQ0IwWlcxd1EyeGhjM05sY3lrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExuSmxiVzkyWlVOc1lYTnpLRTVIWDBGT1NVMUJWRVZmUTB4QlUxTk9RVTFGS1R0Y2NseHVJQ0FnSUNBZ0lDQnlkVzV1WlhJdVkyOXRjR3hsZEdVb0lYSmxhbVZqZEdWa0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dUlDQjlYVHRjY2x4dWZWMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRRzVuWkc5aklHUnBjbVZqZEdsMlpWeHlYRzRnS2lCQWJtRnRaU0J1WjBGdWFXMWhkR1ZUZDJGd1hISmNiaUFxSUVCeVpYTjBjbWxqZENCQlhISmNiaUFxSUVCelkyOXdaVnh5WEc0Z0tseHlYRzRnS2lCQVpHVnpZM0pwY0hScGIyNWNjbHh1SUNwY2NseHVJQ29nYm1kQmJtbHRZWFJsVTNkaGNDQnBjeUJoSUdGdWFXMWhkR2x2YmkxdmNtbGxiblJsWkNCa2FYSmxZM1JwZG1VZ2RHaGhkQ0JoYkd4dmQzTWdabTl5SUhSb1pTQmpiMjUwWVdsdVpYSWdkRzljY2x4dUlDb2dZbVVnY21WdGIzWmxaQ0JoYm1RZ1pXNTBaWEpsWkNCcGJpQjNhR1Z1WlhabGNpQjBhR1VnWVhOemIyTnBZWFJsWkNCbGVIQnlaWE56YVc5dUlHTm9ZVzVuWlhNdUlFRmNjbHh1SUNvZ1kyOXRiVzl1SUhWelpXTmhjMlVnWm05eUlIUm9hWE1nWkdseVpXTjBhWFpsSUdseklHRWdjbTkwWVhScGJtY2dZbUZ1Ym1WeUlHOXlJSE5zYVdSbGNpQmpiMjF3YjI1bGJuUWdkMmhwWTJoY2NseHVJQ29nWTI5dWRHRnBibk1nYjI1bElHbHRZV2RsSUdKbGFXNW5JSEJ5WlhObGJuUWdZWFFnWVNCMGFXMWxMaUJYYUdWdUlIUm9aU0JoWTNScGRtVWdhVzFoWjJVZ1kyaGhibWRsYzF4eVhHNGdLaUIwYUdWdUlIUm9aU0J2YkdRZ2FXMWhaMlVnZDJsc2JDQndaWEptYjNKdElHRWdZR3hsWVhabFlDQmhibWx0WVhScGIyNGdZVzVrSUhSb1pTQnVaWGNnWld4bGJXVnVkRnh5WEc0Z0tpQjNhV3hzSUdKbElHbHVjMlZ5ZEdWa0lIWnBZU0JoYmlCZ1pXNTBaWEpnSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ3BjY2x4dUlDb2dRR0Z1YVcxaGRHbHZibk5jY2x4dUlDb2dmQ0JCYm1sdFlYUnBiMjRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJRTlqWTNWeWN5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4WEhKY2JpQXFJSHd0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRmQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0ZkZ4eVhHNGdLaUI4SUh0QWJHbHVheUJ1Wnk0a1lXNXBiV0YwWlNObGJuUmxjaUJsYm5SbGNuMGdJSHdnZDJobGJpQjBhR1VnYm1WM0lHVnNaVzFsYm5RZ2FYTWdhVzV6WlhKMFpXUWdkRzhnZEdobElFUlBUU0FnZkZ4eVhHNGdLaUI4SUh0QWJHbHVheUJ1Wnk0a1lXNXBiV0YwWlNOc1pXRjJaU0JzWldGMlpYMGdJSHdnZDJobGJpQjBhR1VnYjJ4a0lHVnNaVzFsYm5RZ2FYTWdjbVZ0YjNabFpDQm1jbTl0SUhSb1pTQkVUMDBnZkZ4eVhHNGdLbHh5WEc0Z0tpQkFaWGhoYlhCc1pWeHlYRzRnS2lBOFpYaGhiWEJzWlNCdVlXMWxQVndpYm1kQmJtbHRZWFJsVTNkaGNDMWthWEpsWTNScGRtVmNJaUJ0YjJSMWJHVTlYQ0p1WjBGdWFXMWhkR1ZUZDJGd1JYaGhiWEJzWlZ3aVhISmNiaUFxSUNBZ0lDQWdJQ0FnSUdSbGNITTlYQ0poYm1kMWJHRnlMV0Z1YVcxaGRHVXVhbk5jSWx4eVhHNGdLaUFnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjV6UFZ3aWRISjFaVndpSUdacGVFSmhjMlU5WENKMGNuVmxYQ0krWEhKY2JpQXFJQ0FnUEdacGJHVWdibUZ0WlQxY0ltbHVaR1Y0TG1oMGJXeGNJajVjY2x4dUlDb2dJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSmpiMjUwWVdsdVpYSmNJaUJ1WnkxamIyNTBjbTlzYkdWeVBWd2lRWEJ3UTNSeWJGd2lQbHh5WEc0Z0tpQWdJQ0FnSUNBOFpHbDJJRzVuTFdGdWFXMWhkR1V0YzNkaGNEMWNJbTUxYldKbGNsd2lJR05zWVhOelBWd2lZMlZzYkNCemQyRndMV0Z1YVcxaGRHbHZibHdpSUc1bkxXTnNZWE56UFZ3aVkyOXNiM0pEYkdGemN5aHVkVzFpWlhJcFhDSStYSEpjYmlBcUlDQWdJQ0FnSUNBZ2Uzc2diblZ0WW1WeUlIMTlYSEpjYmlBcUlDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0tpQWdJQ0FnUEM5a2FYWStYSEpjYmlBcUlDQWdQQzltYVd4bFBseHlYRzRnS2lBZ0lEeG1hV3hsSUc1aGJXVTlYQ0p6WTNKcGNIUXVhbk5jSWo1Y2NseHVJQ29nSUNBZ0lHRnVaM1ZzWVhJdWJXOWtkV3hsS0NkdVowRnVhVzFoZEdWVGQyRndSWGhoYlhCc1pTY3NJRnNuYm1kQmJtbHRZWFJsSjEwcFhISmNiaUFxSUNBZ0lDQWdJQzVqYjI1MGNtOXNiR1Z5S0NkQmNIQkRkSEpzSnl3Z1d5Y2tjMk52Y0dVbkxDQW5KR2x1ZEdWeWRtRnNKeXdnWm5WdVkzUnBiMjRvSkhOamIzQmxMQ0FrYVc1MFpYSjJZV3dwSUh0Y2NseHVJQ29nSUNBZ0lDQWdJQ0FrYzJOdmNHVXViblZ0WW1WeUlEMGdNRHRjY2x4dUlDb2dJQ0FnSUNBZ0lDQWthVzUwWlhKMllXd29ablZ1WTNScGIyNG9LU0I3WEhKY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FrYzJOdmNHVXViblZ0WW1WeUt5czdYSEpjYmlBcUlDQWdJQ0FnSUNBZ2ZTd2dNVEF3TUNrN1hISmNiaUFxWEhKY2JpQXFJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJHOXljeUE5SUZzbmNtVmtKeXduWW14MVpTY3NKMmR5WldWdUp5d25lV1ZzYkc5M0p5d25iM0poYm1kbEoxMDdYSEpjYmlBcUlDQWdJQ0FnSUNBZ0pITmpiM0JsTG1OdmJHOXlRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpaHVkVzFpWlhJcElIdGNjbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyeHZjbk5iYm5WdFltVnlJQ1VnWTI5c2IzSnpMbXhsYm1kMGFGMDdYSEpjYmlBcUlDQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNvZ0lDQWdJQ0FnZlYwcE8xeHlYRzRnS2lBZ0lEd3ZabWxzWlQ1Y2NseHVJQ29nSUR4bWFXeGxJRzVoYldVOVhDSmhibWx0WVhScGIyNXpMbU56YzF3aVBseHlYRzRnS2lBZ0xtTnZiblJoYVc1bGNpQjdYSEpjYmlBcUlDQWdJR2hsYVdkb2REb3lOVEJ3ZUR0Y2NseHVJQ29nSUNBZ2QybGtkR2c2TWpVd2NIZzdYSEpjYmlBcUlDQWdJSEJ2YzJsMGFXOXVPbkpsYkdGMGFYWmxPMXh5WEc0Z0tpQWdJQ0J2ZG1WeVpteHZkenBvYVdSa1pXNDdYSEpjYmlBcUlDQWdJR0p2Y21SbGNqb3ljSGdnYzI5c2FXUWdZbXhoWTJzN1hISmNiaUFxSUNCOVhISmNiaUFxSUNBdVkyOXVkR0ZwYm1WeUlDNWpaV3hzSUh0Y2NseHVJQ29nSUNBZ1ptOXVkQzF6YVhwbE9qRTFNSEI0TzF4eVhHNGdLaUFnSUNCMFpYaDBMV0ZzYVdkdU9tTmxiblJsY2p0Y2NseHVJQ29nSUNBZ2JHbHVaUzFvWldsbmFIUTZNalV3Y0hnN1hISmNiaUFxSUNBZ0lIQnZjMmwwYVc5dU9tRmljMjlzZFhSbE8xeHlYRzRnS2lBZ0lDQjBiM0E2TUR0Y2NseHVJQ29nSUNBZ2JHVm1kRG93TzF4eVhHNGdLaUFnSUNCeWFXZG9kRG93TzF4eVhHNGdLaUFnSUNCaWIzSmtaWEl0WW05MGRHOXRPakp3ZUNCemIyeHBaQ0JpYkdGamF6dGNjbHh1SUNvZ0lIMWNjbHh1SUNvZ0lDNXpkMkZ3TFdGdWFXMWhkR2x2Ymk1dVp5MWxiblJsY2l3Z0xuTjNZWEF0WVc1cGJXRjBhVzl1TG01bkxXeGxZWFpsSUh0Y2NseHVJQ29nSUNBZ2RISmhibk5wZEdsdmJqb3dMalZ6SUd4cGJtVmhjaUJoYkd3N1hISmNiaUFxSUNCOVhISmNiaUFxSUNBdWMzZGhjQzFoYm1sdFlYUnBiMjR1Ym1jdFpXNTBaWElnZTF4eVhHNGdLaUFnSUNCMGIzQTZMVEkxTUhCNE8xeHlYRzRnS2lBZ2ZWeHlYRzRnS2lBZ0xuTjNZWEF0WVc1cGJXRjBhVzl1TG01bkxXVnVkR1Z5TFdGamRHbDJaU0I3WEhKY2JpQXFJQ0FnSUhSdmNEb3djSGc3WEhKY2JpQXFJQ0I5WEhKY2JpQXFJQ0F1YzNkaGNDMWhibWx0WVhScGIyNHVibWN0YkdWaGRtVWdlMXh5WEc0Z0tpQWdJQ0IwYjNBNk1IQjRPMXh5WEc0Z0tpQWdmVnh5WEc0Z0tpQWdMbk4zWVhBdFlXNXBiV0YwYVc5dUxtNW5MV3hsWVhabExXRmpkR2wyWlNCN1hISmNiaUFxSUNBZ0lIUnZjRG95TlRCd2VEdGNjbHh1SUNvZ0lIMWNjbHh1SUNvZ0lDNXlaV1FnZXlCaVlXTnJaM0p2ZFc1a09uSmxaRHNnZlZ4eVhHNGdLaUFnTG1keVpXVnVJSHNnWW1GamEyZHliM1Z1WkRwbmNtVmxianNnZlZ4eVhHNGdLaUFnTG1Kc2RXVWdleUJpWVdOclozSnZkVzVrT21Kc2RXVTdJSDFjY2x4dUlDb2dJQzU1Wld4c2IzY2dleUJpWVdOclozSnZkVzVrT25sbGJHeHZkenNnZlZ4eVhHNGdLaUFnTG05eVlXNW5aU0I3SUdKaFkydG5jbTkxYm1RNmIzSmhibWRsT3lCOVhISmNiaUFxSUNBOEwyWnBiR1UrWEhKY2JpQXFJRHd2WlhoaGJYQnNaVDVjY2x4dUlDb3ZYSEpjYm5aaGNpQnVaMEZ1YVcxaGRHVlRkMkZ3UkdseVpXTjBhWFpsSUQwZ1d5Y2tZVzVwYldGMFpTY3NJQ2NrY205dmRGTmpiM0JsSnl3Z1puVnVZM1JwYjI0b0pHRnVhVzFoZEdVc0lDUnliMjkwVTJOdmNHVXBJSHRjY2x4dUlDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ2NtVnpkSEpwWTNRNklDZEJKeXhjY2x4dUlDQWdJSFJ5WVc1elkyeDFaR1U2SUNkbGJHVnRaVzUwSnl4Y2NseHVJQ0FnSUhSbGNtMXBibUZzT2lCMGNuVmxMRnh5WEc0Z0lDQWdjSEpwYjNKcGRIazZJRFl3TUN3Z0x5OGdkMlVnZFhObElEWXdNQ0JvWlhKbElIUnZJR1Z1YzNWeVpTQjBhR0YwSUhSb1pTQmthWEpsWTNScGRtVWdhWE1nWTJGMVoyaDBJR0psWm05eVpTQnZkR2hsY25OY2NseHVJQ0FnSUd4cGJtczZJR1oxYm1OMGFXOXVLSE5qYjNCbExDQWtaV3hsYldWdWRDd2dZWFIwY25Nc0lHTjBjbXdzSUNSMGNtRnVjMk5zZFdSbEtTQjdYSEpjYmlBZ0lDQWdJSFpoY2lCd2NtVjJhVzkxYzBWc1pXMWxiblFzSUhCeVpYWnBiM1Z6VTJOdmNHVTdYSEpjYmlBZ0lDQWdJSE5qYjNCbExpUjNZWFJqYUVOdmJHeGxZM1JwYjI0b1lYUjBjbk11Ym1kQmJtbHRZWFJsVTNkaGNDQjhmQ0JoZEhSeWMxc25abTl5SjEwc0lHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hCeVpYWnBiM1Z6Uld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdKR0Z1YVcxaGRHVXViR1ZoZG1Vb2NISmxkbWx2ZFhORmJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnlaWFpwYjNWelUyTnZjR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEJ5WlhacGIzVnpVMk52Y0dVdUpHUmxjM1J5YjNrb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhCeVpYWnBiM1Z6VTJOdmNHVWdQU0J1ZFd4c08xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ2ZId2dkbUZzZFdVZ1BUMDlJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEJ5WlhacGIzVnpVMk52Y0dVZ1BTQnpZMjl3WlM0a2JtVjNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWtkSEpoYm5OamJIVmtaU2h3Y21WMmFXOTFjMU5qYjNCbExDQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFpwYjNWelJXeGxiV1Z1ZENBOUlHVnNaVzFsYm5RN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNSaGJtbHRZWFJsTG1WdWRHVnlLR1ZzWlcxbGJuUXNJRzUxYkd3c0lDUmxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOVhISmNiaUFnZlR0Y2NseHVmVjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUUc1blpHOWpJRzF2WkhWc1pWeHlYRzRnS2lCQWJtRnRaU0J1WjBGdWFXMWhkR1ZjY2x4dUlDb2dRR1JsYzJOeWFYQjBhVzl1WEhKY2JpQXFYSEpjYmlBcUlGUm9aU0JnYm1kQmJtbHRZWFJsWUNCdGIyUjFiR1VnY0hKdmRtbGtaWE1nYzNWd2NHOXlkQ0JtYjNJZ1ExTlRMV0poYzJWa0lHRnVhVzFoZEdsdmJuTWdLR3RsZVdaeVlXMWxjeUJoYm1RZ2RISmhibk5wZEdsdmJuTXBJR0Z6SUhkbGJHd2dZWE1nU21GMllWTmpjbWx3ZEMxaVlYTmxaQ0JoYm1sdFlYUnBiMjV6SUhacFlWeHlYRzRnS2lCallXeHNZbUZqYXlCb2IyOXJjeTRnUVc1cGJXRjBhVzl1Y3lCaGNtVWdibTkwSUdWdVlXSnNaV1FnWW5rZ1pHVm1ZWFZzZEN3Z2FHOTNaWFpsY2l3Z1lua2dhVzVqYkhWa2FXNW5JR0J1WjBGdWFXMWhkR1ZnSUhSb1pTQmhibWx0WVhScGIyNGdhRzl2YTNNZ1lYSmxJR1Z1WVdKc1pXUWdabTl5SUdGdUlFRnVaM1ZzWVhJZ1lYQndMbHh5WEc0Z0tseHlYRzRnS2lBOFpHbDJJR1J2WXkxdGIyUjFiR1V0WTI5dGNHOXVaVzUwY3oxY0ltNW5RVzVwYldGMFpWd2lQand2WkdsMlBseHlYRzRnS2x4eVhHNGdLaUFqSUZWellXZGxYSEpjYmlBcUlGTnBiWEJzZVNCd2RYUXNJSFJvWlhKbElHRnlaU0IwZDI4Z2QyRjVjeUIwYnlCdFlXdGxJSFZ6WlNCdlppQmhibWx0WVhScGIyNXpJSGRvWlc0Z2JtZEJibWx0WVhSbElHbHpJSFZ6WldRNklHSjVJSFZ6YVc1bklDb3FRMU5US2lvZ1lXNWtJQ29xU21GMllWTmpjbWx3ZENvcUxpQlVhR1VnWm05eWJXVnlJSGR2Y210eklIQjFjbVZzZVNCaVlYTmxaRnh5WEc0Z0tpQjFjMmx1WnlCRFUxTWdLR0o1SUhWemFXNW5JRzFoZEdOb2FXNW5JRU5UVXlCelpXeGxZM1J2Y25NdmMzUjViR1Z6S1NCaGJtUWdkR2hsSUd4aGRIUmxjaUIwY21sbloyVnljeUJoYm1sdFlYUnBiMjV6SUhSb1lYUWdZWEpsSUhKbFoybHpkR1Z5WldRZ2RtbGhJR0J0YjJSMWJHVXVZVzVwYldGMGFXOXVLQ2xnTGlCR2IzSmNjbHh1SUNvZ1ltOTBhQ0JEVTFNZ1lXNWtJRXBUSUdGdWFXMWhkR2x2Ym5NZ2RHaGxJSE52YkdVZ2NtVnhkV2x5WlcxbGJuUWdhWE1nZEc4Z2FHRjJaU0JoSUcxaGRHTm9hVzVuSUdCRFUxTWdZMnhoYzNOZ0lIUm9ZWFFnWlhocGMzUnpJR0p2ZEdnZ2FXNGdkR2hsSUhKbFoybHpkR1Z5WldRZ1lXNXBiV0YwYVc5dUlHRnVaQ0IzYVhSb2FXNWNjbHh1SUNvZ2RHaGxJRWhVVFV3Z1pXeGxiV1Z1ZENCMGFHRjBJSFJvWlNCaGJtbHRZWFJwYjI0Z2QybHNiQ0JpWlNCMGNtbG5aMlZ5WldRZ2IyNHVYSEpjYmlBcVhISmNiaUFxSUNNaklFUnBjbVZqZEdsMlpTQlRkWEJ3YjNKMFhISmNiaUFxSUZSb1pTQm1iMnhzYjNkcGJtY2daR2x5WldOMGFYWmxjeUJoY21VZ1hDSmhibWx0WVhScGIyNGdZWGRoY21WY0lqcGNjbHh1SUNwY2NseHVJQ29nZkNCRWFYSmxZM1JwZG1VZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUZOMWNIQnZjblJsWkNCQmJtbHRZWFJwYjI1eklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOFhISmNiaUFxSUh3dExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0ZkMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdGZGeHlYRzRnS2lCOElIdEFiR2x1YXlCdVp5NWthWEpsWTNScGRtVTZibWRTWlhCbFlYUWpZVzVwYldGMGFXOXVjeUJ1WjFKbGNHVmhkSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z1pXNTBaWElzSUd4bFlYWmxJR0Z1WkNCdGIzWmxJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIeGNjbHh1SUNvZ2ZDQjdRR3hwYm1zZ2JtZFNiM1YwWlM1a2FYSmxZM1JwZG1VNmJtZFdhV1YzSTJGdWFXMWhkR2x2Ym5NZ2JtZFdhV1YzZlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElHVnVkR1Z5SUdGdVpDQnNaV0YyWlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhYSEpjYmlBcUlId2dlMEJzYVc1cklHNW5MbVJwY21WamRHbDJaVHB1WjBsdVkyeDFaR1VqWVc1cGJXRjBhVzl1Y3lCdVowbHVZMngxWkdWOUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZDQmxiblJsY2lCaGJtUWdiR1ZoZG1VZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmRnh5WEc0Z0tpQjhJSHRBYkdsdWF5QnVaeTVrYVhKbFkzUnBkbVU2Ym1kVGQybDBZMmdqWVc1cGJXRjBhVzl1Y3lCdVoxTjNhWFJqYUgwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lId2daVzUwWlhJZ1lXNWtJR3hsWVhabElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHhjY2x4dUlDb2dmQ0I3UUd4cGJtc2dibWN1WkdseVpXTjBhWFpsT201blNXWWpZVzVwYldGMGFXOXVjeUJ1WjBsbWZTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJR1Z1ZEdWeUlHRnVaQ0JzWldGMlpTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4WEhKY2JpQXFJSHdnZTBCc2FXNXJJRzVuTG1ScGNtVmpkR2wyWlRwdVowTnNZWE56STJGdWFXMWhkR2x2Ym5NZ2JtZERiR0Z6YzMwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmQ0JoWkdRZ1lXNWtJSEpsYlc5MlpTQW9kR2hsSUVOVFV5QmpiR0Z6Y3lobGN5a2djSEpsYzJWdWRDa2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkZ4eVhHNGdLaUI4SUh0QWJHbHVheUJ1Wnk1a2FYSmxZM1JwZG1VNmJtZFRhRzkzSTJGdWFXMWhkR2x2Ym5NZ2JtZFRhRzkzZlNBbUlIdEFiR2x1YXlCdVp5NWthWEpsWTNScGRtVTZibWRJYVdSbEkyRnVhVzFoZEdsdmJuTWdibWRJYVdSbGZTQWdJQ0FnSUNBZ0lDQWdJSHdnWVdSa0lHRnVaQ0J5WlcxdmRtVWdLSFJvWlNCdVp5MW9hV1JsSUdOc1lYTnpJSFpoYkhWbEtTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4Y2NseHVJQ29nZkNCN1FHeHBibXNnYm1jdVpHbHlaV04wYVhabE9tWnZjbTBqWVc1cGJXRjBhVzl1TFdodmIydHpJR1p2Y20xOUlDWWdlMEJzYVc1cklHNW5MbVJwY21WamRHbDJaVHB1WjAxdlpHVnNJMkZ1YVcxaGRHbHZiaTFvYjI5cmN5QnVaMDF2WkdWc2ZTQWdJQ0I4SUdGa1pDQmhibVFnY21WdGIzWmxJQ2hrYVhKMGVTd2djSEpwYzNScGJtVXNJSFpoYkdsa0xDQnBiblpoYkdsa0lDWWdZV3hzSUc5MGFHVnlJSFpoYkdsa1lYUnBiMjV6S1NCOFhISmNiaUFxSUh3Z2UwQnNhVzVySUcxdlpIVnNaVHB1WjAxbGMzTmhaMlZ6STJGdWFXMWhkR2x2Ym5NZ2JtZE5aWE56WVdkbGMzMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkNCaFpHUWdZVzVrSUhKbGJXOTJaU0FvYm1jdFlXTjBhWFpsSUNZZ2JtY3RhVzVoWTNScGRtVXBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZGeHlYRzRnS2lCOElIdEFiR2x1YXlCdGIyUjFiR1U2Ym1kTlpYTnpZV2RsY3lOaGJtbHRZWFJwYjI1eklHNW5UV1Z6YzJGblpYMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh3Z1pXNTBaWElnWVc1a0lHeGxZWFpsSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIeGNjbHh1SUNwY2NseHVJQ29nS0UxdmNtVWdhVzVtYjNKdFlYUnBiMjRnWTJGdUlHSmxJR1p2ZFc1a0lHSjVJSFpwYzJsMGFXNW5JR1ZoWTJnZ2RHaGxJR1J2WTNWdFpXNTBZWFJwYjI0Z1lYTnpiMk5wWVhSbFpDQjNhWFJvSUdWaFkyZ2daR2x5WldOMGFYWmxMaWxjY2x4dUlDcGNjbHh1SUNvZ0l5TWdRMU5UTFdKaGMyVmtJRUZ1YVcxaGRHbHZibk5jY2x4dUlDcGNjbHh1SUNvZ1ExTlRMV0poYzJWa0lHRnVhVzFoZEdsdmJuTWdkMmwwYUNCdVowRnVhVzFoZEdVZ1lYSmxJSFZ1YVhGMVpTQnphVzVqWlNCMGFHVjVJSEpsY1hWcGNtVWdibThnU21GMllWTmpjbWx3ZENCamIyUmxJR0YwSUdGc2JDNGdRbmtnZFhOcGJtY2dZU0JEVTFNZ1kyeGhjM01nZEdoaGRDQjNaU0J5WldabGNtVnVZMlVnWW1WMGQyVmxiaUJ2ZFhJZ1NGUk5URnh5WEc0Z0tpQmhibVFnUTFOVElHTnZaR1VnZDJVZ1kyRnVJR055WldGMFpTQmhiaUJoYm1sdFlYUnBiMjRnZEdoaGRDQjNhV3hzSUdKbElIQnBZMnRsWkNCMWNDQmllU0JCYm1kMWJHRnlJSGRvWlc0Z1lXNGdkR2hsSUhWdVpHVnliSGxwYm1jZ1pHbHlaV04wYVhabElIQmxjbVp2Y20xeklHRnVJRzl3WlhKaGRHbHZiaTVjY2x4dUlDcGNjbHh1SUNvZ1ZHaGxJR1Y0WVcxd2JHVWdZbVZzYjNjZ2MyaHZkM01nYUc5M0lHRnVJR0JsYm5SbGNtQWdZVzVwYldGMGFXOXVJR05oYmlCaVpTQnRZV1JsSUhCdmMzTnBZbXhsSUc5dUlHRnVJR1ZzWlcxbGJuUWdkWE5wYm1jZ1lHNW5MV2xtWURwY2NseHVJQ3BjY2x4dUlDb2dZR0JnYUhSdGJGeHlYRzRnS2lBOFpHbDJJRzVuTFdsbVBWd2lZbTl2YkZ3aUlHTnNZWE56UFZ3aVptRmtaVndpUGx4eVhHNGdLaUFnSUNCR1lXUmxJRzFsSUdsdUlHOTFkRnh5WEc0Z0tpQThMMlJwZGo1Y2NseHVJQ29nUEdKMWRIUnZiaUJ1WnkxamJHbGphejFjSW1KdmIydzlkSEoxWlZ3aVBrWmhaR1VnU1c0aFBDOWlkWFIwYjI0K1hISmNiaUFxSUR4aWRYUjBiMjRnYm1jdFkyeHBZMnM5WENKaWIyOXNQV1poYkhObFhDSStSbUZrWlNCUGRYUWhQQzlpZFhSMGIyNCtYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lCT2IzUnBZMlVnZEdobElFTlRVeUJqYkdGemN5QXFLbVpoWkdVcUtqOGdWMlVnWTJGdUlHNXZkeUJqY21WaGRHVWdkR2hsSUVOVFV5QjBjbUZ1YzJsMGFXOXVJR052WkdVZ2RHaGhkQ0J5WldabGNtVnVZMlZ6SUhSb2FYTWdZMnhoYzNNNlhISmNiaUFxWEhKY2JpQXFJR0JnWUdOemMxeHlYRzRnS2lBdkppTTBNanNnVkdobElITjBZWEowYVc1bklFTlRVeUJ6ZEhsc1pYTWdabTl5SUhSb1pTQmxiblJsY2lCaGJtbHRZWFJwYjI0Z0ppTTBNanN2WEhKY2JpQXFJQzVtWVdSbExtNW5MV1Z1ZEdWeUlIdGNjbHh1SUNvZ0lDQjBjbUZ1YzJsMGFXOXVPakF1TlhNZ2JHbHVaV0Z5SUdGc2JEdGNjbHh1SUNvZ0lDQnZjR0ZqYVhSNU9qQTdYSEpjYmlBcUlIMWNjbHh1SUNwY2NseHVJQ29nTHlZak5ESTdJRlJvWlNCbWFXNXBjMmhwYm1jZ1ExTlRJSE4wZVd4bGN5Qm1iM0lnZEdobElHVnVkR1Z5SUdGdWFXMWhkR2x2YmlBbUl6UXlPeTljY2x4dUlDb2dMbVpoWkdVdWJtY3RaVzUwWlhJdWJtY3RaVzUwWlhJdFlXTjBhWFpsSUh0Y2NseHVJQ29nSUNCdmNHRmphWFI1T2pFN1hISmNiaUFxSUgxY2NseHVJQ29nWUdCZ1hISmNiaUFxWEhKY2JpQXFJRlJvWlNCclpYa2dkR2hwYm1jZ2RHOGdjbVZ0WlcxaVpYSWdhR1Z5WlNCcGN5QjBhR0YwTENCa1pYQmxibVJwYm1jZ2IyNGdkR2hsSUdGdWFXMWhkR2x2YmlCbGRtVnVkQ0FvZDJocFkyZ2daV0ZqYUNCdlppQjBhR1VnWkdseVpXTjBhWFpsY3lCaFltOTJaU0IwY21sbloyVnlJR1JsY0dWdVpHbHVaeUJ2YmlCM2FHRjBKM01nWjI5cGJtY2diMjRwSUhSM2IxeHlYRzRnS2lCblpXNWxjbUYwWldRZ1ExTlRJR05zWVhOelpYTWdkMmxzYkNCaVpTQmhjSEJzYVdWa0lIUnZJSFJvWlNCbGJHVnRaVzUwT3lCcGJpQjBhR1VnWlhoaGJYQnNaU0JoWW05MlpTQjNaU0JvWVhabElHQXVibWN0Wlc1MFpYSmdJR0Z1WkNCZ0xtNW5MV1Z1ZEdWeUxXRmpkR2wyWldBdUlFWnZjaUJEVTFNZ2RISmhibk5wZEdsdmJuTXNJSFJvWlNCMGNtRnVjMmwwYVc5dVhISmNiaUFxSUdOdlpHVWdLaXB0ZFhOMEtpb2dZbVVnWkdWbWFXNWxaQ0IzYVhSb2FXNGdkR2hsSUhOMFlYSjBhVzVuSUVOVFV5QmpiR0Z6Y3lBb2FXNGdkR2hwY3lCallYTmxJR0F1Ym1jdFpXNTBaWEpnS1M0Z1ZHaGxJR1JsYzNScGJtRjBhVzl1SUdOc1lYTnpJR2x6SUhkb1lYUWdkR2hsSUhSeVlXNXphWFJwYjI0Z2QybHNiQ0JoYm1sdFlYUmxJSFJ2ZDJGeVpITXVYSEpjYmlBcVhISmNiaUFxSUVsbUlHWnZjaUJsZUdGdGNHeGxJSGRsSUhkaGJuUmxaQ0IwYnlCamNtVmhkR1VnWVc1cGJXRjBhVzl1Y3lCbWIzSWdZR3hsWVhabFlDQmhibVFnWUcxdmRtVmdJQ2h1WjFKbGNHVmhkQ0IwY21sbloyVnljeUJ0YjNabEtTQjBhR1Z1SUhkbElHTmhiaUJrYnlCemJ5QjFjMmx1WnlCMGFHVWdjMkZ0WlNCRFUxTWdibUZ0YVc1bklHTnZiblpsYm5ScGIyNXpPbHh5WEc0Z0tseHlYRzRnS2lCZ1lHQmpjM05jY2x4dUlDb2dMeVlqTkRJN0lHNXZkeUIwYUdVZ1pXeGxiV1Z1ZENCM2FXeHNJR1poWkdVZ2IzVjBJR0psWm05eVpTQnBkQ0JwY3lCeVpXMXZkbVZrSUdaeWIyMGdkR2hsSUVSUFRTQW1JelF5T3k5Y2NseHVJQ29nTG1aaFpHVXVibWN0YkdWaGRtVWdlMXh5WEc0Z0tpQWdJSFJ5WVc1emFYUnBiMjQ2TUM0MWN5QnNhVzVsWVhJZ1lXeHNPMXh5WEc0Z0tpQWdJRzl3WVdOcGRIazZNVHRjY2x4dUlDb2dmVnh5WEc0Z0tpQXVabUZrWlM1dVp5MXNaV0YyWlM1dVp5MXNaV0YyWlMxaFkzUnBkbVVnZTF4eVhHNGdLaUFnSUc5d1lXTnBkSGs2TUR0Y2NseHVJQ29nZlZ4eVhHNGdLaUJnWUdCY2NseHVJQ3BjY2x4dUlDb2dWMlVnWTJGdUlHRnNjMjhnYldGclpTQjFjMlVnYjJZZ0tpcERVMU1nUzJWNVpuSmhiV1Z6S2lvZ1lua2djbVZtWlhKbGJtTnBibWNnZEdobElHdGxlV1p5WVcxbElHRnVhVzFoZEdsdmJpQjNhWFJvYVc0Z2RHaGxJSE4wWVhKMGFXNW5JRU5UVXlCamJHRnpjenBjY2x4dUlDcGNjbHh1SUNvZ1lHQmdZM056WEhKY2JpQXFJQzhtSXpReU95QjBhR1Z5WlNCcGN5QnVieUJ1WldWa0lIUnZJR1JsWm1sdVpTQmhibmwwYUdsdVp5QnBibk5wWkdVZ2IyWWdkR2hsSUdSbGMzUnBibUYwYVc5dVhISmNiaUFxSUVOVFV5QmpiR0Z6Y3lCemFXNWpaU0IwYUdVZ2EyVjVabkpoYldVZ2QybHNiQ0IwWVd0bElHTm9ZWEpuWlNCdlppQjBhR1VnWVc1cGJXRjBhVzl1SUNZak5ESTdMMXh5WEc0Z0tpQXVabUZrWlM1dVp5MXNaV0YyWlNCN1hISmNiaUFxSUNBZ1lXNXBiV0YwYVc5dU9pQnRlVjltWVdSbFgyRnVhVzFoZEdsdmJpQXdMalZ6SUd4cGJtVmhjanRjY2x4dUlDb2dJQ0F0ZDJWaWEybDBMV0Z1YVcxaGRHbHZiam9nYlhsZlptRmtaVjloYm1sdFlYUnBiMjRnTUM0MWN5QnNhVzVsWVhJN1hISmNiaUFxSUgxY2NseHVJQ3BjY2x4dUlDb2dRR3RsZVdaeVlXMWxjeUJ0ZVY5bVlXUmxYMkZ1YVcxaGRHbHZiaUI3WEhKY2JpQXFJQ0FnWm5KdmJTQjdJRzl3WVdOcGRIazZNVHNnZlZ4eVhHNGdLaUFnSUhSdklIc2diM0JoWTJsMGVUb3dPeUI5WEhKY2JpQXFJSDFjY2x4dUlDcGNjbHh1SUNvZ1FDMTNaV0pyYVhRdGEyVjVabkpoYldWeklHMTVYMlpoWkdWZllXNXBiV0YwYVc5dUlIdGNjbHh1SUNvZ0lDQm1jbTl0SUhzZ2IzQmhZMmwwZVRveE95QjlYSEpjYmlBcUlDQWdkRzhnZXlCdmNHRmphWFI1T2pBN0lIMWNjbHh1SUNvZ2ZWeHlYRzRnS2lCZ1lHQmNjbHh1SUNwY2NseHVJQ29nUm1WbGJDQm1jbVZsSUdGc2MyOGdiV2w0SUhSeVlXNXphWFJwYjI1eklHRnVaQ0JyWlhsbWNtRnRaWE1nZEc5blpYUm9aWElnWVhNZ2QyVnNiQ0JoY3lCaGJua2diM1JvWlhJZ1ExTlRJR05zWVhOelpYTWdiMjRnZEdobElITmhiV1VnWld4bGJXVnVkQzVjY2x4dUlDcGNjbHh1SUNvZ0l5TWpJRU5UVXlCRGJHRnpjeTFpWVhObFpDQkJibWx0WVhScGIyNXpYSEpjYmlBcVhISmNiaUFxSUVOc1lYTnpMV0poYzJWa0lHRnVhVzFoZEdsdmJuTWdLR0Z1YVcxaGRHbHZibk1nZEdoaGRDQmhjbVVnZEhKcFoyZGxjbVZrSUhacFlTQmdibWREYkdGemMyQXNJR0J1WjFOb2IzZGdMQ0JnYm1kSWFXUmxZQ0JoYm1RZ2MyOXRaU0J2ZEdobGNpQmthWEpsWTNScGRtVnpLU0JvWVhabElHRWdjMnhwWjJoMGJIa2daR2xtWm1WeVpXNTBYSEpjYmlBcUlHNWhiV2x1WnlCamIyNTJaVzUwYVc5dUxpQkRiR0Z6Y3kxaVlYTmxaQ0JoYm1sdFlYUnBiMjV6SUdGeVpTQmlZWE5wWXlCbGJtOTFaMmdnZEdoaGRDQmhJSE4wWVc1a1lYSmtJSFJ5WVc1emFYUnBiMjRnYjNJZ2EyVjVabkpoYldVZ1kyRnVJR0psSUhKbFptVnlaVzVqWldRZ2IyNGdkR2hsSUdOc1lYTnpJR0psYVc1bklHRmtaR1ZrWEhKY2JpQXFJR0Z1WkNCeVpXMXZkbVZrTGx4eVhHNGdLbHh5WEc0Z0tpQkdiM0lnWlhoaGJYQnNaU0JwWmlCM1pTQjNZVzUwWldRZ2RHOGdaRzhnWVNCRFUxTWdZVzVwYldGMGFXOXVJR1p2Y2lCZ2JtZElhV1JsWUNCMGFHVnVJSGRsSUhCc1lXTmxJR0Z1SUdGdWFXMWhkR2x2YmlCdmJpQjBhR1VnWUM1dVp5MW9hV1JsWUNCRFUxTWdZMnhoYzNNNlhISmNiaUFxWEhKY2JpQXFJR0JnWUdoMGJXeGNjbHh1SUNvZ1BHUnBkaUJ1WnkxemFHOTNQVndpWW05dmJGd2lJR05zWVhOelBWd2labUZrWlZ3aVBseHlYRzRnS2lBZ0lGTm9iM2NnWVc1a0lHaHBaR1VnYldWY2NseHVJQ29nUEM5a2FYWStYSEpjYmlBcUlEeGlkWFIwYjI0Z2JtY3RZMnhwWTJzOVhDSmliMjlzUFNGaWIyOXNYQ0krVkc5bloyeGxQQzlpZFhSMGIyNCtYSEpjYmlBcVhISmNiaUFxSUR4emRIbHNaVDVjY2x4dUlDb2dMbVpoWkdVdWJtY3RhR2xrWlNCN1hISmNiaUFxSUNBZ2RISmhibk5wZEdsdmJqb3dMalZ6SUd4cGJtVmhjaUJoYkd3N1hISmNiaUFxSUNBZ2IzQmhZMmwwZVRvd08xeHlYRzRnS2lCOVhISmNiaUFxSUR3dmMzUjViR1UrWEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQkJiR3dnZEdoaGRDQnBjeUJuYjJsdVp5QnZiaUJvWlhKbElIZHBkR2dnYm1kVGFHOTNMMjVuU0dsa1pTQmlaV2hwYm1RZ2RHaGxJSE5qWlc1bGN5QnBjeUIwYUdVZ1lDNXVaeTFvYVdSbFlDQmpiR0Z6Y3lCcGN5QmhaR1JsWkM5eVpXMXZkbVZrSUNoM2FHVnVJSFJvWlNCb2FXUmtaVzRnYzNSaGRHVWdhWE1nZG1Gc2FXUXBMaUJUYVc1alpWeHlYRzRnS2lCdVoxTm9iM2NnWVc1a0lHNW5TR2xrWlNCaGNtVWdZVzVwYldGMGFXOXVJR0YzWVhKbElIUm9aVzRnZDJVZ1kyRnVJRzFoZEdOb0lIVndJR0VnZEhKaGJuTnBkR2x2YmlCaGJtUWdibWRCYm1sdFlYUmxJR2hoYm1Sc1pYTWdkR2hsSUhKbGMzUXVYSEpjYmlBcVhISmNiaUFxSUVsdUlHRmtaR2wwYVc5dUlIUm9aU0JoWkdScGRHbHZiaUJoYm1RZ2NtVnRiM1poYkNCdlppQjBhR1VnUTFOVElHTnNZWE56TENCdVowRnVhVzFoZEdVZ1lXeHpieUJ3Y205MmFXUmxjeUIwZDI4Z2FHVnNjR1Z5SUcxbGRHaHZaSE1nZEdoaGRDQjNaU0JqWVc0Z2RYTmxJSFJ2SUdaMWNuUm9aWElnWkdWamIzSmhkR1VnZEdobElHRnVhVzFoZEdsdmJseHlYRzRnS2lCM2FYUm9JRU5UVXlCemRIbHNaWE11WEhKY2JpQXFYSEpjYmlBcUlHQmdZR2gwYld4Y2NseHVJQ29nUEdScGRpQnVaeTFqYkdGemN6MWNJbnR2YmpwdmJrOW1abjFjSWlCamJHRnpjejFjSW1ocFoyaHNhV2RvZEZ3aVBseHlYRzRnS2lBZ0lFaHBaMmhzYVdkb2RDQjBhR2x6SUdKdmVGeHlYRzRnS2lBOEwyUnBkajVjY2x4dUlDb2dQR0oxZEhSdmJpQnVaeTFqYkdsamF6MWNJbTl1VDJabVBTRnZiazltWmx3aVBsUnZaMmRzWlR3dlluVjBkRzl1UGx4eVhHNGdLbHh5WEc0Z0tpQThjM1I1YkdVK1hISmNiaUFxSUM1b2FXZG9iR2xuYUhRZ2UxeHlYRzRnS2lBZ0lIUnlZVzV6YVhScGIyNDZNQzQxY3lCc2FXNWxZWElnWVd4c08xeHlYRzRnS2lCOVhISmNiaUFxSUM1b2FXZG9iR2xuYUhRdWIyNHRZV1JrSUh0Y2NseHVJQ29nSUNCaVlXTnJaM0p2ZFc1a09uZG9hWFJsTzF4eVhHNGdLaUI5WEhKY2JpQXFJQzVvYVdkb2JHbG5hSFF1YjI0Z2UxeHlYRzRnS2lBZ0lHSmhZMnRuY205MWJtUTZlV1ZzYkc5M08xeHlYRzRnS2lCOVhISmNiaUFxSUM1b2FXZG9iR2xuYUhRdWIyNHRjbVZ0YjNabElIdGNjbHh1SUNvZ0lDQmlZV05yWjNKdmRXNWtPbUpzWVdOck8xeHlYRzRnS2lCOVhISmNiaUFxSUR3dmMzUjViR1UrWEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQlhaU0JqWVc0Z1lXeHpieUJ0WVd0bElIVnpaU0J2WmlCRFUxTWdhMlY1Wm5KaGJXVnpJR0o1SUhCc1lXTnBibWNnZEdobGJTQjNhWFJvYVc0Z2RHaGxJRU5UVXlCamJHRnpjMlZ6TGx4eVhHNGdLbHh5WEc0Z0tseHlYRzRnS2lBakl5TWdRMU5USUZOMFlXZG5aWEpwYm1jZ1FXNXBiV0YwYVc5dWMxeHlYRzRnS2lCQklGTjBZV2RuWlhKcGJtY2dZVzVwYldGMGFXOXVJR2x6SUdFZ1kyOXNiR1ZqZEdsdmJpQnZaaUJoYm1sdFlYUnBiMjV6SUhSb1lYUWdZWEpsSUdsemMzVmxaQ0IzYVhSb0lHRWdjMnhwWjJoMElHUmxiR0Y1SUdsdUlHSmxkSGRsWlc0Z1pXRmphQ0J6ZFdOalpYTnphWFpsSUc5d1pYSmhkR2x2YmlCeVpYTjFiSFJwYm1jZ2FXNGdZVnh5WEc0Z0tpQmpkWEowWVdsdUxXeHBhMlVnWldabVpXTjBMaUJVYUdVZ2JtZEJibWx0WVhSbElHMXZaSFZzWlNBb2RtVnljMmx2Ym5NZ1BqMHhMaklwSUhOMWNIQnZjblJ6SUhOMFlXZG5aWEpwYm1jZ1lXNXBiV0YwYVc5dWN5QmhibVFnZEdobElITjBZV2RuWlhJZ1pXWm1aV04wSUdOaGJpQmlaVnh5WEc0Z0tpQndaWEptYjNKdFpXUWdZbmtnWTNKbFlYUnBibWNnWVNBcUttNW5MVVZXUlU1VUxYTjBZV2RuWlhJcUtpQkRVMU1nWTJ4aGMzTWdZVzVrSUdGMGRHRmphR2x1WnlCMGFHRjBJR05zWVhOeklIUnZJSFJvWlNCaVlYTmxJRU5UVXlCamJHRnpjeUIxYzJWa0lHWnZjbHh5WEc0Z0tpQjBhR1VnWVc1cGJXRjBhVzl1TGlCVWFHVWdjM1I1YkdVZ2NISnZjR1Z5ZEhrZ1pYaHdaV04wWldRZ2QybDBhR2x1SUhSb1pTQnpkR0ZuWjJWeUlHTnNZWE56SUdOaGJpQmxhWFJvWlhJZ1ltVWdZU0FxS25SeVlXNXphWFJwYjI0dFpHVnNZWGtxS2lCdmNpQmhibHh5WEc0Z0tpQXFLbUZ1YVcxaGRHbHZiaTFrWld4aGVTb3FJSEJ5YjNCbGNuUjVJQ2h2Y2lCaWIzUm9JR2xtSUhsdmRYSWdZVzVwYldGMGFXOXVJR052Ym5SaGFXNXpJR0p2ZEdnZ2RISmhibk5wZEdsdmJuTWdZVzVrSUd0bGVXWnlZVzFsSUdGdWFXMWhkR2x2Ym5NcExseHlYRzRnS2x4eVhHNGdLaUJnWUdCamMzTmNjbHh1SUNvZ0xtMTVMV0Z1YVcxaGRHbHZiaTV1WnkxbGJuUmxjaUI3WEhKY2JpQXFJQ0FnTHlZak5ESTdJSE4wWVc1a1lYSmtJSFJ5WVc1emFYUnBiMjRnWTI5a1pTQW1JelF5T3k5Y2NseHVJQ29nSUNCMGNtRnVjMmwwYVc5dU9pQXhjeUJzYVc1bFlYSWdZV3hzTzF4eVhHNGdLaUFnSUc5d1lXTnBkSGs2TUR0Y2NseHVJQ29nZlZ4eVhHNGdLaUF1YlhrdFlXNXBiV0YwYVc5dUxtNW5MV1Z1ZEdWeUxYTjBZV2RuWlhJZ2UxeHlYRzRnS2lBZ0lDOG1JelF5T3lCMGFHbHpJSGRwYkd3Z2FHRjJaU0JoSURFd01HMXpJR1JsYkdGNUlHSmxkSGRsWlc0Z1pXRmphQ0J6ZFdOalpYTnphWFpsSUd4bFlYWmxJR0Z1YVcxaGRHbHZiaUFtSXpReU95OWNjbHh1SUNvZ0lDQjBjbUZ1YzJsMGFXOXVMV1JsYkdGNU9pQXdMakZ6TzF4eVhHNGdLbHh5WEc0Z0tpQWdJQzhtSXpReU95QkJjeUJ2WmlBeExqUXVOQ3dnZEdocGN5QnRkWE4wSUdGc2QyRjVjeUJpWlNCelpYUTZJR2wwSUhOcFoyNWhiSE1nYm1kQmJtbHRZWFJsWEhKY2JpQXFJQ0FnSUNCMGJ5QnViM1FnWVdOamFXUmxiblJoYkd4NUlHbHVhR1Z5YVhRZ1lTQmtaV3hoZVNCd2NtOXdaWEowZVNCbWNtOXRJR0Z1YjNSb1pYSWdRMU5USUdOc1lYTnpJQ1lqTkRJN0wxeHlYRzRnS2lBZ0lIUnlZVzV6YVhScGIyNHRaSFZ5WVhScGIyNDZJREJ6TzF4eVhHNGdLaUI5WEhKY2JpQXFJQzV0ZVMxaGJtbHRZWFJwYjI0dWJtY3RaVzUwWlhJdWJtY3RaVzUwWlhJdFlXTjBhWFpsSUh0Y2NseHVJQ29nSUNBdkppTTBNanNnYzNSaGJtUmhjbVFnZEhKaGJuTnBkR2x2YmlCemRIbHNaWE1nSmlNME1qc3ZYSEpjYmlBcUlDQWdiM0JoWTJsMGVUb3hPMXh5WEc0Z0tpQjlYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lCVGRHRm5aMlZ5YVc1bklHRnVhVzFoZEdsdmJuTWdkMjl5YXlCaWVTQmtaV1poZFd4MElHbHVJRzVuVW1Wd1pXRjBJQ2h6YnlCc2IyNW5JR0Z6SUhSb1pTQkRVMU1nWTJ4aGMzTWdhWE1nWkdWbWFXNWxaQ2t1SUU5MWRITnBaR1VnYjJZZ2JtZFNaWEJsWVhRc0lIUnZJSFZ6WlNCemRHRm5aMlZ5YVc1bklHRnVhVzFoZEdsdmJuTmNjbHh1SUNvZ2IyNGdlVzkxY2lCdmQyNHNJSFJvWlhrZ1kyRnVJR0psSUhSeWFXZG5aWEpsWkNCaWVTQm1hWEpwYm1jZ2JYVnNkR2x3YkdVZ1kyRnNiSE1nZEc4Z2RHaGxJSE5oYldVZ1pYWmxiblFnYjI0Z0pHRnVhVzFoZEdVdUlFaHZkMlYyWlhJc0lIUm9aU0J5WlhOMGNtbGpkR2x2Ym5NZ2MzVnljbTkxYm1ScGJtY2dkR2hwYzF4eVhHNGdLaUJoY21VZ2RHaGhkQ0JsWVdOb0lHOW1JSFJvWlNCbGJHVnRaVzUwY3lCdGRYTjBJR2hoZG1VZ2RHaGxJSE5oYldVZ1ExTlRJR05zWVhOelRtRnRaU0IyWVd4MVpTQmhjeUIzWld4c0lHRnpJSFJvWlNCellXMWxJSEJoY21WdWRDQmxiR1Z0Wlc1MExpQkJJSE4wWVdkblpYSWdiM0JsY21GMGFXOXVYSEpjYmlBcUlIZHBiR3dnWVd4emJ5QmlaU0J5WlhObGRDQnBaaUJ2Ym1VZ2IzSWdiVzl5WlNCaGJtbHRZWFJwYjI0Z1puSmhiV1Z6SUdoaGRtVWdjR0Z6YzJWa0lITnBibU5sSUhSb1pTQnRkV3gwYVhCc1pTQmpZV3hzY3lCMGJ5QmdKR0Z1YVcxaGRHVmdJSGRsY21VZ1ptbHlaV1F1WEhKY2JpQXFYSEpjYmlBcUlGUm9aU0JtYjJ4c2IzZHBibWNnWTI5a1pTQjNhV3hzSUdsemMzVmxJSFJvWlNBcUttNW5MV3hsWVhabExYTjBZV2RuWlhJcUtpQmxkbVZ1ZENCdmJpQjBhR1VnWld4bGJXVnVkQ0J3Y205MmFXUmxaRHBjY2x4dUlDcGNjbHh1SUNvZ1lHQmdhbk5jY2x4dUlDb2dkbUZ5SUd0cFpITWdQU0J3WVhKbGJuUXVZMmhwYkdSeVpXNG9LVHRjY2x4dUlDcGNjbHh1SUNvZ0pHRnVhVzFoZEdVdWJHVmhkbVVvYTJsa2Mxc3dYU2s3SUM4dmMzUmhaMmRsY2lCcGJtUmxlRDB3WEhKY2JpQXFJQ1JoYm1sdFlYUmxMbXhsWVhabEtHdHBaSE5iTVYwcE95QXZMM04wWVdkblpYSWdhVzVrWlhnOU1WeHlYRzRnS2lBa1lXNXBiV0YwWlM1c1pXRjJaU2hyYVdSeld6SmRLVHNnTHk5emRHRm5aMlZ5SUdsdVpHVjRQVEpjY2x4dUlDb2dKR0Z1YVcxaGRHVXViR1ZoZG1Vb2EybGtjMXN6WFNrN0lDOHZjM1JoWjJkbGNpQnBibVJsZUQwelhISmNiaUFxSUNSaGJtbHRZWFJsTG14bFlYWmxLR3RwWkhOYk5GMHBPeUF2TDNOMFlXZG5aWElnYVc1a1pYZzlORnh5WEc0Z0tseHlYRzRnS2lCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbEtHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0tpQWdJQzh2YzNSaFoyZGxjaUJvWVhNZ2NtVnpaWFFnYVhSelpXeG1YSEpjYmlBcUlDQWdKR0Z1YVcxaGRHVXViR1ZoZG1Vb2EybGtjMXMxWFNrN0lDOHZjM1JoWjJkbGNpQnBibVJsZUQwd1hISmNiaUFxSUNBZ0pHRnVhVzFoZEdVdWJHVmhkbVVvYTJsa2MxczJYU2s3SUM4dmMzUmhaMmRsY2lCcGJtUmxlRDB4WEhKY2JpQXFYSEpjYmlBcUlDQWdKSE5qYjNCbExpUmthV2RsYzNRb0tUdGNjbHh1SUNvZ2ZTazdYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lCVGRHRm5aMlZ5SUdGdWFXMWhkR2x2Ym5NZ1lYSmxJR04xY25KbGJuUnNlU0J2Ym14NUlITjFjSEJ2Y25SbFpDQjNhWFJvYVc0Z1ExTlRMV1JsWm1sdVpXUWdZVzVwYldGMGFXOXVjeTVjY2x4dUlDcGNjbHh1SUNvZ0l5TWpJRlJvWlNCZ2JtY3RZVzVwYldGMFpXQWdRMU5USUdOc1lYTnpYSEpjYmlBcVhISmNiaUFxSUZkb1pXNGdibWRCYm1sdFlYUmxJR2x6SUdGdWFXMWhkR2x1WnlCaGJpQmxiR1Z0Wlc1MElHbDBJSGRwYkd3Z1lYQndiSGtnZEdobElHQnVaeTFoYm1sdFlYUmxZQ0JEVTFNZ1kyeGhjM01nZEc4Z2RHaGxJR1ZzWlcxbGJuUWdabTl5SUhSb1pTQmtkWEpoZEdsdmJpQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUxseHlYRzRnS2lCVWFHbHpJR2x6SUdFZ2RHVnRjRzl5WVhKNUlFTlRVeUJqYkdGemN5QmhibVFnYVhRZ2QybHNiQ0JpWlNCeVpXMXZkbVZrSUc5dVkyVWdkR2hsSUdGdWFXMWhkR2x2YmlCcGN5QnZkbVZ5SUNobWIzSWdZbTkwYUNCS1lYWmhVMk55YVhCMElHRnVaQ0JEVTFNdFltRnpaV1FnWVc1cGJXRjBhVzl1Y3lrdVhISmNiaUFxWEhKY2JpQXFJRlJvWlhKbFptOXlaU3dnWVc1cGJXRjBhVzl1Y3lCallXNGdZbVVnWVhCd2JHbGxaQ0IwYnlCaGJpQmxiR1Z0Wlc1MElIVnphVzVuSUhSb2FYTWdkR1Z0Y0c5eVlYSjVJR05zWVhOeklHUnBjbVZqZEd4NUlIWnBZU0JEVTFNdVhISmNiaUFxWEhKY2JpQXFJR0JnWUdOemMxeHlYRzRnS2lBdWVtbHdjR1Z5TG01bkxXRnVhVzFoZEdVZ2UxeHlYRzRnS2lBZ0lIUnlZVzV6YVhScGIyNDZNQzQxY3lCc2FXNWxZWElnWVd4c08xeHlYRzRnS2lCOVhISmNiaUFxSUM1NmFYQndaWEl1Ym1jdFpXNTBaWElnZTF4eVhHNGdLaUFnSUc5d1lXTnBkSGs2TUR0Y2NseHVJQ29nZlZ4eVhHNGdLaUF1ZW1sd2NHVnlMbTVuTFdWdWRHVnlMbTVuTFdWdWRHVnlMV0ZqZEdsMlpTQjdYSEpjYmlBcUlDQWdiM0JoWTJsMGVUb3hPMXh5WEc0Z0tpQjlYSEpjYmlBcUlDNTZhWEJ3WlhJdWJtY3RiR1ZoZG1VZ2UxeHlYRzRnS2lBZ0lHOXdZV05wZEhrNk1UdGNjbHh1SUNvZ2ZWeHlYRzRnS2lBdWVtbHdjR1Z5TG01bkxXeGxZWFpsTG01bkxXeGxZWFpsTFdGamRHbDJaU0I3WEhKY2JpQXFJQ0FnYjNCaFkybDBlVG93TzF4eVhHNGdLaUI5WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQW9UbTkwWlNCMGFHRjBJSFJvWlNCZ2JtY3RZVzVwYldGMFpXQWdRMU5USUdOc1lYTnpJR2x6SUhKbGMyVnlkbVZrSUdGdVpDQnBkQ0JqWVc1dWIzUWdZbVVnWVhCd2JHbGxaQ0J2YmlCaGJpQmxiR1Z0Wlc1MElHUnBjbVZqZEd4NUlITnBibU5sSUc1blFXNXBiV0YwWlNCM2FXeHNJR0ZzZDJGNWN5QnlaVzF2ZG1WY2NseHVJQ29nZEdobElFTlRVeUJqYkdGemN5QnZibU5sSUdGdUlHRnVhVzFoZEdsdmJpQm9ZWE1nWTI5dGNHeGxkR1ZrTGlsY2NseHVJQ3BjY2x4dUlDcGNjbHh1SUNvZ0l5TWpJRlJvWlNCZ2JtY3RXMlYyWlc1MFhTMXdjbVZ3WVhKbFlDQmpiR0Z6YzF4eVhHNGdLbHh5WEc0Z0tpQlVhR2x6SUdseklHRWdjM0JsWTJsaGJDQmpiR0Z6Y3lCMGFHRjBJR05oYmlCaVpTQjFjMlZrSUhSdklIQnlaWFpsYm5RZ2RXNTNZVzUwWldRZ1pteHBZMnRsY21sdVp5QXZJR1pzWVhOb0lHOW1JR052Ym5SbGJuUWdZbVZtYjNKbFhISmNiaUFxSUhSb1pTQmhZM1IxWVd3Z1lXNXBiV0YwYVc5dUlITjBZWEowY3k0Z1ZHaGxJR05zWVhOeklHbHpJR0ZrWkdWa0lHRnpJSE52YjI0Z1lYTWdZVzRnWVc1cGJXRjBhVzl1SUdseklHbHVhWFJwWVd4cGVtVmtMQ0JpZFhRZ2NtVnRiM1psWkZ4eVhHNGdLaUJpWldadmNtVWdkR2hsSUdGamRIVmhiQ0JoYm1sdFlYUnBiMjRnYzNSaGNuUnpJQ2hoWm5SbGNpQjNZV2wwYVc1bklHWnZjaUJoSUNSa2FXZGxjM1FwTGx4eVhHNGdLaUJKZENCcGN5QmhiSE52SUc5dWJIa2dZV1JrWldRZ1ptOXlJQ3B6ZEhKMVkzUjFjbUZzS2lCaGJtbHRZWFJwYjI1eklDaGdaVzUwWlhKZ0xDQmdiVzkyWldBc0lHRnVaQ0JnYkdWaGRtVmdLUzVjY2x4dUlDcGNjbHh1SUNvZ1NXNGdjSEpoWTNScFkyVXNJR1pzYVdOclpYSnBibWNnWTJGdUlHRndjR1ZoY2lCM2FHVnVJRzVsYzNScGJtY2daV3hsYldWdWRITWdkMmwwYUNCemRISjFZM1IxY21Gc0lHRnVhVzFoZEdsdmJuTWdjM1ZqYUNCaGN5QmdibWRKWm1CY2NseHVJQ29nYVc1MGJ5QmxiR1Z0Wlc1MGN5QjBhR0YwSUdoaGRtVWdZMnhoYzNNdFltRnpaV1FnWVc1cGJXRjBhVzl1Y3lCemRXTm9JR0Z6SUdCdVowTnNZWE56WUM1Y2NseHVJQ3BjY2x4dUlDb2dZR0JnYUhSdGJGeHlYRzRnS2lBOFpHbDJJRzVuTFdOc1lYTnpQVndpZTNKbFpEb2diWGxRY205d2ZWd2lQbHh5WEc0Z0tpQWdJRHhrYVhZZ2JtY3RZMnhoYzNNOVhDSjdZbXgxWlRvZ2JYbFFjbTl3ZlZ3aVBseHlYRzRnS2lBZ0lDQWdQR1JwZGlCamJHRnpjejFjSW0xbGMzTmhaMlZjSWlCdVp5MXBaajFjSW0xNVVISnZjRndpUGp3dlpHbDJQbHh5WEc0Z0tpQWdJRHd2WkdsMlBseHlYRzRnS2lBOEwyUnBkajVjY2x4dUlDb2dZR0JnWEhKY2JpQXFYSEpjYmlBcUlFbDBJR2x6SUhCdmMzTnBZbXhsSUhSb1lYUWdaSFZ5YVc1bklIUm9aU0JnWlc1MFpYSmdJR0Z1YVcxaGRHbHZiaXdnZEdobElHQXViV1Z6YzJGblpXQWdaR2wySUhkcGJHd2dZbVVnWW5KcFpXWnNlU0IyYVhOcFlteGxJR0psWm05eVpTQnBkQ0J6ZEdGeWRITWdZVzVwYldGMGFXNW5MbHh5WEc0Z0tpQkpiaUIwYUdGMElHTmhjMlVzSUhsdmRTQmpZVzRnWVdSa0lITjBlV3hsY3lCMGJ5QjBhR1VnUTFOVElIUm9ZWFFnYldGclpTQnpkWEpsSUhSb1pTQmxiR1Z0Wlc1MElITjBZWGx6SUdocFpHUmxiaUJpWldadmNtVWdkR2hsSUdGdWFXMWhkR2x2YmlCemRHRnlkSE02WEhKY2JpQXFYSEpjYmlBcUlHQmdZR056YzF4eVhHNGdLaUF1YldWemMyRm5aUzV1WnkxbGJuUmxjaTF3Y21Wd1lYSmxJSHRjY2x4dUlDb2dJQ0J2Y0dGamFYUjVPaUF3TzF4eVhHNGdLaUI5WEhKY2JpQXFYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lBakl5QktZWFpoVTJOeWFYQjBMV0poYzJWa0lFRnVhVzFoZEdsdmJuTmNjbHh1SUNwY2NseHVJQ29nYm1kQmJtbHRZWFJsSUdGc2MyOGdZV3hzYjNkeklHWnZjaUJoYm1sdFlYUnBiMjV6SUhSdklHSmxJR052Ym5OMWJXVmtJR0o1SUVwaGRtRlRZM0pwY0hRZ1kyOWtaUzRnVkdobElHRndjSEp2WVdOb0lHbHpJSE5wYldsc1lYSWdkRzhnUTFOVExXSmhjMlZrSUdGdWFXMWhkR2x2Ym5NZ0tIZG9aWEpsSUhSb1pYSmxJR2x6SUdFZ2MyaGhjbVZrWEhKY2JpQXFJRU5UVXlCamJHRnpjeUIwYUdGMElHbHpJSEpsWm1WeVpXNWpaV1FnYVc0Z2IzVnlJRWhVVFV3Z1kyOWtaU2tnWW5WMElHbHVJR0ZrWkdsMGFXOXVJSGRsSUc1bFpXUWdkRzhnY21WbmFYTjBaWElnZEdobElFcGhkbUZUWTNKcGNIUWdZVzVwYldGMGFXOXVJRzl1SUhSb1pTQnRiMlIxYkdVdUlFSjVJRzFoYTJsdVp5QjFjMlVnYjJZZ2RHaGxYSEpjYmlBcUlHQnRiMlIxYkdVdVlXNXBiV0YwYVc5dUtDbGdJRzF2WkhWc1pTQm1kVzVqZEdsdmJpQjNaU0JqWVc0Z2NtVm5hWE4wWlhJZ2RHaGxJR0Z1YVcxaGRHbHZiaTVjY2x4dUlDcGNjbHh1SUNvZ1RHVjBKM01nYzJWbElHRnVJR1Y0WVcxd2JHVWdiMllnWVNCbGJuUmxjaTlzWldGMlpTQmhibWx0WVhScGIyNGdkWE5wYm1jZ1lHNW5VbVZ3WldGMFlEcGNjbHh1SUNwY2NseHVJQ29nWUdCZ2FIUnRiRnh5WEc0Z0tpQThaR2wySUc1bkxYSmxjR1ZoZEQxY0ltbDBaVzBnYVc0Z2FYUmxiWE5jSWlCamJHRnpjejFjSW5Oc2FXUmxYQ0krWEhKY2JpQXFJQ0FnZTNzZ2FYUmxiU0I5ZlZ4eVhHNGdLaUE4TDJScGRqNWNjbHh1SUNvZ1lHQmdYSEpjYmlBcVhISmNiaUFxSUZObFpTQjBhR1VnS2lwemJHbGtaU29xSUVOVFV5QmpiR0Z6Y3o4Z1RHVjBKM01nZFhObElIUm9ZWFFnWTJ4aGMzTWdkRzhnWkdWbWFXNWxJR0Z1SUdGdWFXMWhkR2x2YmlCMGFHRjBJSGRsSjJ4c0lITjBjblZqZEhWeVpTQnBiaUJ2ZFhJZ2JXOWtkV3hsSUdOdlpHVWdZbmtnZFhOcGJtY2dZRzF2WkhWc1pTNWhibWx0WVhScGIyNWdPbHh5WEc0Z0tseHlYRzRnS2lCZ1lHQnFjMXh5WEc0Z0tpQnRlVTF2WkhWc1pTNWhibWx0WVhScGIyNG9KeTV6Ykdsa1pTY3NJRnRtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ29nSUNCeVpYUjFjbTRnZTF4eVhHNGdLaUFnSUNBZ0x5OGdiV0ZyWlNCdWIzUmxJSFJvWVhRZ2IzUm9aWElnWlhabGJuUnpJQ2hzYVd0bElHRmtaRU5zWVhOekwzSmxiVzkyWlVOc1lYTnpLVnh5WEc0Z0tpQWdJQ0FnTHk4Z2FHRjJaU0JrYVdabVpYSmxiblFnWm5WdVkzUnBiMjRnYVc1d2RYUWdjR0Z5WVcxbGRHVnljMXh5WEc0Z0tpQWdJQ0FnWlc1MFpYSTZJR1oxYm1OMGFXOXVLR1ZzWlcxbGJuUXNJR1J2Ym1WR2Jpa2dlMXh5WEc0Z0tpQWdJQ0FnSUNCcVVYVmxjbmtvWld4bGJXVnVkQ2t1Wm1Ga1pVbHVLREV3TURBc0lHUnZibVZHYmlrN1hISmNiaUFxWEhKY2JpQXFJQ0FnSUNBZ0lDOHZJSEpsYldWdFltVnlJSFJ2SUdOaGJHd2daRzl1WlVadUlITnZJSFJvWVhRZ1lXNW5kV3hoY2x4eVhHNGdLaUFnSUNBZ0lDQXZMeUJyYm05M2N5QjBhR0YwSUhSb1pTQmhibWx0WVhScGIyNGdhR0Z6SUdOdmJtTnNkV1JsWkZ4eVhHNGdLaUFnSUNBZ2ZTeGNjbHh1SUNwY2NseHVJQ29nSUNBZ0lHMXZkbVU2SUdaMWJtTjBhVzl1S0dWc1pXMWxiblFzSUdSdmJtVkdiaWtnZTF4eVhHNGdLaUFnSUNBZ0lDQnFVWFZsY25rb1pXeGxiV1Z1ZENrdVptRmtaVWx1S0RFd01EQXNJR1J2Ym1WR2JpazdYSEpjYmlBcUlDQWdJQ0I5TEZ4eVhHNGdLbHh5WEc0Z0tpQWdJQ0FnYkdWaGRtVTZJR1oxYm1OMGFXOXVLR1ZzWlcxbGJuUXNJR1J2Ym1WR2Jpa2dlMXh5WEc0Z0tpQWdJQ0FnSUNCcVVYVmxjbmtvWld4bGJXVnVkQ2t1Wm1Ga1pVOTFkQ2d4TURBd0xDQmtiMjVsUm00cE8xeHlYRzRnS2lBZ0lDQWdmVnh5WEc0Z0tpQWdJSDFjY2x4dUlDb2dmVjBwTzF4eVhHNGdLaUJnWUdCY2NseHVJQ3BjY2x4dUlDb2dWR2hsSUc1cFkyVWdkR2hwYm1jZ1lXSnZkWFFnU2xNdFltRnpaV1FnWVc1cGJXRjBhVzl1Y3lCcGN5QjBhR0YwSUhkbElHTmhiaUJwYm1wbFkzUWdiM1JvWlhJZ2MyVnlkbWxqWlhNZ1lXNWtJRzFoYTJVZ2RYTmxJRzltSUdGa2RtRnVZMlZrSUdGdWFXMWhkR2x2YmlCc2FXSnlZWEpwWlhNZ2MzVmphQ0JoYzF4eVhHNGdLaUJuY21WbGJuTnZZMnN1YW5NZ1lXNWtJSFpsYkc5amFYUjVMbXB6TGx4eVhHNGdLbHh5WEc0Z0tpQkpaaUJ2ZFhJZ1lXNXBiV0YwYVc5dUlHTnZaR1VnWTJ4aGMzTXRZbUZ6WldRZ0tHMWxZVzVwYm1jZ2RHaGhkQ0J6YjIxbGRHaHBibWNnYkdsclpTQmdibWREYkdGemMyQXNJR0J1WjBocFpHVmdJR0Z1WkNCZ2JtZFRhRzkzWUNCMGNtbG5aMlZ5Y3lCcGRDa2dkR2hsYmlCM1pTQmpZVzRnYzNScGJHd2daR1ZtYVc1bFhISmNiaUFxSUc5MWNpQmhibWx0WVhScGIyNXpJR2x1YzJsa1pTQnZaaUIwYUdVZ2MyRnRaU0J5WldkcGMzUmxjbVZrSUdGdWFXMWhkR2x2Yml3Z2FHOTNaWFpsY2l3Z2RHaGxJR1oxYm1OMGFXOXVJR2x1Y0hWMElHRnlaM1Z0Wlc1MGN5QmhjbVVnWVNCaWFYUWdaR2xtWm1WeVpXNTBPbHh5WEc0Z0tseHlYRzRnS2lCZ1lHQm9kRzFzWEhKY2JpQXFJRHhrYVhZZ2JtY3RZMnhoYzNNOVhDSmpiMnh2Y2x3aUlHTnNZWE56UFZ3aVkyOXNiM0ptZFd4Y0lqNWNjbHh1SUNvZ0lDQjBhR2x6SUdKdmVDQnBjeUJ0YjI5a2VWeHlYRzRnS2lBOEwyUnBkajVjY2x4dUlDb2dQR0oxZEhSdmJpQnVaeTFqYkdsamF6MWNJbU52Ykc5eVBTZHlaV1FuWENJK1EyaGhibWRsSUhSdklISmxaRHd2WW5WMGRHOXVQbHh5WEc0Z0tpQThZblYwZEc5dUlHNW5MV05zYVdOclBWd2lZMjlzYjNJOUoySnNkV1VuWENJK1EyaGhibWRsSUhSdklHSnNkV1U4TDJKMWRIUnZiajVjY2x4dUlDb2dQR0oxZEhSdmJpQnVaeTFqYkdsamF6MWNJbU52Ykc5eVBTZG5jbVZsYmlkY0lqNURhR0Z1WjJVZ2RHOGdaM0psWlc0OEwySjFkSFJ2Ymo1Y2NseHVJQ29nWUdCZ1hISmNiaUFxWEhKY2JpQXFJR0JnWUdwelhISmNiaUFxSUcxNVRXOWtkV3hsTG1GdWFXMWhkR2x2YmlnbkxtTnZiRzl5Wm5Wc0p5d2dXMloxYm1OMGFXOXVLQ2tnZTF4eVhHNGdLaUFnSUhKbGRIVnliaUI3WEhKY2JpQXFJQ0FnSUNCaFpHUkRiR0Z6Y3pvZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z1kyeGhjM05PWVcxbExDQmtiMjVsUm00cElIdGNjbHh1SUNvZ0lDQWdJQ0FnTHk4Z1pHOGdjMjl0WlNCamIyOXNJR0Z1YVcxaGRHbHZiaUJoYm1RZ1kyRnNiQ0IwYUdVZ1pHOXVaVVp1WEhKY2JpQXFJQ0FnSUNCOUxGeHlYRzRnS2lBZ0lDQWdjbVZ0YjNabFEyeGhjM002SUdaMWJtTjBhVzl1S0dWc1pXMWxiblFzSUdOc1lYTnpUbUZ0WlN3Z1pHOXVaVVp1S1NCN1hISmNiaUFxSUNBZ0lDQWdJQzh2SUdSdklITnZiV1VnWTI5dmJDQmhibWx0WVhScGIyNGdZVzVrSUdOaGJHd2dkR2hsSUdSdmJtVkdibHh5WEc0Z0tpQWdJQ0FnZlN4Y2NseHVJQ29nSUNBZ0lITmxkRU5zWVhOek9pQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MExDQmhaR1JsWkVOc1lYTnpMQ0J5WlcxdmRtVmtRMnhoYzNNc0lHUnZibVZHYmlrZ2UxeHlYRzRnS2lBZ0lDQWdJQ0F2THlCa2J5QnpiMjFsSUdOdmIyd2dZVzVwYldGMGFXOXVJR0Z1WkNCallXeHNJSFJvWlNCa2IyNWxSbTVjY2x4dUlDb2dJQ0FnSUgxY2NseHVJQ29nSUNCOVhISmNiaUFxSUgxZEtUdGNjbHh1SUNvZ1lHQmdYSEpjYmlBcVhISmNiaUFxSUNNaklFTlRVeUFySUVwVElFRnVhVzFoZEdsdmJuTWdWRzluWlhSb1pYSmNjbHh1SUNwY2NseHVJQ29nUVc1bmRXeGhja3BUSURFdU5DQmhibVFnYUdsbmFHVnlJR2hoY3lCMFlXdGxiaUJ6ZEdWd2N5QjBieUJ0WVd0bElIUm9aU0JoYldGc1oyRnRZWFJwYjI0Z2IyWWdRMU5USUdGdVpDQktVeUJoYm1sdFlYUnBiMjV6SUcxdmNtVWdabXhsZUdsaWJHVXVJRWh2ZDJWMlpYSXNJSFZ1YkdsclpTQmxZWEpzYVdWeUlIWmxjbk5wYjI1eklHOW1JRUZ1WjNWc1lYSXNYSEpjYmlBcUlHUmxabWx1YVc1bklFTlRVeUJoYm1RZ1NsTWdZVzVwYldGMGFXOXVjeUIwYnlCM2IzSnJJRzltWmlCdlppQjBhR1VnYzJGdFpTQkRVMU1nWTJ4aGMzTWdkMmxzYkNCdWIzUWdkMjl5YXlCaGJubHRiM0psTGlCVWFHVnlaV1p2Y21VZ2RHaGxJR1Y0WVcxd2JHVWdZbVZzYjNjZ2QybHNiQ0J2Ym14NUlISmxjM1ZzZENCcGJpQXFLa3BUSUdGdWFXMWhkR2x2Ym5NZ2RHRnJhVzVuWEhKY2JpQXFJR05vWVhKblpTQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUtpbzZYSEpjYmlBcVhISmNiaUFxSUdCZ1lHaDBiV3hjY2x4dUlDb2dQR1JwZGlCdVp5MXBaajFjSW1KdmIyeGNJaUJqYkdGemN6MWNJbk5zYVdSbFhDSStYSEpjYmlBcUlDQWdVMnhwWkdVZ2FXNGdZVzVrSUc5MWRGeHlYRzRnS2lBOEwyUnBkajVjY2x4dUlDb2dZR0JnWEhKY2JpQXFYSEpjYmlBcUlHQmdZR3B6WEhKY2JpQXFJRzE1VFc5a2RXeGxMbUZ1YVcxaGRHbHZiaWduTG5Oc2FXUmxKeXdnVzJaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnS2lBZ0lISmxkSFZ5YmlCN1hISmNiaUFxSUNBZ0lDQmxiblJsY2pvZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z1pHOXVaVVp1S1NCN1hISmNiaUFxSUNBZ0lDQWdJR3BSZFdWeWVTaGxiR1Z0Wlc1MEtTNXpiR2xrWlVsdUtERXdNREFzSUdSdmJtVkdiaWs3WEhKY2JpQXFJQ0FnSUNCOVhISmNiaUFxSUNBZ2ZWeHlYRzRnS2lCOVhTazdYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lCZ1lHQmpjM05jY2x4dUlDb2dMbk5zYVdSbExtNW5MV1Z1ZEdWeUlIdGNjbHh1SUNvZ0lDQjBjbUZ1YzJsMGFXOXVPakF1TlhNZ2JHbHVaV0Z5SUdGc2JEdGNjbHh1SUNvZ0lDQjBjbUZ1YzJadmNtMDZkSEpoYm5Oc1lYUmxXU2d0TVRBd2NIZ3BPMXh5WEc0Z0tpQjlYSEpjYmlBcUlDNXpiR2xrWlM1dVp5MWxiblJsY2k1dVp5MWxiblJsY2kxaFkzUnBkbVVnZTF4eVhHNGdLaUFnSUhSeVlXNXpabTl5YlRwMGNtRnVjMnhoZEdWWktEQXBPMXh5WEc0Z0tpQjlYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lCRWIyVnpJSFJvYVhNZ2JXVmhiaUIwYUdGMElFTlRVeUJoYm1RZ1NsTWdZVzVwYldGMGFXOXVjeUJqWVc1dWIzUWdZbVVnZFhObFpDQjBiMmRsZEdobGNqOGdSRzhnU2xNdFltRnpaV1FnWVc1cGJXRjBhVzl1Y3lCaGJIZGhlWE1nYUdGMlpTQm9hV2RvWlhJZ2NISnBiM0pwZEhrL0lGZGxJR05oYmlCdFlXdGxJSFZ3SUdadmNpQjBhR1ZjY2x4dUlDb2diR0ZqYXlCdlppQkRVMU1nWVc1cGJXRjBhVzl1Y3lCaWVTQjFjMmx1WnlCMGFHVWdZQ1JoYm1sdFlYUmxRM056WUNCelpYSjJhV05sSUhSdklIUnlhV2RuWlhJZ2IzVnlJRzkzYmlCMGQyVmhhMlZrTFc5MWRDd2dRMU5UTFdKaGMyVmtJR0Z1YVcxaGRHbHZibk1nWkdseVpXTjBiSGtnWm5KdmJWeHlYRzRnS2lCdmRYSWdiM2R1SUVwVExXSmhjMlZrSUdGdWFXMWhkR2x2YmlCamIyUmxPbHh5WEc0Z0tseHlYRzRnS2lCZ1lHQnFjMXh5WEc0Z0tpQnRlVTF2WkhWc1pTNWhibWx0WVhScGIyNG9KeTV6Ykdsa1pTY3NJRnNuSkdGdWFXMWhkR1ZEYzNNbkxDQm1kVzVqZEdsdmJpZ2tZVzVwYldGMFpVTnpjeWtnZTF4eVhHNGdLaUFnSUhKbGRIVnliaUI3WEhKY2JpQXFJQ0FnSUNCbGJuUmxjam9nWm5WdVkzUnBiMjRvWld4bGJXVnVkQ2tnZTF4eVhHNHFJQ0FnSUNBZ0lDQXZMeUIwYUdseklIZHBiR3dnZEhKcFoyZGxjaUJnTG5Oc2FXUmxMbTVuTFdWdWRHVnlZQ0JoYm1RZ1lDNXpiR2xrWlM1dVp5MWxiblJsY2kxaFkzUnBkbVZnTGx4eVhHNGdLaUFnSUNBZ0lDQnlaWFIxY200Z0pHRnVhVzFoZEdWRGMzTW9aV3hsYldWdWRDd2dlMXh5WEc0Z0tpQWdJQ0FnSUNBZ0lHVjJaVzUwT2lBblpXNTBaWEluTEZ4eVhHNGdLaUFnSUNBZ0lDQWdJSE4wY25WamRIVnlZV3c2SUhSeWRXVmNjbHh1SUNvZ0lDQWdJQ0FnZlNrN1hISmNiaUFxSUNBZ0lDQjlYSEpjYmlBcUlDQWdmVnh5WEc0Z0tpQjlYU2s3WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQlVhR1VnYm1salpTQjBhR2x1WnlCb1pYSmxJR2x6SUhSb1lYUWdkMlVnWTJGdUlITmhkbVVnWW1GdVpIZHBaSFJvSUdKNUlITjBhV05yYVc1bklIUnZJRzkxY2lCRFUxTXRZbUZ6WldRZ1lXNXBiV0YwYVc5dUlHTnZaR1VnWVc1a0lIZGxJR1J2YmlkMElHNWxaV1FnZEc4Z2NtVnNlU0J2YmlCaElETnlaQzF3WVhKMGVTQmhibWx0WVhScGIyNGdabkpoYldWM2IzSnJMbHh5WEc0Z0tseHlYRzRnS2lCVWFHVWdZQ1JoYm1sdFlYUmxRM056WUNCelpYSjJhV05sSUdseklIWmxjbmtnY0c5M1pYSm1kV3dnYzJsdVkyVWdkMlVnWTJGdUlHWmxaV1FnYVc0Z1lXeHNJR3RwYm1SeklHOW1JR1Y0ZEhKaElIQnliM0JsY25ScFpYTWdkR2hoZENCM2FXeHNJR0psSUdWMllXeDFZWFJsWkNCaGJtUWdabVZrSUdsdWRHOGdZU0JEVTFNZ2RISmhibk5wZEdsdmJpQnZjbHh5WEc0Z0tpQnJaWGxtY21GdFpTQmhibWx0WVhScGIyNHVJRVp2Y2lCbGVHRnRjR3hsSUdsbUlIZGxJSGRoYm5SbFpDQjBieUJoYm1sdFlYUmxJSFJvWlNCb1pXbG5hSFFnYjJZZ1lXNGdaV3hsYldWdWRDQjNhR2xzWlNCaFpHUnBibWNnWVc1a0lISmxiVzkyYVc1bklHTnNZWE56WlhNZ2RHaGxiaUIzWlNCallXNGdaRzhnYzI4Z1lua2djSEp2ZG1sa2FXNW5JSFJvWVhSY2NseHVJQ29nWkdGMFlTQnBiblJ2SUdBa1lXNXBiV0YwWlVOemMyQWdaR2x5WldOMGJIazZYSEpjYmlBcVhISmNiaUFxSUdCZ1lHcHpYSEpjYmlBcUlHMTVUVzlrZFd4bExtRnVhVzFoZEdsdmJpZ25Mbk5zYVdSbEp5d2dXeWNrWVc1cGJXRjBaVU56Y3ljc0lHWjFibU4wYVc5dUtDUmhibWx0WVhSbFEzTnpLU0I3WEhKY2JpQXFJQ0FnY21WMGRYSnVJSHRjY2x4dUlDb2dJQ0FnSUdWdWRHVnlPaUJtZFc1amRHbHZiaWhsYkdWdFpXNTBLU0I3WEhKY2JpQXFJQ0FnSUNBZ0lISmxkSFZ5YmlBa1lXNXBiV0YwWlVOemN5aGxiR1Z0Wlc1MExDQjdYSEpjYmlBcUlDQWdJQ0FnSUNBZ1pYWmxiblE2SUNkbGJuUmxjaWNzWEhKY2JpQXFJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmhiRG9nZEhKMVpTeGNjbHh1SUNvZ0lDQWdJQ0FnSUNCaFpHUkRiR0Z6Y3pvZ0oyMWhjbTl2YmkxelpYUjBhVzVuSnl4Y2NseHVJQ29nSUNBZ0lDQWdJQ0JtY205dE9pQjdJR2hsYVdkb2REb3dJSDBzWEhKY2JpQXFJQ0FnSUNBZ0lDQWdkRzg2SUhzZ2FHVnBaMmgwT2lBeU1EQWdmVnh5WEc0Z0tpQWdJQ0FnSUNCOUtUdGNjbHh1SUNvZ0lDQWdJSDFjY2x4dUlDb2dJQ0I5WEhKY2JpQXFJSDFkS1R0Y2NseHVJQ29nWUdCZ1hISmNiaUFxWEhKY2JpQXFJRTV2ZHlCM1pTQmpZVzRnWm1sc2JDQnBiaUIwYUdVZ2NtVnpkQ0IyYVdFZ2IzVnlJSFJ5WVc1emFYUnBiMjRnUTFOVElHTnZaR1U2WEhKY2JpQXFYSEpjYmlBcUlHQmdZR056YzF4eVhHNGdLaUF2SmlNME1qc2dkR2hsSUhSeVlXNXphWFJwYjI0Z2RHVnNiSE1nYm1kQmJtbHRZWFJsSUhSdklHMWhhMlVnZEdobElHRnVhVzFoZEdsdmJpQm9ZWEJ3Wlc0Z0ppTTBNanN2WEhKY2JpQXFJQzV6Ykdsa1pTNXVaeTFsYm5SbGNpQjdJSFJ5WVc1emFYUnBiMjQ2TUM0MWN5QnNhVzVsWVhJZ1lXeHNPeUI5WEhKY2JpQXFYSEpjYmlBcUlDOG1JelF5T3lCMGFHbHpJR1Y0ZEhKaElFTlRVeUJqYkdGemN5QjNhV3hzSUdKbElHRmljMjl5WW1Wa0lHbHVkRzhnZEdobElIUnlZVzV6YVhScGIyNWNjbHh1SUNvZ2MybHVZMlVnZEdobElDUmhibWx0WVhSbFEzTnpJR052WkdVZ2FYTWdZV1JrYVc1bklIUm9aU0JqYkdGemN5QW1JelF5T3k5Y2NseHVJQ29nTG0xaGNtOXZiaTF6WlhSMGFXNW5JSHNnWW1GamEyZHliM1Z1WkRweVpXUTdJSDFjY2x4dUlDb2dZR0JnWEhKY2JpQXFYSEpjYmlBcUlFRnVaQ0JnSkdGdWFXMWhkR1ZEYzNOZ0lIZHBiR3dnWm1sbmRYSmxJRzkxZENCMGFHVWdjbVZ6ZEM0Z1NuVnpkQ0J0WVd0bElITjFjbVVnZEc4Z2FHRjJaU0IwYUdVZ1lHUnZibVVvS1dBZ1kyRnNiR0poWTJzZ1ptbHlaU0IwYUdVZ1lHUnZibVZHYm1BZ1puVnVZM1JwYjI0Z2RHOGdjMmxuYm1Gc0lIZG9aVzRnZEdobElHRnVhVzFoZEdsdmJpQnBjeUJ2ZG1WeUxseHlYRzRnS2x4eVhHNGdLaUJVYnlCc1pXRnliaUJ0YjNKbElHRmliM1YwSUhkb1lYUW5jeUJ3YjNOemFXSnNaU0JpWlNCemRYSmxJSFJ2SUhacGMybDBJSFJvWlNCN1FHeHBibXNnYm1kQmJtbHRZWFJsTGlSaGJtbHRZWFJsUTNOeklDUmhibWx0WVhSbFEzTnpJSE5sY25acFkyVjlMbHh5WEc0Z0tseHlYRzRnS2lBakl5QkJibWx0WVhScGIyNGdRVzVqYUc5eWFXNW5JQ2gyYVdFZ1lHNW5MV0Z1YVcxaGRHVXRjbVZtWUNsY2NseHVJQ3BjY2x4dUlDb2dibWRCYm1sdFlYUmxJR2x1SUVGdVozVnNZWEpLVXlBeExqUWdZMjl0WlhNZ2NHRmphMlZrSUhkcGRHZ2dkR2hsSUdGaWFXeHBkSGtnZEc4Z1kzSnZjM010WVc1cGJXRjBaU0JsYkdWdFpXNTBjeUJpWlhSM1pXVnVYSEpjYmlBcUlITjBjblZqZEhWeVlXd2dZWEpsWVhNZ2IyWWdZVzRnWVhCd2JHbGpZWFJwYjI0Z0tHeHBhMlVnZG1sbGQzTXBJR0o1SUhCaGFYSnBibWNnZFhBZ1pXeGxiV1Z1ZEhNZ2RYTnBibWNnWVc0Z1lYUjBjbWxpZFhSbFhISmNiaUFxSUdOaGJHeGxaQ0JnYm1jdFlXNXBiV0YwWlMxeVpXWmdMbHh5WEc0Z0tseHlYRzRnS2lCTVpYUW5jeUJ6WVhrZ1ptOXlJR1Y0WVcxd2JHVWdkMlVnYUdGMlpTQjBkMjhnZG1sbGQzTWdkR2hoZENCaGNtVWdiV0Z1WVdkbFpDQmllU0JnYm1jdGRtbGxkMkFnWVc1a0lIZGxJSGRoYm5RZ2RHOGdjMmh2ZDF4eVhHNGdLaUIwYUdGMElIUm9aWEpsSUdseklHRWdjbVZzWVhScGIyNXphR2x3SUdKbGRIZGxaVzRnZEhkdklHTnZiWEJ2Ym1WdWRITWdjMmwwZFdGMFpXUWdhVzRnZDJsMGFHbHVJSFJvWlhObElIWnBaWGR6TGlCQ2VTQjFjMmx1WnlCMGFHVmNjbHh1SUNvZ1lHNW5MV0Z1YVcxaGRHVXRjbVZtWUNCaGRIUnlhV0oxZEdVZ2QyVWdZMkZ1SUdsa1pXNTBhV1o1SUhSb1lYUWdkR2hsSUhSM2J5QmpiMjF3YjI1bGJuUnpJR0Z5WlNCd1lXbHlaV1FnZEc5blpYUm9aWElnWVc1a0lIZGxYSEpjYmlBcUlHTmhiaUIwYUdWdUlHRjBkR0ZqYUNCaGJpQmhibWx0WVhScGIyNHNJSGRvYVdOb0lHbHpJSFJ5YVdkblpYSmxaQ0IzYUdWdUlIUm9aU0IyYVdWM0lHTm9ZVzVuWlhNdVhISmNiaUFxWEhKY2JpQXFJRk5oZVNCbWIzSWdaWGhoYlhCc1pTQjNaU0JvWVhabElIUm9aU0JtYjJ4c2IzZHBibWNnZEdWdGNHeGhkR1VnWTI5a1pUcGNjbHh1SUNwY2NseHVJQ29nWUdCZ2FIUnRiRnh5WEc0Z0tpQThJUzB0SUdsdVpHVjRMbWgwYld3Z0xTMCtYSEpjYmlBcUlEeGthWFlnYm1jdGRtbGxkeUJqYkdGemN6MWNJblpwWlhjdFlXNXBiV0YwYVc5dVhDSStYSEpjYmlBcUlEd3ZaR2wyUGx4eVhHNGdLbHh5WEc0Z0tpQThJUzB0SUdodmJXVXVhSFJ0YkNBdExUNWNjbHh1SUNvZ1BHRWdhSEpsWmoxY0lpTXZZbUZ1Ym1WeUxYQmhaMlZjSWo1Y2NseHVJQ29nSUNBOGFXMW5JSE55WXoxY0lpNHZZbUZ1Ym1WeUxtcHdaMXdpSUdOc1lYTnpQVndpWW1GdWJtVnlYQ0lnYm1jdFlXNXBiV0YwWlMxeVpXWTlYQ0ppWVc1dVpYSmNJajVjY2x4dUlDb2dQQzloUGx4eVhHNGdLbHh5WEc0Z0tpQThJUzB0SUdKaGJtNWxjaTF3WVdkbExtaDBiV3dnTFMwK1hISmNiaUFxSUR4cGJXY2djM0pqUFZ3aUxpOWlZVzV1WlhJdWFuQm5YQ0lnWTJ4aGMzTTlYQ0ppWVc1dVpYSmNJaUJ1WnkxaGJtbHRZWFJsTFhKbFpqMWNJbUpoYm01bGNsd2lQbHh5WEc0Z0tpQmdZR0JjY2x4dUlDcGNjbHh1SUNvZ1RtOTNMQ0IzYUdWdUlIUm9aU0IyYVdWM0lHTm9ZVzVuWlhNZ0tHOXVZMlVnZEdobElHeHBibXNnYVhNZ1kyeHBZMnRsWkNrc0lHNW5RVzVwYldGMFpTQjNhV3hzSUdWNFlXMXBibVVnZEdobFhISmNiaUFxSUVoVVRVd2dZMjl1ZEdWdWRITWdkRzhnYzJWbElHbG1JSFJvWlhKbElHbHpJR0VnYldGMFkyZ2djbVZtWlhKbGJtTmxJR0psZEhkbFpXNGdZVzU1SUdOdmJYQnZibVZ1ZEhNZ2FXNGdkR2hsSUhacFpYZGNjbHh1SUNvZ2RHaGhkQ0JwY3lCc1pXRjJhVzVuSUdGdVpDQjBhR1VnZG1sbGR5QjBhR0YwSUdseklHVnVkR1Z5YVc1bkxpQkpkQ0IzYVd4c0lITmpZVzRnWW05MGFDQjBhR1VnZG1sbGR5QjNhR2xqYUNCcGN5QmlaV2x1WjF4eVhHNGdLaUJ5WlcxdmRtVmtJQ2hzWldGMlpTa2dZVzVrSUdsdWMyVnlkR1ZrSUNobGJuUmxjaWtnZEc4Z2MyVmxJR2xtSUhSb1pYSmxJR0Z5WlNCaGJua2djR0ZwY21Wa0lFUlBUU0JsYkdWdFpXNTBjeUIwYUdGMFhISmNiaUFxSUdOdmJuUmhhVzRnWVNCdFlYUmphR2x1WnlCeVpXWWdkbUZzZFdVdVhISmNiaUFxWEhKY2JpQXFJRlJvWlNCMGQyOGdhVzFoWjJWeklHMWhkR05vSUhOcGJtTmxJSFJvWlhrZ2MyaGhjbVVnZEdobElITmhiV1VnY21WbUlIWmhiSFZsTGlCdVowRnVhVzFoZEdVZ2QybHNiQ0J1YjNjZ1kzSmxZWFJsSUdGY2NseHVJQ29nZEhKaGJuTndiM0owSUdWc1pXMWxiblFnS0hkb2FXTm9JR2x6SUdFZ1kyeHZibVVnYjJZZ2RHaGxJR1pwY25OMElHbHRZV2RsSUdWc1pXMWxiblFwSUdGdVpDQnBkQ0IzYVd4c0lIUm9aVzRnWVhSMFpXMXdkRnh5WEc0Z0tpQjBieUJoYm1sdFlYUmxJSFJ2SUhSb1pTQndiM05wZEdsdmJpQnZaaUIwYUdVZ2MyVmpiMjVrSUdsdFlXZGxJR1ZzWlcxbGJuUWdhVzRnZEdobElHNWxlSFFnZG1sbGR5NGdSbTl5SUhSb1pTQmhibWx0WVhScGIyNGdkRzljY2x4dUlDb2dkMjl5YXlCaElITndaV05wWVd3Z1ExTlRJR05zWVhOeklHTmhiR3hsWkNCZ2JtY3RZVzVqYUc5eVlDQjNhV3hzSUdKbElHRmtaR1ZrSUhSdklIUm9aU0IwY21GdWMzQnZjblJsWkNCbGJHVnRaVzUwTGx4eVhHNGdLbHh5WEc0Z0tpQlhaU0JqWVc0Z2JtOTNJR0YwZEdGamFDQmhJSFJ5WVc1emFYUnBiMjRnYjI1MGJ5QjBhR1VnWUM1aVlXNXVaWEl1Ym1jdFlXNWphRzl5WUNCRFUxTWdZMnhoYzNNZ1lXNWtJSFJvWlc1Y2NseHVJQ29nYm1kQmJtbHRZWFJsSUhkcGJHd2dhR0Z1Wkd4bElIUm9aU0JsYm5ScGNtVWdkSEpoYm5OcGRHbHZiaUJtYjNJZ2RYTWdZWE1nZDJWc2JDQmhjeUIwYUdVZ1lXUmthWFJwYjI0Z1lXNWtJSEpsYlc5MllXd2diMlpjY2x4dUlDb2dZVzU1SUdOb1lXNW5aWE1nYjJZZ1ExTlRJR05zWVhOelpYTWdZbVYwZDJWbGJpQjBhR1VnWld4bGJXVnVkSE02WEhKY2JpQXFYSEpjYmlBcUlHQmdZR056YzF4eVhHNGdLaUF1WW1GdWJtVnlMbTVuTFdGdVkyaHZjaUI3WEhKY2JpQXFJQ0FnTHlZak5ESTdJSFJvYVhNZ1lXNXBiV0YwYVc5dUlIZHBiR3dnYkdGemRDQm1iM0lnTVNCelpXTnZibVFnYzJsdVkyVWdkR2hsY21VZ1lYSmxYSEpjYmlBcUlDQWdJQ0FnSUNBZ0lIUjNieUJ3YUdGelpYTWdkRzhnZEdobElHRnVhVzFoZEdsdmJpQW9ZVzRnWUdsdVlDQmhibVFnWVc0Z1lHOTFkR0FnY0doaGMyVXBJQ1lqTkRJN0wxeHlYRzRnS2lBZ0lIUnlZVzV6YVhScGIyNDZNQzQxY3lCc2FXNWxZWElnWVd4c08xeHlYRzRnS2lCOVhISmNiaUFxSUdCZ1lGeHlYRzRnS2x4eVhHNGdLaUJYWlNCaGJITnZJQ29xYlhWemRDb3FJR2x1WTJ4MVpHVWdZVzVwYldGMGFXOXVjeUJtYjNJZ2RHaGxJSFpwWlhkeklIUm9ZWFFnWVhKbElHSmxhVzVuSUdWdWRHVnlaV1FnWVc1a0lISmxiVzkyWldSY2NseHVJQ29nS0c5MGFHVnlkMmx6WlNCaGJtTm9iM0pwYm1jZ2QyOTFiR1J1SjNRZ1ltVWdjRzl6YzJsaWJHVWdjMmx1WTJVZ2RHaGxJRzVsZHlCMmFXVjNJSGR2ZFd4a0lHSmxJR2x1YzJWeWRHVmtJSEpwWjJoMElHRjNZWGtwTGx4eVhHNGdLbHh5WEc0Z0tpQmdZR0JqYzNOY2NseHVJQ29nTG5acFpYY3RZVzVwYldGMGFXOXVMbTVuTFdWdWRHVnlMQ0F1ZG1sbGR5MWhibWx0WVhScGIyNHVibWN0YkdWaGRtVWdlMXh5WEc0Z0tpQWdJSFJ5WVc1emFYUnBiMjQ2TUM0MWN5QnNhVzVsWVhJZ1lXeHNPMXh5WEc0Z0tpQWdJSEJ2YzJsMGFXOXVPbVpwZUdWa08xeHlYRzRnS2lBZ0lHeGxablE2TUR0Y2NseHVJQ29nSUNCMGIzQTZNRHRjY2x4dUlDb2dJQ0IzYVdSMGFEb3hNREFsTzF4eVhHNGdLaUI5WEhKY2JpQXFJQzUyYVdWM0xXRnVhVzFoZEdsdmJpNXVaeTFsYm5SbGNpQjdYSEpjYmlBcUlDQWdkSEpoYm5ObWIzSnRPblJ5WVc1emJHRjBaVmdvTVRBd0pTazdYSEpjYmlBcUlIMWNjbHh1SUNvZ0xuWnBaWGN0WVc1cGJXRjBhVzl1TG01bkxXeGxZWFpsTEZ4eVhHNGdLaUF1ZG1sbGR5MWhibWx0WVhScGIyNHVibWN0Wlc1MFpYSXVibWN0Wlc1MFpYSXRZV04wYVhabElIdGNjbHh1SUNvZ0lDQjBjbUZ1YzJadmNtMDZkSEpoYm5Oc1lYUmxXQ2d3SlNrN1hISmNiaUFxSUgxY2NseHVJQ29nTG5acFpYY3RZVzVwYldGMGFXOXVMbTVuTFd4bFlYWmxMbTVuTFd4bFlYWmxMV0ZqZEdsMlpTQjdYSEpjYmlBcUlDQWdkSEpoYm5ObWIzSnRPblJ5WVc1emJHRjBaVmdvTFRFd01DVXBPMXh5WEc0Z0tpQjlYSEpjYmlBcUlHQmdZRnh5WEc0Z0tseHlYRzRnS2lCT2IzY2dkMlVnWTJGdUlHcDFiWEFnWW1GamF5QjBieUIwYUdVZ1lXNWphRzl5SUdGdWFXMWhkR2x2Ymk0Z1YyaGxiaUIwYUdVZ1lXNXBiV0YwYVc5dUlHaGhjSEJsYm5Nc0lIUm9aWEpsSUdGeVpTQjBkMjhnYzNSaFoyVnpJSFJvWVhRZ2IyTmpkWEk2WEhKY2JpQXFJR0Z1SUdCdmRYUmdJR0Z1WkNCaGJpQmdhVzVnSUhOMFlXZGxMaUJVYUdVZ1lHOTFkR0FnYzNSaFoyVWdhR0Z3Y0dWdWN5Qm1hWEp6ZENCaGJtUWdkR2hoZENCcGN5QjNhR1Z1SUhSb1pTQmxiR1Z0Wlc1MElHbHpJR0Z1YVcxaGRHVmtJR0YzWVhsY2NseHVJQ29nWm5KdmJTQnBkSE1nYjNKcFoybHVMaUJQYm1ObElIUm9ZWFFnWVc1cGJXRjBhVzl1SUdseklHOTJaWElnZEdobGJpQjBhR1VnWUdsdVlDQnpkR0ZuWlNCdlkyTjFjbk1nZDJocFkyZ2dZVzVwYldGMFpYTWdkR2hsWEhKY2JpQXFJR1ZzWlcxbGJuUWdkRzhnYVhSeklHUmxjM1JwYm1GMGFXOXVMaUJVYUdVZ2NtVmhjMjl1SUhkb2VTQjBhR1Z5WlNCaGNtVWdkSGR2SUdGdWFXMWhkR2x2Ym5NZ2FYTWdkRzhnWjJsMlpTQmxibTkxWjJnZ2RHbHRaVnh5WEc0Z0tpQm1iM0lnZEdobElHVnVkR1Z5SUdGdWFXMWhkR2x2YmlCdmJpQjBhR1VnYm1WM0lHVnNaVzFsYm5RZ2RHOGdZbVVnY21WaFpIa3VYSEpjYmlBcVhISmNiaUFxSUZSb1pTQmxlR0Z0Y0d4bElHRmliM1psSUhObGRITWdkWEFnWVNCMGNtRnVjMmwwYVc5dUlHWnZjaUJpYjNSb0lIUm9aU0JwYmlCaGJtUWdiM1YwSUhCb1lYTmxjeXdnWW5WMElIZGxJR05oYmlCaGJITnZJSFJoY21kbGRDQjBhR1VnYjNWMElHOXlYSEpjYmlBcUlHbHVJSEJvWVhObGN5QmthWEpsWTNSc2VTQjJhV0VnWUc1bkxXRnVZMmh2Y2kxdmRYUmdJR0Z1WkNCZ2JtY3RZVzVqYUc5eUxXbHVZQzVjY2x4dUlDcGNjbHh1SUNvZ1lHQmdZM056WEhKY2JpQXFJQzVpWVc1dVpYSXVibWN0WVc1amFHOXlMVzkxZENCN1hISmNiaUFxSUNBZ2RISmhibk5wZEdsdmJqb2dNQzQxY3lCc2FXNWxZWElnWVd4c08xeHlYRzRnS2x4eVhHNGdLaUFnSUM4bUl6UXlPeUIwYUdVZ2MyTmhiR1VnZDJsc2JDQmlaU0JoY0hCc2FXVmtJR1IxY21sdVp5QjBhR1VnYjNWMElHRnVhVzFoZEdsdmJpeGNjbHh1SUNvZ0lDQWdJQ0FnSUNBZ1luVjBJSGRwYkd3Z1ltVWdZVzVwYldGMFpXUWdZWGRoZVNCM2FHVnVJSFJvWlNCcGJpQmhibWx0WVhScGIyNGdjblZ1Y3lBbUl6UXlPeTljY2x4dUlDb2dJQ0IwY21GdWMyWnZjbTA2SUhOallXeGxLREV1TWlrN1hISmNiaUFxSUgxY2NseHVJQ3BjY2x4dUlDb2dMbUpoYm01bGNpNXVaeTFoYm1Ob2IzSXRhVzRnZTF4eVhHNGdLaUFnSUhSeVlXNXphWFJwYjI0NklERnpJR3hwYm1WaGNpQmhiR3c3WEhKY2JpQXFJSDFjY2x4dUlDb2dZR0JnWEhKY2JpQXFYSEpjYmlBcVhISmNiaUFxWEhKY2JpQXFYSEpjYmlBcUlDTWpJeUJCYm1Ob2IzSnBibWNnUkdWdGIxeHlYRzRnS2x4eVhHNGdJRHhsZUdGdGNHeGxJRzF2WkhWc1pUMWNJbUZ1WTJodmNtbHVaMFY0WVcxd2JHVmNJbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lHNWhiV1U5WENKaGJtTm9iM0pwYm1kRmVHRnRjR3hsWENKY2NseHVJQ0FnSUNBZ0lDQWdJQ0JwWkQxY0ltRnVZMmh2Y21sdVowVjRZVzF3YkdWY0lseHlYRzRnSUNBZ0lDQWdJQ0FnSUdSbGNITTlYQ0poYm1kMWJHRnlMV0Z1YVcxaGRHVXVhbk03WVc1bmRXeGhjaTF5YjNWMFpTNXFjMXdpWEhKY2JpQWdJQ0FnSUNBZ0lDQWdZVzVwYldGMGFXOXVjejFjSW5SeWRXVmNJajVjY2x4dUlDQWdJRHhtYVd4bElHNWhiV1U5WENKcGJtUmxlQzVvZEcxc1hDSStYSEpjYmlBZ0lDQWdJRHhoSUdoeVpXWTlYQ0lqTDF3aVBraHZiV1U4TDJFK1hISmNiaUFnSUNBZ0lEeG9jaUF2UGx4eVhHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelBWd2lkbWxsZHkxamIyNTBZV2x1WlhKY0lqNWNjbHh1SUNBZ0lDQWdJQ0E4WkdsMklHNW5MWFpwWlhjZ1kyeGhjM005WENKMmFXVjNYQ0krUEM5a2FYWStYSEpjYmlBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ1BDOW1hV3hsUGx4eVhHNGdJQ0FnUEdacGJHVWdibUZ0WlQxY0luTmpjbWx3ZEM1cWMxd2lQbHh5WEc0Z0lDQWdJQ0JoYm1kMWJHRnlMbTF2WkhWc1pTZ25ZVzVqYUc5eWFXNW5SWGhoYlhCc1pTY3NJRnNuYm1kQmJtbHRZWFJsSnl3Z0oyNW5VbTkxZEdVblhTbGNjbHh1SUNBZ0lDQWdJQ0F1WTI5dVptbG5LRnNuSkhKdmRYUmxVSEp2ZG1sa1pYSW5MQ0JtZFc1amRHbHZiaWdrY205MWRHVlFjbTkyYVdSbGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0pISnZkWFJsVUhKdmRtbGtaWEl1ZDJobGJpZ25MeWNzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZWY213NklDZG9iMjFsTG1oMGJXd25MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwY205c2JHVnlPaUFuU0c5dFpVTnZiblJ5YjJ4c1pYSWdZWE1nYUc5dFpTZGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSkhKdmRYUmxVSEp2ZG1sa1pYSXVkMmhsYmlnbkwzQnliMlpwYkdVdk9tbGtKeXdnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlcxd2JHRjBaVlZ5YkRvZ0ozQnliMlpwYkdVdWFIUnRiQ2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SeWIyeHNaWEk2SUNkUWNtOW1hV3hsUTI5dWRISnZiR3hsY2lCaGN5QndjbTltYVd4bEoxeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmVjBwWEhKY2JpQWdJQ0FnSUNBZ0xuSjFiaWhiSnlSeWIyOTBVMk52Y0dVbkxDQm1kVzVqZEdsdmJpZ2tjbTl2ZEZOamIzQmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWtjbTl2ZEZOamIzQmxMbkpsWTI5eVpITWdQU0JiWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSHNnYVdRNk1Td2dkR2wwYkdVNklGd2lUV2x6Y3lCQ1pYVnNZV2dnVW05dllsd2lJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSHNnYVdRNk1pd2dkR2wwYkdVNklGd2lWSEpsYm5RZ1RXOXlhWE56WlhSMFpWd2lJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSHNnYVdRNk15d2dkR2wwYkdVNklGd2lUV2x6Y3lCQmRtRWdVRzkxY205elhDSWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdleUJwWkRvMExDQjBhWFJzWlRvZ1hDSlNiMlFnVUc5MWNtOXpYQ0lnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZXlCcFpEbzFMQ0IwYVhSc1pUb2dYQ0pCWW1SMWJDQlNhV05sWENJZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2V5QnBaRG8yTENCMGFYUnNaVG9nWENKTVlYVnlhV1VnVW5WMGFHVnlabTl5WkNCVGNpNWNJaUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3SUdsa09qY3NJSFJwZEd4bE9pQmNJazVoYTJsaElFMWpUR0YxWjJoc2FXNWNJaUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3SUdsa09qZ3NJSFJwZEd4bE9pQmNJa3B2Y21SdmJpQkNiR0Z1WkdFZ1JGWk5YQ0lnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZXlCcFpEbzVMQ0IwYVhSc1pUb2dYQ0pTYUc5a1lTQklZVzVrWENJZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2V5QnBaRG94TUN3Z2RHbDBiR1U2SUZ3aVFXeGxlR0Z1WkhKbFlTQlRZWFZsY2x3aUlIMWNjbHh1SUNBZ0lDQWdJQ0FnSUYwN1hISmNiaUFnSUNBZ0lDQWdmVjBwWEhKY2JpQWdJQ0FnSUNBZ0xtTnZiblJ5YjJ4c1pYSW9KMGh2YldWRGIyNTBjbTlzYkdWeUp5d2dXMloxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlsYlhCMGVWeHlYRzRnSUNBZ0lDQWdJSDFkS1Z4eVhHNGdJQ0FnSUNBZ0lDNWpiMjUwY205c2JHVnlLQ2RRY205bWFXeGxRMjl1ZEhKdmJHeGxjaWNzSUZzbkpISnZiM1JUWTI5d1pTY3NJQ2NrY205MWRHVlFZWEpoYlhNbkxDQm1kVzVqZEdsdmJpZ2tjbTl2ZEZOamIzQmxMQ0FrY205MWRHVlFZWEpoYlhNcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnBibVJsZUNBOUlIQmhjbk5sU1c1MEtDUnliM1YwWlZCaGNtRnRjeTVwWkN3Z01UQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJQ1J5YjI5MFUyTnZjR1V1Y21WamIzSmtjMXRwYm1SbGVDQXRJREZkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR2wwYkdVZ1BTQnlaV052Y21RdWRHbDBiR1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sa0lEMGdjbVZqYjNKa0xtbGtPMXh5WEc0Z0lDQWdJQ0FnSUgxZEtUdGNjbHh1SUNBZ0lEd3ZabWxzWlQ1Y2NseHVJQ0FnSUR4bWFXeGxJRzVoYldVOVhDSm9iMjFsTG1oMGJXeGNJajVjY2x4dUlDQWdJQ0FnUEdneVBsZGxiR052YldVZ2RHOGdkR2hsSUdodmJXVWdjR0ZuWlR3dmFERStYSEpjYmlBZ0lDQWdJRHh3UGxCc1pXRnpaU0JqYkdsamF5QnZiaUJoYmlCbGJHVnRaVzUwUEM5d1BseHlYRzRnSUNBZ0lDQThZU0JqYkdGemN6MWNJbkpsWTI5eVpGd2lYSEpjYmlBZ0lDQWdJQ0FnSUc1bkxXaHlaV1k5WENJakwzQnliMlpwYkdVdmUzc2djbVZqYjNKa0xtbGtJSDE5WENKY2NseHVJQ0FnSUNBZ0lDQWdibWN0WVc1cGJXRjBaUzF5WldZOVhDSjdleUJ5WldOdmNtUXVhV1FnZlgxY0lseHlYRzRnSUNBZ0lDQWdJQ0J1WnkxeVpYQmxZWFE5WENKeVpXTnZjbVFnYVc0Z2NtVmpiM0prYzF3aVBseHlYRzRnSUNBZ0lDQWdJSHQ3SUhKbFkyOXlaQzUwYVhSc1pTQjlmVnh5WEc0Z0lDQWdJQ0E4TDJFK1hISmNiaUFnSUNBOEwyWnBiR1UrWEhKY2JpQWdJQ0E4Wm1sc1pTQnVZVzFsUFZ3aWNISnZabWxzWlM1b2RHMXNYQ0krWEhKY2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSndjbTltYVd4bElISmxZMjl5WkZ3aUlHNW5MV0Z1YVcxaGRHVXRjbVZtUFZ3aWUzc2djSEp2Wm1sc1pTNXBaQ0I5ZlZ3aVBseHlYRzRnSUNBZ0lDQWdJSHQ3SUhCeWIyWnBiR1V1ZEdsMGJHVWdmWDFjY2x4dUlDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQThMMlpwYkdVK1hISmNiaUFnSUNBOFptbHNaU0J1WVcxbFBWd2lZVzVwYldGMGFXOXVjeTVqYzNOY0lqNWNjbHh1SUNBZ0lDQWdMbkpsWTI5eVpDQjdYSEpjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlVHBpYkc5amF6dGNjbHh1SUNBZ0lDQWdJQ0JtYjI1MExYTnBlbVU2TWpCd2VEdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0F1Y0hKdlptbHNaU0I3WEhKY2JpQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpEcGliR0ZqYXp0Y2NseHVJQ0FnSUNBZ0lDQmpiMnh2Y2pwM2FHbDBaVHRjY2x4dUlDQWdJQ0FnSUNCbWIyNTBMWE5wZW1VNk1UQXdjSGc3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0xuWnBaWGN0WTI5dWRHRnBibVZ5SUh0Y2NseHVJQ0FnSUNBZ0lDQndiM05wZEdsdmJqcHlaV3hoZEdsMlpUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0F1ZG1sbGR5MWpiMjUwWVdsdVpYSWdQaUF1ZG1sbGR5NXVaeTFoYm1sdFlYUmxJSHRjY2x4dUlDQWdJQ0FnSUNCd2IzTnBkR2x2YmpwaFluTnZiSFYwWlR0Y2NseHVJQ0FnSUNBZ0lDQjBiM0E2TUR0Y2NseHVJQ0FnSUNBZ0lDQnNaV1owT2pBN1hISmNiaUFnSUNBZ0lDQWdkMmxrZEdnNk1UQXdKVHRjY2x4dUlDQWdJQ0FnSUNCdGFXNHRhR1ZwWjJoME9qVXdNSEI0TzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDNTJhV1YzTG01bkxXVnVkR1Z5TENBdWRtbGxkeTV1Wnkxc1pXRjJaU3hjY2x4dUlDQWdJQ0FnTG5KbFkyOXlaQzV1WnkxaGJtTm9iM0lnZTF4eVhHNGdJQ0FnSUNBZ0lIUnlZVzV6YVhScGIyNDZNQzQxY3lCc2FXNWxZWElnWVd4c08xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQzUyYVdWM0xtNW5MV1Z1ZEdWeUlIdGNjbHh1SUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2ZEhKaGJuTnNZWFJsV0NneE1EQWxLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBdWRtbGxkeTV1WnkxbGJuUmxjaTV1WnkxbGJuUmxjaTFoWTNScGRtVXNJQzUyYVdWM0xtNW5MV3hsWVhabElIdGNjbHh1SUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2ZEhKaGJuTnNZWFJsV0Nnd0pTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnTG5acFpYY3VibWN0YkdWaGRtVXVibWN0YkdWaGRtVXRZV04wYVhabElIdGNjbHh1SUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2ZEhKaGJuTnNZWFJsV0NndE1UQXdKU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0xuSmxZMjl5WkM1dVp5MWhibU5vYjNJdGIzVjBJSHRjY2x4dUlDQWdJQ0FnSUNCaVlXTnJaM0p2ZFc1a09uSmxaRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnUEM5bWFXeGxQbHh5WEc0Z0lEd3ZaWGhoYlhCc1pUNWNjbHh1SUNwY2NseHVJQ29nSXlNaklFaHZkeUJwY3lCMGFHVWdaV3hsYldWdWRDQjBjbUZ1YzNCdmNuUmxaRDljY2x4dUlDcGNjbHh1SUNvZ1YyaGxiaUJoYmlCaGJtTm9iM0lnWVc1cGJXRjBhVzl1SUc5alkzVnljeXdnYm1kQmJtbHRZWFJsSUhkcGJHd2dZMnh2Ym1VZ2RHaGxJSE4wWVhKMGFXNW5JR1ZzWlcxbGJuUWdZVzVrSUhCdmMybDBhVzl1SUdsMElHVjRZV04wYkhrZ2QyaGxjbVVnZEdobElITjBZWEowYVc1blhISmNiaUFxSUdWc1pXMWxiblFnYVhNZ2JHOWpZWFJsWkNCdmJpQnpZM0psWlc0Z2RtbGhJR0ZpYzI5c2RYUmxJSEJ2YzJsMGFXOXVhVzVuTGlCVWFHVWdZMnh2Ym1Wa0lHVnNaVzFsYm5RZ2QybHNiQ0JpWlNCd2JHRmpaV1FnYVc1emFXUmxJRzltSUhSb1pTQnliMjkwSUdWc1pXMWxiblJjY2x4dUlDb2diMllnZEdobElHRndjR3hwWTJGMGFXOXVJQ2gzYUdWeVpTQnVaeTFoY0hBZ2QyRnpJR1JsWm1sdVpXUXBJR0Z1WkNCaGJHd2diMllnZEdobElFTlRVeUJqYkdGemMyVnpJRzltSUhSb1pTQnpkR0Z5ZEdsdVp5QmxiR1Z0Wlc1MElIZHBiR3dnWW1VZ1lYQndiR2xsWkM0Z1ZHaGxYSEpjYmlBcUlHVnNaVzFsYm5RZ2QybHNiQ0IwYUdWdUlHRnVhVzFoZEdVZ2FXNTBieUIwYUdVZ1lHOTFkR0FnWVc1a0lHQnBibUFnWVc1cGJXRjBhVzl1Y3lCaGJtUWdkMmxzYkNCbGRtVnVkSFZoYkd4NUlISmxZV05vSUhSb1pTQmpiMjl5WkdsdVlYUmxjeUJoYm1RZ2JXRjBZMmhjY2x4dUlDb2dkR2hsSUdScGJXVnVjMmx2Ym5NZ2IyWWdkR2hsSUdSbGMzUnBibUYwYVc5dUlHVnNaVzFsYm5RdUlFUjFjbWx1WnlCMGFHVWdaVzUwYVhKbElHRnVhVzFoZEdsdmJpQmhJRU5UVXlCamJHRnpjeUJ2WmlCZ0xtNW5MV0Z1YVcxaGRHVXRjMmhwYldBZ2QybHNiQ0JpWlNCaGNIQnNhV1ZrWEhKY2JpQXFJSFJ2SUdKdmRHZ2dkR2hsSUhOMFlYSjBhVzVuSUdGdVpDQmtaWE4wYVc1aGRHbHZiaUJsYkdWdFpXNTBjeUJwYmlCdmNtUmxjaUIwYnlCb2FXUmxJSFJvWlcwZ1puSnZiU0JpWldsdVp5QjJhWE5wWW14bElDaDBhR1VnUTFOVElITjBlV3hwYm1jZ1ptOXlJSFJvWlNCamJHRnpjMXh5WEc0Z0tpQnBjem9nWUhacGMybGlhV3hwZEhrNmFHbGtaR1Z1WUNrdUlFOXVZMlVnZEdobElHRnVZMmh2Y2lCeVpXRmphR1Z6SUdsMGN5QmtaWE4wYVc1aGRHbHZiaUIwYUdWdUlHbDBJSGRwYkd3Z1ltVWdjbVZ0YjNabFpDQmhibVFnZEdobElHUmxjM1JwYm1GMGFXOXVJR1ZzWlcxbGJuUmNjbHh1SUNvZ2QybHNiQ0JpWldOdmJXVWdkbWx6YVdKc1pTQnphVzVqWlNCMGFHVWdjMmhwYlNCamJHRnpjeUIzYVd4c0lHSmxJSEpsYlc5MlpXUXVYSEpjYmlBcVhISmNiaUFxSUNNakl5QkliM2NnYVhNZ2RHaGxJRzF2Y25Cb2FXNW5JR2hoYm1Sc1pXUS9YSEpjYmlBcVhISmNiaUFxSUVOVFV5QkJibU5vYjNKcGJtY2djbVZzYVdWeklHOXVJSFJ5WVc1emFYUnBiMjV6SUdGdVpDQnJaWGxtY21GdFpYTWdZVzVrSUhSb1pTQnBiblJsY201aGJDQmpiMlJsSUdseklHbHVkR1ZzYkdsblpXNTBJR1Z1YjNWbmFDQjBieUJtYVdkMWNtVWdiM1YwWEhKY2JpQXFJSGRvWVhRZ1ExTlRJR05zWVhOelpYTWdaR2xtWm1WeUlHSmxkSGRsWlc0Z2RHaGxJSE4wWVhKMGFXNW5JR1ZzWlcxbGJuUWdZVzVrSUhSb1pTQmtaWE4wYVc1aGRHbHZiaUJsYkdWdFpXNTBMaUJVYUdWelpTQmthV1ptWlhKbGJuUWdRMU5USUdOc1lYTnpaWE5jY2x4dUlDb2dkMmxzYkNCaVpTQmhaR1JsWkM5eVpXMXZkbVZrSUc5dUlIUm9aU0JoYm1Ob2IzSWdaV3hsYldWdWRDQmhibVFnWVNCMGNtRnVjMmwwYVc5dUlIZHBiR3dnWW1VZ1lYQndiR2xsWkNBb2RHaGxJSFJ5WVc1emFYUnBiMjRnZEdoaGRDQnBjeUJ3Y205MmFXUmxaRnh5WEc0Z0tpQnBiaUIwYUdVZ1lXNWphRzl5SUdOc1lYTnpLUzRnVEc5dVp5QnpkRzl5ZVNCemFHOXlkQ3dnYm1kQmJtbHRZWFJsSUhkcGJHd2dabWxuZFhKbElHOTFkQ0IzYUdGMElHTnNZWE56WlhNZ2RHOGdZV1JrSUdGdVpDQnlaVzF2ZG1VZ2QyaHBZMmdnZDJsc2JGeHlYRzRnS2lCdFlXdGxJSFJvWlNCMGNtRnVjMmwwYVc5dUlHOW1JSFJvWlNCbGJHVnRaVzUwSUdGeklITnRiMjkwYUNCaGJtUWdZWFYwYjIxaGRHbGpJR0Z6SUhCdmMzTnBZbXhsTGlCQ1pTQnpkWEpsSUhSdklIVnpaU0J6YVcxd2JHVWdRMU5USUdOc1lYTnpaWE1nZEdoaGRGeHlYRzRnS2lCa2J5QnViM1FnY21Wc2VTQnZiaUJFVDAwZ2JtVnpkR2x1WnlCemRISjFZM1IxY21VZ2MyOGdkR2hoZENCMGFHVWdZVzVqYUc5eUlHVnNaVzFsYm5RZ1lYQndaV0Z5Y3lCMGFHVWdjMkZ0WlNCaGN5QjBhR1VnYzNSaGNuUnBibWNnWld4bGJXVnVkQ0FvYzJsdVkyVmNjbHh1SUNvZ2RHaGxJR05zYjI1bFpDQmxiR1Z0Wlc1MElHbHpJSEJzWVdObFpDQnBibk5wWkdVZ2IyWWdjbTl2ZENCbGJHVnRaVzUwSUhkb2FXTm9JR2x6SUd4cGEyVnNlU0JqYkc5elpTQjBieUIwYUdVZ1ltOWtlU0JsYkdWdFpXNTBLUzVjY2x4dUlDcGNjbHh1SUNvZ1RtOTBaU0IwYUdGMElHbG1JSFJvWlNCeWIyOTBJR1ZzWlcxbGJuUWdhWE1nYjI0Z2RHaGxJR0E4YUhSdGJENWdJR1ZzWlcxbGJuUWdkR2hsYmlCMGFHVWdZMnh2Ym1Wa0lHNXZaR1VnZDJsc2JDQmlaU0J3YkdGalpXUWdhVzV6YVdSbElHOW1JR0p2WkhrdVhISmNiaUFxWEhKY2JpQXFYSEpjYmlBcUlDTWpJRlZ6YVc1bklDUmhibWx0WVhSbElHbHVJSGx2ZFhJZ1pHbHlaV04wYVhabElHTnZaR1ZjY2x4dUlDcGNjbHh1SUNvZ1UyOGdabUZ5SUhkbEozWmxJR1Y0Y0d4dmNtVmtJR2h2ZHlCMGJ5Qm1aV1ZrSUdsdUlHRnVhVzFoZEdsdmJuTWdhVzUwYnlCaGJpQkJibWQxYkdGeUlHRndjR3hwWTJGMGFXOXVMQ0JpZFhRZ2FHOTNJR1J2SUhkbElIUnlhV2RuWlhJZ1lXNXBiV0YwYVc5dWN5QjNhWFJvYVc0Z2IzVnlJRzkzYmlCa2FYSmxZM1JwZG1WeklHbHVJRzkxY2lCaGNIQnNhV05oZEdsdmJqOWNjbHh1SUNvZ1Fua2dhVzVxWldOMGFXNW5JSFJvWlNCZ0pHRnVhVzFoZEdWZ0lITmxjblpwWTJVZ2FXNTBieUJ2ZFhJZ1pHbHlaV04wYVhabElHTnZaR1VzSUhkbElHTmhiaUIwY21sbloyVnlJSE4wY25WamRIVnlZV3dnWVc1a0lHTnNZWE56TFdKaGMyVmtJR2h2YjJ0eklIZG9hV05vSUdOaGJpQjBhR1Z1SUdKbElHTnZibk4xYldWa0lHSjVJR0Z1YVcxaGRHbHZibk11SUV4bGRDZHpYSEpjYmlBcUlHbHRZV2RwYm1VZ2QyVWdhR0YyWlNCaElHZHlaV1YwYVc1bklHSnZlQ0IwYUdGMElITm9iM2R6SUdGdVpDQm9hV1JsY3lCcGRITmxiR1lnZDJobGJpQjBhR1VnWkdGMFlTQmphR0Z1WjJWelhISmNiaUFxWEhKY2JpQXFJR0JnWUdoMGJXeGNjbHh1SUNvZ1BHZHlaV1YwYVc1bkxXSnZlQ0JoWTNScGRtVTlYQ0p2Yms5eVQyWm1YQ0krU0drZ2RHaGxjbVU4TDJkeVpXVjBhVzVuTFdKdmVENWNjbHh1SUNvZ1lHQmdYSEpjYmlBcVhISmNiaUFxSUdCZ1lHcHpYSEpjYmlBcUlHNW5UVzlrZFd4bExtUnBjbVZqZEdsMlpTZ25aM0psWlhScGJtZENiM2duTENCYkp5UmhibWx0WVhSbEp5d2dablZ1WTNScGIyNG9KR0Z1YVcxaGRHVXBJSHRjY2x4dUlDb2dJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9jMk52Y0dVc0lHVnNaVzFsYm5Rc0lHRjBkSEp6S1NCN1hISmNiaUFxSUNBZ0lDQmhkSFJ5Y3k0a2IySnpaWEoyWlNnbllXTjBhWFpsSnl3Z1puVnVZM1JwYjI0b2RtRnNkV1VwSUh0Y2NseHVJQ29nSUNBZ0lDQWdkbUZzZFdVZ1B5QWtZVzVwYldGMFpTNWhaR1JEYkdGemN5aGxiR1Z0Wlc1MExDQW5iMjRuS1NBNklDUmhibWx0WVhSbExuSmxiVzkyWlVOc1lYTnpLR1ZzWlcxbGJuUXNJQ2R2YmljcE8xeHlYRzRnS2lBZ0lDQWdmU2s3WEhKY2JpQXFJQ0FnZlNrN1hISmNiaUFxSUgxZEtUdGNjbHh1SUNvZ1lHQmdYSEpjYmlBcVhISmNiaUFxSUU1dmR5QjBhR1VnWUc5dVlDQkRVMU1nWTJ4aGMzTWdhWE1nWVdSa1pXUWdZVzVrSUhKbGJXOTJaV1FnYjI0Z2RHaGxJR2R5WldWMGFXNW5JR0p2ZUNCamIyMXdiMjVsYm5RdUlFNXZkeUJwWmlCM1pTQmhaR1FnWVNCRFUxTWdZMnhoYzNNZ2IyNGdkRzl3SUc5bUlIUm9aU0JuY21WbGRHbHVaeUJpYjNnZ1pXeGxiV1Z1ZEZ4eVhHNGdLaUJwYmlCdmRYSWdTRlJOVENCamIyUmxJSFJvWlc0Z2QyVWdZMkZ1SUhSeWFXZG5aWElnWVNCRFUxTWdiM0lnU2xNZ1lXNXBiV0YwYVc5dUlIUnZJR2hoY0hCbGJpNWNjbHh1SUNwY2NseHVJQ29nWUdCZ1kzTnpYSEpjYmlBcUlDOG1JelF5T3lCdWIzSnRZV3hzZVNCM1pTQjNiM1ZzWkNCamNtVmhkR1VnWVNCRFUxTWdZMnhoYzNNZ2RHOGdjbVZtWlhKbGJtTmxJRzl1SUhSb1pTQmxiR1Z0Wlc1MElDWWpOREk3TDF4eVhHNGdLaUJuY21WbGRHbHVaeTFpYjNndWIyNGdleUIwY21GdWMybDBhVzl1T2pBdU5YTWdiR2x1WldGeUlHRnNiRHNnWW1GamEyZHliM1Z1WkRwbmNtVmxianNnWTI5c2IzSTZkMmhwZEdVN0lIMWNjbHh1SUNvZ1lHQmdYSEpjYmlBcVhISmNiaUFxSUZSb1pTQmdKR0Z1YVcxaGRHVmdJSE5sY25acFkyVWdZMjl1ZEdGcGJuTWdZU0IyWVhKcFpYUjVJRzltSUc5MGFHVnlJRzFsZEdodlpITWdiR2xyWlNCZ1pXNTBaWEpnTENCZ2JHVmhkbVZnTENCZ1lXNXBiV0YwWldBZ1lXNWtJR0J6WlhSRGJHRnpjMkF1SUZSdklHeGxZWEp1SUcxdmNtVWdZV0p2ZFhRZ2QyaGhkQ2R6WEhKY2JpQXFJSEJ2YzNOcFlteGxJR0psSUhOMWNtVWdkRzhnZG1semFYUWdkR2hsSUh0QWJHbHVheUJ1Wnk0a1lXNXBiV0YwWlNBa1lXNXBiV0YwWlNCelpYSjJhV05sSUVGUVNTQndZV2RsZlM1Y2NseHVJQ3BjY2x4dUlDcGNjbHh1SUNvZ0l5TWdRMkZzYkdKaFkydHpJR0Z1WkNCUWNtOXRhWE5sYzF4eVhHNGdLbHh5WEc0Z0tpQlhhR1Z1SUdBa1lXNXBiV0YwWldBZ2FYTWdZMkZzYkdWa0lHbDBJSEpsZEhWeWJuTWdZU0J3Y205dGFYTmxJSFJvWVhRZ1kyRnVJR0psSUhWelpXUWdkRzhnWTJGd2RIVnlaU0IzYUdWdUlIUm9aU0JoYm1sdFlYUnBiMjRnYUdGeklHVnVaR1ZrTGlCVWFHVnlaV1p2Y21VZ2FXWWdkMlVnZDJWeVpTQjBieUIwY21sbloyVnlYSEpjYmlBcUlHRnVJR0Z1YVcxaGRHbHZiaUFvZDJsMGFHbHVJRzkxY2lCa2FYSmxZM1JwZG1VZ1kyOWtaU2tnZEdobGJpQjNaU0JqWVc0Z1kyOXVkR2x1ZFdVZ2NHVnlabTl5YldsdVp5QmthWEpsWTNScGRtVWdZVzVrSUhOamIzQmxJSEpsYkdGMFpXUWdZV04wYVhacGRHbGxjeUJoWm5SbGNpQjBhR1VnWVc1cGJXRjBhVzl1SUdoaGMxeHlYRzRnS2lCbGJtUmxaQ0JpZVNCamFHRnBibWx1WnlCdmJuUnZJSFJvWlNCeVpYUjFjbTVsWkNCd2NtOXRhWE5sSUhSb1lYUWdZVzVwYldGMGFXOXVJRzFsZEdodlpDQnlaWFIxY201ekxseHlYRzRnS2x4eVhHNGdLaUJnWUdCcWMxeHlYRzRnS2lBdkx5QnpiMjFsZDJobGNtVWdkMmwwYUdsdUlIUm9aU0JrWlhCMGFITWdiMllnZEdobElHUnBjbVZqZEdsMlpWeHlYRzRnS2lBa1lXNXBiV0YwWlM1bGJuUmxjaWhsYkdWdFpXNTBMQ0J3WVhKbGJuUXBMblJvWlc0b1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBcUlDQWdMeTkwYUdVZ1lXNXBiV0YwYVc5dUlHaGhjeUJqYjIxd2JHVjBaV1JjY2x4dUlDb2dmU2s3WEhKY2JpQXFJR0JnWUZ4eVhHNGdLbHh5WEc0Z0tpQW9UbTkwWlNCMGFHRjBJR1ZoY214cFpYSWdkbVZ5YzJsdmJuTWdiMllnUVc1bmRXeGhjaUJ3Y21sdmNpQjBieUIyTVM0MElISmxjWFZwY21Wa0lIUm9aU0J3Y205dGFYTmxJR052WkdVZ2RHOGdZbVVnZDNKaGNIQmxaQ0IxYzJsdVp5QmdKSE5qYjNCbExpUmhjSEJzZVNndUxpNHBZQzRnVkdocGN5QnBjeUJ1YjNRZ2RHaGxJR05oYzJWY2NseHVJQ29nWVc1NWJXOXlaUzRwWEhKY2JpQXFYSEpjYmlBcUlFbHVJR0ZrWkdsMGFXOXVJSFJ2SUhSb1pTQmhibWx0WVhScGIyNGdjSEp2YldselpTd2dkMlVnWTJGdUlHRnNjMjhnYldGclpTQjFjMlVnYjJZZ1lXNXBiV0YwYVc5dUxYSmxiR0YwWldRZ1kyRnNiR0poWTJ0eklIZHBkR2hwYmlCdmRYSWdaR2x5WldOMGFYWmxjeUJoYm1RZ1kyOXVkSEp2Ykd4bGNpQmpiMlJsSUdKNUlISmxaMmx6ZEdWeWFXNW5YSEpjYmlBcUlHRnVJR1YyWlc1MElHeHBjM1JsYm1WeUlIVnphVzVuSUhSb1pTQmdKR0Z1YVcxaGRHVmdJSE5sY25acFkyVXVJRXhsZENkeklITmhlU0JtYjNJZ1pYaGhiWEJzWlNCMGFHRjBJR0Z1SUdGdWFXMWhkR2x2YmlCM1lYTWdkSEpwWjJkbGNtVmtJRzl1SUc5MWNpQjJhV1YzWEhKY2JpQXFJSEp2ZFhScGJtY2dZMjl1ZEhKdmJHeGxjaUIwYnlCb2IyOXJJR2x1ZEc4Z2RHaGhkRHBjY2x4dUlDcGNjbHh1SUNvZ1lHQmdhbk5jY2x4dUlDb2dibWROYjJSMWJHVXVZMjl1ZEhKdmJHeGxjaWduU0c5dFpWQmhaMlZEYjI1MGNtOXNiR1Z5Snl3Z1d5Y2tZVzVwYldGMFpTY3NJR1oxYm1OMGFXOXVLQ1JoYm1sdFlYUmxLU0I3WEhKY2JpQXFJQ0FnSkdGdWFXMWhkR1V1YjI0b0oyVnVkR1Z5Snl3Z2JtZFdhV1YzUld4bGJXVnVkQ3dnWm5WdVkzUnBiMjRvWld4bGJXVnVkQ2tnZTF4eVhHNGdLaUFnSUNBZ0x5OGdkR2hsSUdGdWFXMWhkR2x2YmlCbWIzSWdkR2hwY3lCeWIzVjBaU0JvWVhNZ1kyOXRjR3hsZEdWa1hISmNiaUFxSUNBZ2ZWMHBPMXh5WEc0Z0tpQjlYU2xjY2x4dUlDb2dZR0JnWEhKY2JpQXFYSEpjYmlBcUlDaE9iM1JsSUhSb1lYUWdlVzkxSUhkcGJHd2dibVZsWkNCMGJ5QjBjbWxuWjJWeUlHRWdaR2xuWlhOMElIZHBkR2hwYmlCMGFHVWdZMkZzYkdKaFkyc2dkRzhnWjJWMElHRnVaM1ZzWVhJZ2RHOGdibTkwYVdObElHRnVlU0J6WTI5d1pTMXlaV3hoZEdWa0lHTm9ZVzVuWlhNdUtWeHlYRzRnS2k5Y2NseHVYSEpjYm5aaGNpQmpiM0I1TzF4eVhHNTJZWElnWlhoMFpXNWtPMXh5WEc1MllYSWdabTl5UldGamFEdGNjbHh1ZG1GeUlHbHpRWEp5WVhrN1hISmNiblpoY2lCcGMwUmxabWx1WldRN1hISmNiblpoY2lCcGMwVnNaVzFsYm5RN1hISmNiblpoY2lCcGMwWjFibU4wYVc5dU8xeHlYRzUyWVhJZ2FYTlBZbXBsWTNRN1hISmNiblpoY2lCcGMxTjBjbWx1Wnp0Y2NseHVkbUZ5SUdselZXNWtaV1pwYm1Wa08xeHlYRzUyWVhJZ2FuRk1hWFJsTzF4eVhHNTJZWElnYm05dmNEdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkFibWRrYjJNZ2MyVnlkbWxqWlZ4eVhHNGdLaUJBYm1GdFpTQWtZVzVwYldGMFpWeHlYRzRnS2lCQWEybHVaQ0J2WW1wbFkzUmNjbHh1SUNwY2NseHVJQ29nUUdSbGMyTnlhWEIwYVc5dVhISmNiaUFxSUZSb1pTQnVaMEZ1YVcxaGRHVWdZQ1JoYm1sdFlYUmxZQ0J6WlhKMmFXTmxJR1J2WTNWdFpXNTBZWFJwYjI0Z2FYTWdkR2hsSUhOaGJXVWdabTl5SUhSb1pTQmpiM0psSUdBa1lXNXBiV0YwWldBZ2MyVnlkbWxqWlM1Y2NseHVJQ3BjY2x4dUlDb2dRMnhwWTJzZ2FHVnlaU0I3UUd4cGJtc2dibWN1SkdGdWFXMWhkR1VnZEc4Z2JHVmhjbTRnYlc5eVpTQmhZbTkxZENCaGJtbHRZWFJwYjI1eklIZHBkR2dnWUNSaGJtbHRZWFJsWUgwdVhISmNiaUFxTDF4eVhHNWhibWQxYkdGeUxtMXZaSFZzWlNnbmJtZEJibWx0WVhSbEp5d2dXMTBzSUdaMWJtTjBhVzl1SUdsdWFYUkJibWQxYkdGeVNHVnNjR1Z5Y3lncElIdGNjbHh1SUNBdkx5QkJZMk5sYzNNZ2FHVnNjR1Z5Y3lCbWNtOXRJR0Z1WjNWc1lYSWdZMjl5WlM1Y2NseHVJQ0F2THlCRWJ5QnBkQ0JwYm5OcFpHVWdZU0JnWTI5dVptbG5ZQ0JpYkc5amF5QjBieUJsYm5OMWNtVWdZSGRwYm1SdmR5NWhibWQxYkdGeVlDQnBjeUJoZG1GcGJHRmliR1V1WEhKY2JpQWdibTl2Y0NBZ0lDQWdJQ0FnUFNCaGJtZDFiR0Z5TG01dmIzQTdYSEpjYmlBZ1kyOXdlU0FnSUNBZ0lDQWdQU0JoYm1kMWJHRnlMbU52Y0hrN1hISmNiaUFnWlhoMFpXNWtJQ0FnSUNBZ1BTQmhibWQxYkdGeUxtVjRkR1Z1WkR0Y2NseHVJQ0JxY1V4cGRHVWdJQ0FnSUNBOUlHRnVaM1ZzWVhJdVpXeGxiV1Z1ZER0Y2NseHVJQ0JtYjNKRllXTm9JQ0FnSUNBOUlHRnVaM1ZzWVhJdVptOXlSV0ZqYUR0Y2NseHVJQ0JwYzBGeWNtRjVJQ0FnSUNBOUlHRnVaM1ZzWVhJdWFYTkJjbkpoZVR0Y2NseHVJQ0JwYzFOMGNtbHVaeUFnSUNBOUlHRnVaM1ZzWVhJdWFYTlRkSEpwYm1jN1hISmNiaUFnYVhOUFltcGxZM1FnSUNBZ1BTQmhibWQxYkdGeUxtbHpUMkpxWldOME8xeHlYRzRnSUdselZXNWtaV1pwYm1Wa0lEMGdZVzVuZFd4aGNpNXBjMVZ1WkdWbWFXNWxaRHRjY2x4dUlDQnBjMFJsWm1sdVpXUWdJQ0E5SUdGdVozVnNZWEl1YVhORVpXWnBibVZrTzF4eVhHNGdJR2x6Um5WdVkzUnBiMjRnSUQwZ1lXNW5kV3hoY2k1cGMwWjFibU4wYVc5dU8xeHlYRzRnSUdselJXeGxiV1Z1ZENBZ0lEMGdZVzVuZFd4aGNpNXBjMFZzWlcxbGJuUTdYSEpjYm4wcFhISmNiaUFnTG1ScGNtVmpkR2wyWlNnbmJtZEJibWx0WVhSbFUzZGhjQ2NzSUc1blFXNXBiV0YwWlZOM1lYQkVhWEpsWTNScGRtVXBYSEpjYmx4eVhHNGdJQzVrYVhKbFkzUnBkbVVvSjI1blFXNXBiV0YwWlVOb2FXeGtjbVZ1Snl3Z0pDUkJibWx0WVhSbFEyaHBiR1J5Wlc1RWFYSmxZM1JwZG1VcFhISmNiaUFnTG1aaFkzUnZjbmtvSnlRa2NrRkdVMk5vWldSMWJHVnlKeXdnSkNSeVFVWlRZMmhsWkhWc1pYSkdZV04wYjNKNUtWeHlYRzVjY2x4dUlDQXVjSEp2ZG1sa1pYSW9KeVFrWVc1cGJXRjBaVkYxWlhWbEp5d2dKQ1JCYm1sdFlYUmxVWFZsZFdWUWNtOTJhV1JsY2lsY2NseHVJQ0F1Y0hKdmRtbGtaWElvSnlRa1lXNXBiV0YwYVc5dUp5d2dKQ1JCYm1sdFlYUnBiMjVRY205MmFXUmxjaWxjY2x4dVhISmNiaUFnTG5CeWIzWnBaR1Z5S0Nja1lXNXBiV0YwWlVOemN5Y3NJQ1JCYm1sdFlYUmxRM056VUhKdmRtbGtaWElwWEhKY2JpQWdMbkJ5YjNacFpHVnlLQ2NrSkdGdWFXMWhkR1ZEYzNORWNtbDJaWEluTENBa0pFRnVhVzFoZEdWRGMzTkVjbWwyWlhKUWNtOTJhV1JsY2lsY2NseHVYSEpjYmlBZ0xuQnliM1pwWkdWeUtDY2tKR0Z1YVcxaGRHVktjeWNzSUNRa1FXNXBiV0YwWlVwelVISnZkbWxrWlhJcFhISmNiaUFnTG5CeWIzWnBaR1Z5S0Nja0pHRnVhVzFoZEdWS2MwUnlhWFpsY2ljc0lDUWtRVzVwYldGMFpVcHpSSEpwZG1WeVVISnZkbWxrWlhJcE8xeHlYRzVjY2x4dVhISmNibjBwS0hkcGJtUnZkeXdnZDJsdVpHOTNMbUZ1WjNWc1lYSXBPeUpkTENKbWFXeGxJam9pWVc1bmRXeGhjaTFoYm1sdFlYUmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTl6YjNWeVkyVXZJbjA9Il0sImZpbGUiOiJhbmd1bGFyLWFuaW1hdGUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
